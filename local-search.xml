<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Database System: basic statements</title>
    <link href="/silmont2000.github.io/2020/03/13/Database-System-basic-statements/"/>
    <url>/silmont2000.github.io/2020/03/13/Database-System-basic-statements/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="What‘s-SQL"><a href="#What‘s-SQL" class="headerlink" title="What‘s  SQL"></a>What‘s  SQL</h1><p>结构化查询语言，structured query language，called ”SEQUEL“. It can define the structure of the data, modify data in the database, and specify security constraints. </p><p>There are four SQL conformance levels: entry level, transitional,  intermediate and full. But currently no DBMS products achieve Full SQL level.</p><p>including:</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>data_definition language. DDL is used to operate the <strong>table</strong>.</p><ul><li>create table; alter(修改) table; drop table——integrity</li><li>create index; drop index</li><li>create view; drop view</li><li>create trigger; drop trigger</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="*DML"></a>*DML</h2><p>data_manipulation language. The SQL DML provides the ability to <strong>query</strong> information from the database and to <strong>insert</strong> tuples into, <strong>delete</strong> tuples from, and <strong>modify</strong> tuples in the database.</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>data_control language.</p><h1 id="data-definition"><a href="#data-definition" class="headerlink" title="data definition"></a>data definition</h1><h2 id="basic-types"><a href="#basic-types" class="headerlink" title="basic types"></a>basic types</h2><ul><li>char(<em>n</em>): A fixed-length character string with user-specified length n. if store “hello” in char(7), <strong>two more spaces</strong> will be appended. when comparing two values of type char,if they are of different lengths, <strong>extra spaces</strong> are automatically added to the shorter one to make them the same size, before comparison. </li><li>varchar(<em>n</em>):  (<strong>recommended</strong>) A variable-length character string with user-specified maximum length n. so if “hello” is stored in varchar(7), <strong>no more spaces</strong> will be appended.</li><li>int</li><li>smallint: Kind of like a short int. Its size depends on the machine.</li><li>numeric(<em>p,d</em>): the allowed format is (p<strong>-d</strong> digits. d digits). e.g. numeric(4,2) allows 22.22, but neither 222.2 or 2.222.</li><li>real, double: real is kind of like float. and double is double.</li><li>float(<em>n</em>): A floating_point number, with precision of <strong>at least</strong> n digits.</li><li>date: containing a 4-digit-year, month and date. e.g. date ‘2000-2-17’</li><li>time: ‘08:15:30’ or ‘08:15:30.75’</li><li>timestamp: date + time. timestamp ‘2000-2-17 08:15:30.75’</li></ul><h2 id="basic-schema-definition-amp-basic-structure-of-select"><a href="#basic-schema-definition-amp-basic-structure-of-select" class="headerlink" title="basic schema definition &amp; basic structure of select"></a>basic schema definition &amp; basic structure of select</h2><h3 id="create-a-table"><a href="#create-a-table" class="headerlink" title="create a table"></a>create a table</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table department-- name of the table</span><br><span class="line">(dept_name varchar(20) NOT NULL,</span><br><span class="line">     -- name of the attribute; domain of the attribute</span><br><span class="line">    building varchar(15),</span><br><span class="line">    budget numeric(12,2),</span><br><span class="line">    primary key(dept_name)-- &lt;integrity_constraint&gt;</span><br><span class="line">     -- more than one primary keys are allowed</span><br><span class="line">    foreign key(dept_name) references department);</span><br></pre></td></tr></table></figure><p>SQL supports a number of different integrity constraints. For example: <strong>primary key, foreign key references</strong> <em>s</em>, <strong>not null</strong>. Without a ban, every attribute can be null. As for primary key, the following writing is also equivalent:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> department</span><br><span class="line">(primary <span class="keyword">key</span>,</span><br><span class="line">     dept_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   ...);</span><br></pre></td></tr></table></figure><p>And if a check is necessary, we write:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">create table instructor</span><br><span class="line">(ID char(5),</span><br><span class="line">primary key,-- mark the folowing line is the primary key</span><br><span class="line">name varchar(20),</span><br><span class="line">dept_name varchar(20),</span><br><span class="line">salary numeric(8,2),</span><br><span class="line">check(salary&gt;&#x3D;0));-- add some conditions</span><br></pre></td></tr></table></figure><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>And the relation is empty initially. We write as below to insert a tuple; The values are specified in the order in which the corresponding attributes are listed i<strong>n the relation schema</strong>. </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> instructor</span><br><span class="line"><span class="keyword">values</span> (<span class="number">10211</span>, <span class="string">"Silmont"</span>, <span class="string">"digital media"</span>, <span class="number">66000</span>);</span><br></pre></td></tr></table></figure><p>But what if I forgot the order?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">insert into instructor(name, dept_name, salary, ID)-- specify the order</span><br><span class="line">values(&quot;Silmont&quot;, &quot;digital media&quot;, 66000, 10211);</span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="*select"></a>*select</h3><h4 id="queries-on-single-relation"><a href="#queries-on-single-relation" class="headerlink" title="queries on single relation"></a>queries on single relation</h4><p>The <strong>select</strong> clause is used to list the attributes desired in the result of a query. The <strong>from</strong> clause is a list of the relations to be accessed in the evaluation of the query.  The simplest statement is:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">name</span></span><br><span class="line"><span class="keyword">from</span> instructor;</span><br></pre></td></tr></table></figure><p>Ending with a semicolon, the statement means take out all the <em>names</em> of the relation <em>instructor</em>, the result will have a heading “<strong><em>name</em></strong>“. But if we do the same thing to find dept_name, lots of duplication will happen because <strong>more than one</strong> employee works in this department. The solution is:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> dept_name</span><br><span class="line"><span class="keyword">from</span> instructor;</span><br></pre></td></tr></table></figure><p>With <strong>distinct</strong>, we force the elimination(淘汰) of duplicates ( <strong>exactly</strong> the same results) . On the contrary, select all is used to emphasize that duplicates should not be removed. And <strong>all is the default.</strong></p><p>The select clause may also contain arithmetic expressions involving the operators +, − , ∗,a n d / operating on constants or attributes of tuples, while not result in any change to relation. For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select ID, name, salary * 1.1</span><br><span class="line">from instructor;</span><br></pre></td></tr></table></figure><p>While in life, sometimes only those who contribute more can get a rise. So we need to specifies the condition, like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select ID, name, salary * 1.1</span><br><span class="line">from instructor</span><br><span class="line">where salary &gt;&#x3D;10 000 and dept_name &#x3D; &#39;Comp.Sci&#39;;</span><br></pre></td></tr></table></figure><p>The <strong>where</strong> clause is a predicate involving attributes of the relation in the <strong>from</strong> clause, if omitted, the predicate is <strong>true</strong>. Some other symbols has the same status as ‘&gt;’: <strong>&lt;, =,</strong> <strong>between</strong> num1 <strong>and</strong> num2; <strong>NOT</strong> and <strong>OR</strong> are used widely, too.</p><h4 id="queries-on-multiple-relations"><a href="#queries-on-multiple-relations" class="headerlink" title="queries on multiple relations"></a>queries on multiple relations</h4><p>To solve the problem that more than one relation are involved to get a result, we need to <strong>select</strong> from a unioned-relation. For example, “Retrieve the names of all instructors, along with their department names and department building name”,  the operations are related to the relation <em>instructor</em>, <em>department</em>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select name, instructor.dept_name, building</span><br><span class="line">from instructor, department</span><br><span class="line">where instructor.dept_name &#x3D; department.dept_name;</span><br><span class="line">or</span><br><span class="line">from instructor natural join teaches;</span><br></pre></td></tr></table></figure><p>First, the relation name are used <strong>necessarily</strong> as a prefix to make <em>dept_name</em> clear. Second, list the relations that need to be accessed in the <strong>from</strong> clause(Cartesian Product), and specify the matching condition in the <strong>where</strong> clause. The example above is a natural union.</p><p>In the previous article, I mentioned that when finding the <em>most</em>, making a Cartesian product with the relation itself is feasible. But they will have the same prefix, so renaming is put forward:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select name as instructor_name, course_ID</span><br><span class="line">from instructor as I, teaches as T</span><br><span class="line">where I.ID &#x3D; T.ID;</span><br><span class="line"></span><br><span class="line">select distinct name</span><br><span class="line">from instructor as I, instructor as T</span><br><span class="line">where I.salary &lt; T.salary and T.dept_name &#x3D; &quot;Comp.Sci&quot;;</span><br></pre></td></tr></table></figure><p>‘AS’ is optional. It rename the result of column A as B, so you can also write count(name) as name_num. </p><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table instructor; -- delete all information</span><br></pre></td></tr></table></figure><p>delete everything about instructor, including the relation itself.</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p><strong>delete</strong> retains relation <em>instructor</em>, but deletes all tuples in <em>instructor</em>. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete from instructor;</span><br></pre></td></tr></table></figure><h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><p><strong>Alter</strong> is used to add or drop or modify attributes to an existing relation. A is the new attribute, D is its domain.</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table r add (A1 D1, A2 D2...,An Dn);</span><br><span class="line">alter table r drop A;-- may be not supported</span><br><span class="line">alter table r modify (ID char(10), salary not null);</span><br></pre></td></tr></table></figure><h3 id="create-index"><a href="#create-index" class="headerlink" title="create index"></a>create index</h3><p>It is used to create indexes on tables. Indexes enable database applications to look up data faster without reading the entire table. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name (column_name a, b,...,n);</span><br><span class="line">-- Creates a unique index on a table. Duplicate values are not allowed:</span><br><span class="line">CREATE UNIQUE INDEX index_name</span><br><span class="line">ON table_name (column_name)</span><br></pre></td></tr></table></figure><h2 id="string-matching-operator-通配符"><a href="#string-matching-operator-通配符" class="headerlink" title="string-matching operator 通配符"></a>string-matching operator 通配符</h2><h3 id="all"><a href="#all" class="headerlink" title="*: all"></a>*: all</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from student where dept_name &#x3D; &quot;Sci&quot;;</span><br></pre></td></tr></table></figure><h3 id="matches-any-substring"><a href="#matches-any-substring" class="headerlink" title="%:  matches any substring."></a>%:  matches any substring.</h3><h3 id="matches-any-char"><a href="#matches-any-char" class="headerlink" title="_:  matches  any char."></a>_:  matches  any char.</h3><p>Must be used with <strong>LIKE</strong> in <strong>WHERE</strong>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Websites</span><br><span class="line">WHERE url LIKE &#39;https%&#39;</span><br></pre></td></tr></table></figure><h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>‘%‘ -&gt; %</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: concepts, relational algebra, null value</title>
    <link href="/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/"/>
    <url>/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/</url>
    
    <content type="html"><![CDATA[<p>总结一下数据库系统入门的一些基本概念和代数运算。</p><h2 id="CONCEPTS"><a href="#CONCEPTS" class="headerlink" title="CONCEPTS"></a>CONCEPTS</h2><h3 id="1-relation-relationship"><a href="#1-relation-relationship" class="headerlink" title="1. relation/relationship"></a><strong>1. relation/relationship</strong></h3><p>a relationship is a specific association among several entities.</p><p>a relation is an abstract concept，mostly equals to a table.</p><h3 id="2-principals"><a href="#2-principals" class="headerlink" title="2. principals"></a><strong>2. principals</strong></h3><p><em>key words： domain；atomic；null/true/false；relation schema/relation instance or database schema/database instance；unordered and no duplicate；</em></p><h4 id="custom-writing-formats："><a href="#custom-writing-formats：" class="headerlink" title="custom writing formats："></a>custom writing formats：</h4><p>a relation schema： R = {A1, A2…,An}<br>                  INSTRUCTOR-SCHEMA = {ID, NAME, DEPT_NAME}<br>a relation： r(R) = {A1, A2…,An}<br>                  instructor_one(INSTRUCTOR-SCHEMA) = {ID, NAME, DEPT_NAME}<br>a tuple( a row in the table)：t || r<br>an attribute： t[name]</p><h3 id="3-about-KEY"><a href="#3-about-KEY" class="headerlink" title="3. about KEY"></a><strong>3. about KEY</strong></h3><p><img src="https://cdn-images-1.medium.com/max/1000/1*GNDD3CpbMQOSfBkqKALn-Q.png" alt="img"></p><p>student(people) = {<u>st-ID</u>, st-name，sex, address，major-ID}</p><p>major(subject) = {<u>major-ID</u>, major-name}</p><p>major-ID is not a primary key of relation student, but a primary key of major, then it’s called a foreign key （referencing major，and major-ID must exist while can be marked with NULL），student is called a referencing relation；and major is a referenced relation.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851554/1_wdgu4h.png" alt="img"></p><center>Schema Diagram (模式图)</center><h2 id="TALK-ABOUT-RELATIONAL-ALGEBRA"><a href="#TALK-ABOUT-RELATIONAL-ALGEBRA" class="headerlink" title="TALK ABOUT RELATIONAL ALGEBRA"></a>TALK ABOUT RELATIONAL ALGEBRA</h2><p>What plays a vital role in learning DBS is four basic operations： to add，to delete，to update the data and to select what you need. </p><p>Pure languages form underlying basis of query languages that people use，including：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583852096/2_orcqst.png" alt="image-20200310231102353"></p><h3 id="1-relational-algebra"><a href="#1-relational-algebra" class="headerlink" title="1. relational algebra"></a><strong>1. relational algebra</strong></h3><h4 id="select：-sigma-rho-R"><a href="#select：-sigma-rho-R" class="headerlink" title="select： $\sigma$_ $\rho$(R)"></a>select： $\sigma$_ $\rho$(R)</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170550040_adbark.png" alt="image-20200308170550040"></p><p>incident: $\sigma$_(A=B ^ c&gt;20) (R)    result:</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170640349_trjdbw.png" alt="image-20200308170640349"></p><hr><h4 id="project-prod-A-C-r"><a href="#project-prod-A-C-r" class="headerlink" title="project :  $\prod$_A,C(r)"></a>project :  $\prod$_A,C(r)</h4><h4 id><a href="#" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170659603_dnoiiw.png" alt="image-20200308170659603"></h4><p>result：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170722947_cb5kcy.png" alt="image-20200308170722947"></p><hr><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><h4 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170830612_klxjsz.png" alt="image-20200308170830612"></h4><p>result： merger of similar items. </p><p>for R union S to be, they must have the same arity (same number of attributes) and the domains must be compatible.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170848539_mvp8cl.png" alt="image-20200308170848539"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308164500042_hioijk.png" alt="image-20200308164500042"></p><h4 id="set-difference-a-b"><a href="#set-difference-a-b" class="headerlink" title="set difference: a-b"></a>set difference: a-b</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170907433_jfynpx.png" alt="image-20200308170907433"></p><h4 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308173354362_tb2c8k.png" alt="image-20200308173354362"></p><hr><h4 id="Cartesian-product"><a href="#Cartesian-product" class="headerlink" title="Cartesian product"></a>Cartesian product</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170933374_budd0t.png" alt="image-20200308170933374"></p><p>result: list out all the possible permutation results</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170950775_aiim6b.png" alt="image-20200308170950775"></p><hr><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><p>$\rho$_x(E): rename E as x;</p><p>x can be x(a1, a2 …, an) to rename attributes at the same time.</p><hr><h4 id="natural-join-a-special-case-of-theta-join"><a href="#natural-join-a-special-case-of-theta-join" class="headerlink" title="natural join (a special case of theta join)"></a>natural join (a special case of theta join)</h4><p>first find out the same attributes(1,a; 2,b).</p><p>second make Cartesian product.</p><p>at last merge similar items.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308173613414_gadtj6.png" alt="image-20200308173613414"></p><hr><h4 id="division"><a href="#division" class="headerlink" title="division"></a>division</h4><p>Inverse calculation of Cartesian product</p><p>example: Q = R/S</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308174447859_ilinqp.png" alt="image-20200308174447859"></p><hr><h4 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309162625959_qismip.png" alt="image-20200309162625959"></p><p>in fact, this thought is similiar to that in <em>example: banking; 7</em> ,  to <strong>take away what we don’t need</strong> (tmp2).</p><hr><h4 id="extended-relational-algebra-operations"><a href="#extended-relational-algebra-operations" class="headerlink" title="extended relational-algebra-operations"></a>extended relational-algebra-operations</h4><p><strong>generalized projection</strong>: use arithmetic expressions as the projection order.</p><p><strong>aggregate functions &amp; operations</strong>: returns a single value as a result. requirements can be avg，min，max，sum，count；rename the result with ‘as’.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165427164_lvksfv.png" alt="image-20200309165427164"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165755602_livi38.png" alt="image-20200309165755602"></p><p><strong>Left Out Join &amp; Right Out Join &amp; Full Outer Join</strong>: define the basis for retaining results.</p><hr><hr><h3 id="EXAMPLE-banking"><a href="#EXAMPLE-banking" class="headerlink" title="EXAMPLE: banking"></a>EXAMPLE: banking</h3><hr><p><strong>branch (<u>branch-name</u>, branch-city, assets)</strong></p><p><strong>customer (<u>customer-name</u>, customer-street, customer-city)</strong></p><p><strong>account (<u>account-number</u>, branch-name, balance)</strong></p><p><strong>loan (<u>loan-number</u>, branch-name, amount)</strong></p><p><strong>depositor (<u>customer-name, account-number</u>)</strong></p><p><strong>borrower (<u>customer-name, loan-number</u>)</strong></p><p>Q:</p><p>1: Find all loans of over $1200</p><p>2: Find the <strong>loan number</strong> for each loan of an amount greater than $1200</p><p>3: Find the names of all customers who have a loan, <strong>or</strong> an account, or both, from the bank.</p><p>4: WHAT ABOUT <strong>AND</strong>?</p><p>5: Find the names of all customers who have a loan at the Perryridge branch.(<strong>USE AXB</strong>)</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308172122007_qs6btb.png" alt="image-20200308172122007"></p><p>6: Find the names of all customers who have a loan at the Perryridge branch but do not have</p><p> an account at any branch of the bank.(<strong>USE A-B</strong>)</p><p><strong>7: Find the largest account balance.</strong></p><p>ans = all - not the largest</p><p>​       = all - $\prod$<em>_account_balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2)     //a1 == a2 ==account</p><p>​       = $\prod$<em>balance (account) - $\prod$a1.balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2) </p><h3 id="2-tuple-relational-calculus"><a href="#2-tuple-relational-calculus" class="headerlink" title="2. tuple relational calculus"></a><strong>2. tuple relational calculus</strong></h3><p>//To be added</p><h3 id="3-domain-relational-calculus"><a href="#3-domain-relational-calculus" class="headerlink" title="3. domain relational calculus"></a><strong>3. domain relational calculus</strong></h3><p>//To be added</p><h2 id="about-NULL-value"><a href="#about-NULL-value" class="headerlink" title="about NULL value"></a>about NULL value</h2><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309171926902_o7qkus.png" alt="image-20200309171926902"></p><p>ALL in all，null is known, unknown is unknown.</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/silmont2000.github.io/2020/03/07/hello-world/"/>
    <url>/silmont2000.github.io/2020/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
