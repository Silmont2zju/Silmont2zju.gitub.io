<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>让自己的page被google收录（hexo搭建）</title>
    <link href="/silmont2000.github.io/2020/04/17/%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84page%E8%A2%ABgoogle%E6%94%B6%E5%BD%95/"/>
    <url>/silmont2000.github.io/2020/04/17/%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84page%E8%A2%ABgoogle%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h1><p>还是想给自己的网站留点可量化的数据，然后搜索了一下自己的blog：</p><p>？？？？？？？？？？？？？？？？？竟然没有？？？？？？？？？？？？？？？</p><p>吓得我连忙去看了看自己的Github page还在不在… …果然还是太菜了… …</p><p>我完全不知道被搜索到还是要自己提交材料的…</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>这里我选择让google收录，百度…emmmm…</p><p>好吧其实也是我比较懒（</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><h3 id="检查是否收录"><a href="#检查是否收录" class="headerlink" title="检查是否收录"></a>检查是否收录</h3><p>先直接google一下自己的site，看一看有没有出现在第一条，如果有的话就已经收录了下面就不用做啦：</p><pre><code class="c">site:https://silmont2000.github.io/</code></pre><h3 id="检查站点地图"><a href="#检查站点地图" class="headerlink" title="检查站点地图"></a>检查站点地图</h3><p>其次检查根目录下的public文件夹有没有一个站点地图文件，后缀名是xml，打开可以看到自己网站的结构，一般情况下命名是sitemap或者local-research之类。</p><p>有: 看下一点</p><p>没有：在git bash中执行：</p><pre><code>npm install hexo-generator-sitemap --save</code></pre><p>然后在hexo配置目录中加入：</p><pre><code>sitemap:    path: silmont2000.xml</code></pre><p>然后回到bash：</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>不出意外这个时候再检查public文件夹下就应该有这个地图文件啦。</p><h3 id="检查站点地图格式"><a href="#检查站点地图格式" class="headerlink" title="检查站点地图格式"></a>检查站点地图格式</h3><p>现在打开这个xml，检查一些常见 XML 错误：</p><ul><li><p>站点地图必须使用正确的标头。例如，如果站点地图包含视频信息，则会具有以下标头：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;        xmlns:video=&quot;http://www.google.com/schemas/sitemap-video/1.1&quot;&gt;</code></pre></li><li><p>标头中的命名空间必须为 <strong>“<a href="http://www.sitemaps.org/schemas/sitemap/0.9&quot;" target="_blank" rel="noopener">http://www.sitemaps.org/schemas/sitemap/0.9&quot;</a></strong>（而非 <strong>.9</strong>）。</p></li><li><p>所有 XML 属性必须括在单引号 (‘) 或双引号 (“) 中，并且必须采用直引号，而不是弯引号。Microsoft Word 之类的文字处理程序可能会插入弯引号。</p></li><li><p><strong>结尾是否有结束标签/&lt;/urlset/&gt;</strong></p></li></ul><h3 id="补习：站点地图："><a href="#补习：站点地图：" class="headerlink" title="补习：站点地图："></a>补习：站点地图：</h3><p>XML代表<strong>可扩展标记语言</strong>（XML），这是一个标准的机器可读的文件格式。一个站点地图是XML的文档，可以帮助谷歌和其他主要搜索引擎更好地理解你的网站而进行抓取。它<strong>结构化地</strong>列出了一个网站。有点像你所有页面url的一个有逻辑的集合。</p><h2 id="向google提交材料"><a href="#向google提交材料" class="headerlink" title="向google提交材料"></a>向google提交材料</h2><h3 id="用HTML标记验证所有权"><a href="#用HTML标记验证所有权" class="headerlink" title="用HTML标记验证所有权"></a>用HTML标记验证所有权</h3><p>访问<a href="https://search.google.com/search-console?resource_id=https%3A%2F%2Fsilmont2000.github.io%2F" target="_blank" rel="noopener">Google Search Console</a>：</p><p>选择输入网址前缀（右边这个），可以自己选择方式验证。我选择了看上去最简单的html标记：其他验证方法–html标记；</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1587112355/image-20200417161608624_q5vdj0.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200417161608624"></p><p>然后复制它提供给你的代码，到hexo主题文件夹下的（我现在是fluid主题）\themes\fluid\layout_partial，找到head.ejs，有的可能是header.ejs，把它给你的代码粘在head里面；</p><p>这个时候！不要忘记再编译部署一下，否则google也是验证不到的。</p><h3 id="提交站点地图"><a href="#提交站点地图" class="headerlink" title="提交站点地图"></a>提交站点地图</h3><p>还记得我们前面提到的sitemap嘛！</p><p><a href="https://support.google.com/webmasters/answer/7451001#error-list" target="_blank" rel="noopener">https://support.google.com/webmasters/answer/7451001#error-list</a></p><p>这个时候选择左边资源里面你的网址，然后进入站点地图：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1587112358/image-20200417162631979_rxgmkh.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200417162515880"></p><p>填写你的xml文件（加后缀），然后提交，就可以啦！</p><p>(想到本零食屋即将有其他朋友来我就好激动啊哈哈哈哈哈哈哈</p><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><p>请参考<a href="https://support.google.com/webmasters/answer/7451001#error-list" target="_blank" rel="noopener">官方文档</a></p><p>如果hexo插件生成的总是有问题，建议使用第三方插件：<a href="https://smallseotools.com/zh/xml-sitemap-generator/" target="_blank" rel="noopener">XML站点地图生成器</a> ,  <a href="https://www.xml-sitemaps.com/" target="_blank" rel="noopener">这个没有名字</a></p><p>前者能识别中文，后者有可能有点问题</p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
      <tag>Github Page</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: ER图的设计、范式</title>
    <link href="/silmont2000.github.io/2020/04/09/Database-System-ER%E5%9B%BE%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%81%E8%8C%83%E5%BC%8F/"/>
    <url>/silmont2000.github.io/2020/04/09/Database-System-ER%E5%9B%BE%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%81%E8%8C%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这一章节主要是讲各种范式（设计要求），ER图如何表示。从这一章开始关于数据库使用就告一段落了，下面会研究一些数据库的设计。</p><h1 id="E-R图的设计"><a href="#E-R图的设计" class="headerlink" title="E-R图的设计"></a>E-R图的设计</h1><h2 id="数据库结构的设计（复习）"><a href="#数据库结构的设计（复习）" class="headerlink" title="数据库结构的设计（复习）"></a>数据库结构的设计（复习）</h2><p>主要分为六大步：</p><p>需求分析：都有哪些角色？需要完成什么工作？</p><p>概念层设计：对数据和实体进行概括，提取出<strong>ER模型</strong></p><p>逻辑层设计：把ER图变成schema</p><p>schema refinement：用各种各样的<strong>范式</strong>进行检查</p><p>物理层设计、创建和初始化、分配角色和权限</p><h2 id="画法"><a href="#画法" class="headerlink" title="画法"></a>画法</h2><h3 id="基本画法"><a href="#基本画法" class="headerlink" title="基本画法"></a>基本画法</h3><ol><li><p>实体集</p><p>矩形，分两块，上面是实体集名称，下面是属性。属性如果是复合属性，按级别缩进即可。如果是多值属性，就用大括号括起来表示是一个集合。如果是导出形的（可以算的），就在后面加个括号，表示是一个函数。</p></li><li><p>关联集：菱形，如果有属性就用虚线连出去一个矩形。</p></li><li><p>自环联系集 recursive relationship set</p><p>这种情况发生在从属于同一个table的不同实体之间。比如课程A是课程B的先修课；学生A是学生B的组长等等。只需要分配并标注不同的role即可，一条线标注角色A连向关系集C，一条线标注角色B连向关联集C，AB都从实体集D出发。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165346207_oerckz.png" srcset="/silmont2000.github.io/img/loading.gif" alt="18"></p></li><li><p>弱实体集</p><p>直接举例，假如我告诉你一门课id是10034，你马上就能查到这门课，一是因为id是这门课的码，另一方面也不会产生歧义；但假如我告诉你一门课的开课时间是春学期（id=1），这一个春学期的课你无法确定是那一门课的春学期。我必须要告诉你这个section对应的course（体会一下两个”课程“的区别）才能确定section。</p><p>换句话说，当A的码都不能直接确定A，必须要由B辅助时，A就是弱实体集，对应的B就是强实体集。B叫做A的属主实体集（identifying entity set or owner entity set）链接弱实体集的关联集要用双层框菱形标记；而且这个关联集一定是一对多的；弱实体集肯定是total participation的；这个关联集叫做标识性联系（identifying relationship）。</p><p>弱实体集的码不叫码，叫discriminator， 或者partial key。正常情况下是下划线区分，那对于弱实体集就需要虚线区分。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165402296_j7lxkh.png" srcset="/silmont2000.github.io/img/loading.gif" alt="17"></p></li></ol><h3 id="进阶画法"><a href="#进阶画法" class="headerlink" title="进阶画法"></a>进阶画法</h3><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><h5 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h5><ol><li><p>基数约束 Cardinality Constraints  </p><p>1端画箭头，多端不画。如果是一对一，就是&lt;-◇-&gt;，一对多就是 &lt;-◇–，多对多就是-◇-</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165300335_chtcb6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="15"></p></li><li><p>线</p><p>一根实线表示可以不是total participation；否则用双线。total participation：要求每个人必须有一碗饭：人和饭是total participation；可以允许有人不吃饭，那就不是。</p></li></ol><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><ol><li><p>使用标注对上面的12进行整合。形式是x..y</p><p>x表示实体集最少连接量，y表示实体集最多连接量（注意都是对实体集，不是对左右）比如：导师0..<em>教授（动词）1..1学生，就代表导师可以不教授学生（联系为0）也可以无穷的教学生（\</em>是最多), 那对于学生来说最少最多都是1个导师，也就是学生是必须有导师的。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165333144_xxbs0x.png" srcset="/silmont2000.github.io/img/loading.gif" alt="14"></p></li></ol><h4 id="层级-level"><a href="#层级-level" class="headerlink" title="层级 level"></a>层级 level</h4><p>这可以借鉴面向对象程序设计中<strong>继承</strong>的概念。如：学生都有id和班级、专业的属性，但学生往下还可以分成不同的年级，会多出来一些实习单位、srtp项目之类特定年级的属性。</p><p>又比如人这个概念，还可以分为学生、学校雇员，学校雇员可以分为导师、助理—约定人除了这两种还可以有其他的，但学校雇员只有这两种：这说明层级之间<strong>不一定是完全分配</strong>的关系。</p><p>画法是下一集空心指向上一级。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165515486_o2utpw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="13"></p><h5 id="用户定义和条件定义-condition-defined-amp-user-defined"><a href="#用户定义和条件定义-condition-defined-amp-user-defined" class="headerlink" title="用户定义和条件定义  condition_defined&amp;user_defined"></a>用户定义和条件定义  condition_defined&amp;user_defined</h5><p>比如：只有”通过高考“的”人“才能成为”学生“，那么可以人为添加条件为：是否高考过为true的人才可以被分为学生。这叫做<strong>条件定义</strong>。但有一些分类纯粹是人工，比如我指派小王去项目A，小李去项目B，但小王小李之间的属性没什么区别，这就是<strong>用户定义</strong>的。</p><h5 id="不相交和可重叠-disjoint-amp-overlapping"><a href="#不相交和可重叠-disjoint-amp-overlapping" class="headerlink" title="不相交和可重叠 disjoint&amp;overlapping"></a>不相交和可重叠 disjoint&amp;overlapping</h5><p>这非常好理解。一个人可以边工作边读研，雇员和研究生的身份可重叠；但是他不能既是本科生又是研究生，也就是不相交，可以在ISA下标注disj。</p><h5 id="完全性约束-completeness-constraint"><a href="#完全性约束-completeness-constraint" class="headerlink" title="完全性约束 completeness constraint"></a>完全性约束 completeness constraint</h5><p>这就是对应着上面的”不一定完全分配“，如果必须完全分配的话就用双线连接isa和实体集，否则就用单线。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165610922_gnli1b.png" srcset="/silmont2000.github.io/img/loading.gif" alt="12"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165715530_jtwbta.png" srcset="/silmont2000.github.io/img/loading.gif" alt="11"></p><h2 id="其他说明和注解"><a href="#其他说明和注解" class="headerlink" title="其他说明和注解"></a>其他说明和注解</h2><p>这里基本只对二元的联系做了讨论，因为很多时候看上去的三元都可以拆成二元，并且超过三元的关系极其少见，如果出现三元，以上基本原则不变。</p><p>另外有时候我们画出非常复杂的ER图，可以考虑合并，用一个大矩形框来表示这是一个复合实体，然后再和其他的实体集进行交互。</p><p>放一个复杂的ER图大家体会一下。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165205266_t492zb.png" srcset="/silmont2000.github.io/img/loading.gif" alt="10"></p><p>总结：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165540863_hogh8y.png" srcset="/silmont2000.github.io/img/loading.gif" alt="9"></p><h1 id="第一范式-First-Normal-Form-1NF"><a href="#第一范式-First-Normal-Form-1NF" class="headerlink" title="第一范式 First Normal Form (1NF)"></a>第一范式 First Normal Form (1NF)</h1><p>要求：属性原子性，也就是不能再分解。标准的关系数据库基本都是原子性的，非原子性的复合属性会被“拍扁”。</p><p>多值属性的处理：最理想的是把它单独形成一张表。</p><h2 id="栗子："><a href="#栗子：" class="headerlink" title="栗子："></a>栗子：</h2><p>学生（学号，姓名，性别，出生年月日），如果认为最后一列还可以再分成（出生年，出生月，出生日），它就不是一范式了，否则就是；</p><h1 id="分解-decomposition"><a href="#分解-decomposition" class="headerlink" title="分解 decomposition"></a>分解 decomposition</h1><p>使得不符合xNF的拆成符合条件的。</p><p><strong>要求是</strong>：无损（lossless）、依赖保持。无损的含义是将一个关系模式分解成若干个关系模式后，通过<strong>自然连接</strong>或投影等运算仍能还原到原来的关系模式。依赖保持的含义是这若干个关系模式的闭包并集回去能得到原来关系模式的闭包（不能多也不能少）。</p><p>这个过程就建立在<strong>函数依赖</strong>和<strong>多值依赖</strong>上。</p><h3 id="functional-dependence（FD）"><a href="#functional-dependence（FD）" class="headerlink" title="functional dependence（FD）"></a>functional dependence（FD）</h3><p>a-&gt;b： a决定b，b被a决定。即对于元组t1t2,如果a部分相同，b部分一定相同。</p><p>举例：</p><table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>1</td><td>4</td></tr><tr><td>2</td><td>5</td></tr></tbody></table><p>在这个例子里面，A不能决定B，因为第一二行元组A部分相同B部分不相同。但反过来，如果这是所有的R，那么B是可以决定A的。如果只是一个instance的话就不一定。</p><h2 id="和key的关系"><a href="#和key的关系" class="headerlink" title="和key的关系"></a>和key的关系</h2><pre><code class="C">复习：比如一个小范围的所有人，没有重名的，考虑以下属性身份证 姓名 性别 年龄身份证唯一，所以是一个超道键姓名唯一，所以是一个超键（姓名，性别）唯一，所以是一个超键（姓名，性别，年龄）唯一，所以是一个超键--这里可以看出，超键的组合是唯一的，但可能不是最小唯一的身份证唯一，而且专没有多余属性，所以是一个候选键姓名唯一，而且没有多余属性，所以是一个候选键--这里可以看出，候选键是没有多余属性的超键考虑输入查询方便性，可以选择 身份证 为主键也可以 考虑习惯 选择 姓名 为主键--主键是选中的一属个候选键</code></pre><p>即范围上super&gt;candidate&gt;primary，强度上相反。</p><p>当K是R的superkey时，K一定能决定R的所有属性，反之亦然，也就是如果K一样，R的其他部分也一定一样，毕竟是唯一标识；那没有K的子集还能满足上面条件，就变成了candidate。</p><p>但这不代表只有superkey才是FD。比如属性之间：R（id，name，salary，city，company）：其中company-&gt;city，company并不是superkey（无法决定其他），却成立一个fd关系。</p><h2 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包 closure"></a>闭包 closure</h2><p>一个R中会有很多的FD，这些FD中很可能有一些推导关系（就像传递律那样），把这些全部推导出来就是一个“闭包”啦。</p><h3 id="Armstrong-定律"><a href="#Armstrong-定律" class="headerlink" title="Armstrong 定律"></a>Armstrong 定律</h3><p>自反律、增补律、传递律=&gt;伪传递律、合并律、分解律。这些都很简单啦就枚举一下不展开说了，不会的回去翻老师PPT哦。通过这些定律能得到一个属性数量为n的R，它的闭包最多有2的n方乘2的n方个fd。</p><h3 id="属性的闭包"><a href="#属性的闭包" class="headerlink" title="属性的闭包"></a>属性的闭包</h3><p>上面说的是关于一个R,会有一些F存在（function），形成一些明显的fd，再加上推导出来的fd，就是一个F的闭包。同时也产生了属性的闭包的概念。比如属性a的闭包，就是所有a能（直接或者间接）决定的属性的集合。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200409154548135_glahnw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="8"></p><p>（更好的方法是画图）</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>检测superkey、用属性的闭包（好求）算F的闭包、推算fd</p><h3 id="正则覆盖canonical-cover"><a href="#正则覆盖canonical-cover" class="headerlink" title="正则覆盖canonical cover"></a>正则覆盖canonical cover</h3><p>通过删除一些fd得到 一个 能推导出闭包的最小集合。如何得到呢？从左边和右边分开来计算，看有没有用其他的fd可以推出来的，就删掉。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409155508487_oofdur.png" srcset="/silmont2000.github.io/img/loading.gif" alt="7"></p><h2 id="验证无损和依赖保持的栗子"><a href="#验证无损和依赖保持的栗子" class="headerlink" title="验证无损和依赖保持的栗子"></a>验证无损和依赖保持的栗子</h2><p>讲完了基础知识就来说一下如何判断分解的好坏。回到最开始，我们如何判断两个条件是否都被满足呢？</p><p>无损分解：如果R1∩R2是R1或R2的超码，则R上的分解（R1，R2）是无损分解。</p><p>保持依赖：如果F上的每一个函数依赖都在其分解后的某一个关系上成立，则这个分解是保持依赖的（这是一个充分条件）。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409160218086_zchk11.png" srcset="/silmont2000.github.io/img/loading.gif" alt="6"></p><h1 id="BC范式-Boyce-Codd-NF"><a href="#BC范式-Boyce-Codd-NF" class="headerlink" title="BC范式 Boyce-Codd NF"></a>BC范式 Boyce-Codd NF</h1><p>要求：在fd闭包里面的每一条fd，要么是平凡的（a-&gt;b,b是a的子集），要么a是R的superkey。</p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409165828817_feqelx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="5"></p><p>首先先判断给定的R、F是不是已经满足的BCNF（当然大部分不满足），然后以一个fd为依据（假设是A-&gt;BCD)，将R分解为R1(A,B,C,D以及其他直接或间接能被A决定的属性)，R2(A,E,F以及其他不能被决定的属性)，这时A是R1的key，相当于我们强行构造了满足superkey条件的R1，然后对R2进行相同的操作，直到全部满足。</p><p>这样解决了R的冗余，但<strong>不能保证</strong>分解的结果依赖保持。</p><h1 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式 3NF"></a>第三范式 3NF</h1><p>虽然BC范式使得冗余减少了，但因为过程中对依赖性的影响，很可能造成查询时的复杂。所以权衡一下我们可以允许一定程度上的冗余来使得检查的过程变得容易。这就引入了可以保持依赖保持的第三范式。第三范式的检验成本很高，但分解成本小，所以可以选择先对R进行分解，在过程中进行判断。</p><p>特点：同时满足：allow some redundancy来提供查找便利、dependency preserving、losseless join。</p><p>要求：要么满足BCNF（要么是平凡的（a-&gt;b,b是a的子集），要么a是R的superkey），要么在（a-&gt;b）中a是码或b是主属性。</p><h1 id="综合例题"><a href="#综合例题" class="headerlink" title="综合例题"></a>综合例题</h1><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409172455199_p5x0qg.png" srcset="/silmont2000.github.io/img/loading.gif" alt="4"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409172516650_g5webq.png" srcset="/silmont2000.github.io/img/loading.gif" alt="3"></p><p>注意：候选码可能有多个，要找全候选码。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409172613537_v0izw6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="2"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409172632880_udslmd.png" srcset="/silmont2000.github.io/img/loading.gif" alt="1"></p><h1 id="第四范式"><a href="#第四范式" class="headerlink" title="第四范式"></a>第四范式</h1><p>要求：在a-&gt;-&gt;b中，要么是平凡的，要么a就是R的码。（和BC一毛一样）</p><p>所以凡是满足4NF，一定满足BCNF</p><h2 id="多值独立性-Multivalued-Dependencies-MVD"><a href="#多值独立性-Multivalued-Dependencies-MVD" class="headerlink" title="多值独立性 Multivalued Dependencies  ( MVD )"></a>多值独立性 Multivalued Dependencies  ( MVD )</h2><p>一个课程对应多本课本、多本书，但书和老师之间是独立的，书不会因为不同的老师而改变的。但假如三者成为一个R，显然会有大量的冗余，但因为课程是一个superkey，又满足了BCNF。所以在实际生活中还是会出现一些使用以上NF不够的情况。类似的还如：员工-&gt;部门；员工-&gt;员工子女，但子女和部门之间独立。</p><h2 id="多值决定"><a href="#多值决定" class="headerlink" title="多值决定"></a>多值决定</h2><p>MVD意义上的平凡（trivial）：b属于a，且a并b是R全集。记为：a-&gt;-&gt;b is trivial。其中：-&gt;-&gt;是多值决定的意思。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409175237965_adaul6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="duozhhi"></p><p>（未完成，先更新上去。</p><p>看到66）</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
      <tag>E-R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Java写一个Excel读取处理器</title>
    <link href="/silmont2000.github.io/2020/03/31/%E7%94%A8Java%E5%86%99%E4%B8%80%E4%B8%AAExcel%E8%AF%BB%E5%8F%96%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/silmont2000.github.io/2020/03/31/%E7%94%A8Java%E5%86%99%E4%B8%80%E4%B8%AAExcel%E8%AF%BB%E5%8F%96%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="问题的开始"><a href="#问题的开始" class="headerlink" title="问题的开始"></a>问题的开始</h1><p>最近课程小组在做一个疫情模拟器，里面涉及到一些政策。最开始我只写了政策和对应的国家属性的变化，后来有需求加一些说明，在Excel上操作不太舒服，我想把第一列（也就是政策的名字）copy到一个文档里面然后修改。</p><p>后来想想文档+excel两边对比有点麻烦，干脆把里面的属性值也copy下来好了。最近正好在学java，所以打算用java来写。过程中的确遇到了一些问题，特此记录。</p><h1 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h1><h2 id="操作表格的API"><a href="#操作表格的API" class="headerlink" title="操作表格的API"></a>操作表格的API</h2><p>使用java的原因也有用C或C++读取表格比较麻烦，还需要计算字节数，容易出错。在java里可以使用Apache POI这个很受欢迎的API，不过我选的是jxl啦。</p><p>jxl.jar包里面包含很多表格读写函数。在IDEA中的添加顺序：</p><ol><li>直接拖到左侧项目目录；</li><li>File-&gt;Project Structure-&gt;Modules-&gt;+-&gt;选择jar-&gt;export，apply，ok</li></ol><p>好处是这套API是纯Java的，并不依赖Windows系统，即使运行在Linux下，它同样能够正确的处理Excel文件（ 复 制 黏 贴 哈 哈 哈 哈 哈 ），不好的是不支持xlsx，只支持低版本xls。</p><p><strong>用到的</strong>函数详解：</p><p><a href="http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Sheet.html" target="_blank" rel="noopener">http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Sheet.html</a></p><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><h4 id="新建表格"><a href="#新建表格" class="headerlink" title="新建表格"></a>新建表格</h4><p>File里面写路径，也可以接收一个字符串值，如函数接收路径参数为String path，可以写成：</p><pre><code class="java">WritableWorkbook workbook=Workbook.createWorkbook(new File(path));</code></pre><p>当然也可以提取出来参数写成：</p><pre><code class="java">File tempFile=new File(path);WritableWorkbook workbook=Workbook.createWorkbook(tempFile);</code></pre><h4 id="新建sheet"><a href="#新建sheet" class="headerlink" title="新建sheet"></a>新建sheet</h4><p>一个是sheet名称参数，一个是在表中的位置，第一个sheet记为0。</p><pre><code class="java">WritableSheet sheet=workbook.createSheet(&quot;sheet1&quot;, 0);</code></pre><h4 id="新建单元格内容"><a href="#新建单元格内容" class="headerlink" title="新建单元格内容"></a>新建单元格内容</h4><p>jxl更新单元格通过sheet变量调用addCell函数实现，它的参数是一个Label类的变量。label可以认为是一个桥梁，因为它本身有很多种类型（比如数字、日期等等）。看一个例子：</p><pre><code class="java">Label label = new Lable(1, 0, &quot;hello&quot;,getDataCellFormat(CellType.STRING_FORMULA))sheet1.addCell(label);//示例：添加表头String title[] = new String[column + cho];        title[0] = &quot;id&quot;;        title[1] = &quot;name&quot;;        title[2] = &quot;explain&quot;;        // value        for (int k = 1; k &lt; column + 1; k++) {            title[k + cho - 1] = &quot;value&quot; + k;        }        Label label = null;        for (int i = 0; i &lt; title.length; i++) {            label = new Label(i, 0, title[i]);            sheet.addCell(label);        }// 结果：第一行是id name explain value1 value2 value3...</code></pre><p>注意，label中先写列（column）的序号再写行（row）的序号，然后是表格内容，接着是类型（可以不写）。类型的表达方式：数字：getDataCellFormat(CellType.NUMBER)；字符串：getDataCellFormat(CellType.STRING_FORMULA)；日期：getDataCellFormat(CellType.DATE)；日期可能需要配合new date()使用。</p><p>最后需要加上：</p><pre><code class="java">workbook.write();workbook.close();</code></pre><p>来完成对表格的更新和关闭。</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><pre><code class="java">Workbook wb=Workbook.getWorkbook(new File(&quot;e:\\test2.xls&quot;));Sheet sheet=wb.getSheet(0);</code></pre><p>这样就获取了对应表格和对应的sheet编号。</p><p>以string形式获取单元格内容：</p><pre><code class="java">String cell_info = sheet.getCell(0, i).getContents();</code></pre><p>仍然遵循先写column再写row的方式（有一说一我真的好不习惯），getcell本身返回的是一个Cell类型的值，这个cell对象再进行getContents。（关于cell：<a href="http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Cell.html）而且getContents这个函数返回的就是String类型。" target="_blank" rel="noopener">http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Cell.html）而且getContents这个函数返回的就是String类型。</a></p><p>好啦这些基本够用啦！</p><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>已经碰到无数次中文乱码了……..现在的解决思路就是：检查整个流程有没有忘记某一步改成UTF-8。问题出现是我从txt文档读取一行字,储存到arraylist:</p><pre><code class="java">try {            File file;            file = new File(name);            InputStreamReader input = new InputStreamReader(new FileInputStream(file));            BufferedReader bf = new BufferedReader(input);            // 按行读取字符串            String str;            while ((str = bf.readLine()) != null) {                arrayList.add(str);//todo  此处似乎无法过滤win下的BOM标志            }            bf.close();            input.close();//            System.out.println(&quot;hello&quot;);// self check        } catch (IOException e) {            e.printStackTrace();        }</code></pre><p>在输出、debug都是没有问题的，都是正常的中文（因为IDE也是UTF-8问题不大），但在我下面用list的内容时出现了报错（实际上报错内容是下面的步骤写错了），我发现报错信息“传入了&amp;%%@#@&amp;*#……%”（总之是一堆不认识的东西），检查了一遍发现我的txt忘记改成utf8了。</p><p>第二次发现是在做equal比较的时候，两个都是“卫生”，怎么都不相等，发现.equal()括号里面传入的“卫生”在后台是乱码</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585712472/image-20200401111038444_jonrxl.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401111038444"></p><p>用以下形式强制转换一下：</p><pre><code class="java">s.equals((new String(&quot;卫生&quot;.getBytes(&quot;原来的编码&quot;), &quot;UTF-8&quot;)))</code></pre><h2 id="java的相等"><a href="#java的相等" class="headerlink" title="java的相等"></a>java的相等</h2><p>因为C++写顺手了嘛，理所当然的认为判断相等用==。殊不知在java中String A == String B判断的是二者的地址是否想等（说着打开了eclipse，小东西还是eclipse测试一下）。</p><pre><code class="java">public class Test40013 {    public static void main(String args[]) {        // 第一组        String A = &quot;hello&quot;;        String B = &quot;hello&quot;;        String C = A;        System.out.println(A == B);        System.out.println(A == C);        System.out.println((A == &quot;hello&quot;)+&quot;\n第二组：&quot;);        //第二组        String D = new String(&quot;hello&quot;);        System.out.println(D == B);        System.out.println(D == C);        System.out.println(D == &quot;hello&quot;);    }}</code></pre><p>结果第一组输出均为true，第二组均为false。解释：</p><p>String str1=”hello” ：</p><p>如果”ABC”这个字符串在常量池（Java String 池）里不存在，会在池里面先创建这个一个String对象，然后确定str1（编译期已经创建好）.如果已经存在，str1直接指向这个String池里的对象。所以在第一组里面，C和B、A的地址是一样的。</p><p>String str2 = new String(“hello”) ：</p><p>在堆里面创建一个 str2 的String 对象，它的value 是 “hello”，然后把指针赋给栈，将新构造出来的String对象的引用赋给str。 因此 只要是new String()，则，栈中的地址都是指向最新的new出来的堆中的地址。同时也会检测常量池里面有没有string，没有的话就新建一个。</p><p>这里<a href="https://www.cnblogs.com/aspirant/p/9193112.html讲的非常详细，搬运一下：" target="_blank" rel="noopener">https://www.cnblogs.com/aspirant/p/9193112.html讲的非常详细，搬运一下：</a></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585710276/image-20200401110315053_lwr7lx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401110315053"></p><ol><li>首先，通过main（）方法进栈。</li><li>然后再栈中定义一个对象s1,去堆中开辟一个内存空间，将内存空间的引用赋值给s1，“hello”是常量，然后去字符串常量池 查看是否有hello字符串对象，没有的话分配一个空间存放hello，并且将其空间地址存入堆中new出来的空间中。</li><li>在栈中定义一个对象s2，然后去字符串常量池中查看是否有”hello”字符串对象，有，直接把”hello”的地址赋值给s2.</li><li>即s1中存的是堆中分配的空间，堆中分配的空间中存的是字符串常量池中分配空间存放”hello”的空间的地址值。而s2中之间存的是字符串常量池中分配空间存放”hello”的空间的地址值。</li><li>由于s1与s2中存放的地址不同，所以输出false。因为，类String重写了equals()方法，它比较的是引用类型的 的值是否相等，所以输出true。即结果为false、true。</li></ol><p>特别是：</p><pre><code class="java">String a = &quot;ABC&quot;;String b=&quot;AB&quot;;String c=b+&quot;C&quot;;// 因为b是个引用System.out.println(a==c); false</code></pre><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>位元組順序記號（英語：byte-order mark，<em>BOM</em>）是位於碼點 U+FEFF 的統一碼字符的名称。</p><p>—维基百科</p><p>上面两个问题都解决完了，但我在得到“卫生”和“卫生”的路上又遇到了新的障碍。那就是即使更改了编码方式、用了equal之后还是不能得到true，于是我去求助男朋友，他发现了这个：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585712488/image-20200401111110229_v7fpxx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401111110229"></p><p>在0的位置上出现了奇怪的字符，查了一下发现是BOM字符。因为时间紧迫急着出程序，暴力手动删除了一下, 效果不错，有时间在改（我将 永远没有时间/狗头）：</p><pre><code class="java">if (s.startsWith(&quot;\uFEFF&quot;)) {//todo 手动处理改为BOMInputStream处理                s = s.replace(&quot;\uFEFF&quot;, &quot;&quot;);            }</code></pre><h2 id="正则表达式和replace-all"><a href="#正则表达式和replace-all" class="headerlink" title="正则表达式和replace all"></a>正则表达式和replace all</h2><p>读txt时有一部分的格式是：</p><pre><code class="java">经济：-20 舆论：20 国防： 指数：0.85 教育： 信念：-5 生活：-5 精神：</code></pre><p>但读入表格的时候不需要文字，只需要[-20,20,0,0.85,0,-5,-5,0]的格式。最开始我想到先把他们分割，Java的String支持正则表达式，<code>\s</code>表示匹配任何空白字符，<code>+</code>表示匹配一次或多次。空格字符就比如回车、制表、好几个空格什么的。那正好我这里每一项之间都有一个空格，于是读取txt的时候这样分割，储存到a里面；</p><pre><code class="java">String a[] = s.split(&quot; &quot;);</code></pre><p>然后写入表格时忽略中文及冒号：</p><pre><code class="java">label = new Label(j + cho, i, array[i - 1][j + cho - 1].replaceAll(&quot;[\u4e00-\u9fa5\\uFF1A]&quot;, &quot;&quot;));</code></pre><p>从表格输出时，把空项变成0：</p><pre><code class="java">for (int j = 3; j &lt; sheet.getColumns(); j++) {    cell_info = sheet.getCell(j, i).getContents().replace(&quot;&quot;, &quot;0&quot;);             System.out.print(cell_info + &quot;,&quot;);}</code></pre><p>是不是看着一点毛病没有！！！！！！！！</p><p>但是输出却是：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585712476/image-20200401113416767_krd9qd.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401113416767"></p><p>换句话说-200变成了0<strong>-</strong>0<strong>2</strong>0<strong>0</strong>0，隔位插零，说起来也有点奇妙，我以为是只有空项才会被变成0.没想到啊没想到。所以修改成了下面这样：</p><pre><code class="java">if (cell_info.equals(&quot;&quot;)) cell_info = &quot;0&quot;;</code></pre><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>记录一下下：</p><p>要求是：记事本里面的政策输出成表格，并且编号。编号形式：type+order，如卫生的type记为1，在卫生大类下第99条记为10099。</p><p>先写入表格，再导出如下格式：</p><pre><code class="python">//        格式参考[{    id: 200001,    name:&quot;央行减息&quot;,    description:&quot;经历一段时间的经济低迷，银行存款利率下调，对经济略有负面影响。&quot;,    result: [-5, -5, 0, 0, 0, -5, 0, 0]},]</code></pre><p>readtxt.java: 读取txt文件并写入中间表</p><pre><code class="java">import java.io.*;import java.util.ArrayList;import java.util.Scanner;import jxl.*;import jxl.write.Label;import jxl.write.WritableSheet;import jxl.write.WritableWorkbook;import javax.swing.*;public class read_txt {    public static final int column = 7;// 属性总数    public static final int cho = 3;// 选项名、详情、id    public static int[] order = new int[column + 1];// 每项政策的下标 为了方便从order[1]开始用    public static int line = 3;// 每条政策在txt中占据的行数    public static int index_on_array = 0;// 储存在array中，为避免空行或type判断导致的浪费    public static String[][] toArrayByInputStreamReader2(String name) throws UnsupportedEncodingException {        for (int i = 1; i &lt; column + 1; i++) {// 初始化order均为1            order[i] = 1;        }        // 使用ArrayList来存储每行读取到的字符串        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;&gt;();        try {            File file;            file = new File(name);            InputStreamReader input = new InputStreamReader(new FileInputStream(file));            BufferedReader bf = new BufferedReader(input);            // 按行读取字符串            String str;            while ((str = bf.readLine()) != null) {                arrayList.add(str);//todo  此处似乎无法过滤win下的BOM标志            }            bf.close();            input.close();//            System.out.println(&quot;hello&quot;);// self check        } catch (IOException e) {            e.printStackTrace();        }        // 对ArrayList中存储的字符串进行处理        int length = arrayList.size();//todo 有大量空余,可以优化        int width = column + cho;// 表格的宽度        String array[][] = new String[length][width];        int type = 0;        // 读取并判断        for (int i = 0; i &lt; length; i++) {            String s = arrayList.get(i);            if (s.startsWith(&quot;\uFEFF&quot;)) {//todo 手动处理改为BOMInputStream处理                s = s.replace(&quot;\uFEFF&quot;, &quot;&quot;);            } else if (s.equals(&quot;&quot;)) { // 跳过空行 否则下面的处理报错                continue;            }            // 调整type值            // todo 需要手动改，不要改动编码            if (s.equals((new String(&quot;卫生&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 1;            } else if (s.equals((new String(&quot;经济&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 2;            } else if (s.equals((new String(&quot;公共&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 3;            } else if (s.equals((new String(&quot;文化&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 4;            }            // 内容写入            else {                // type                int tmp_order = type * 10000 + (order[type]++);                array[index_on_array][0] = String.valueOf(tmp_order);                // name                array[index_on_array][1] = s;                // value                s = arrayList.get(++i);// 读下一行                String a[] = s.split(&quot; &quot;);// 以空格分割                for (int j = 2; j &lt; column + 2; j++) {                    array[index_on_array][j] = a[j - 2];// 注意j-2                }                // explain                s = arrayList.get(++i);// 读下一行//                if (s.startsWith(&quot;\uFEFF&quot;)) {//                    s = s.replace(&quot;\uFEFF&quot;, &quot;&quot;);//                }                array[index_on_array][width - 1] = s;                // output                // 对表输出//                for (int m = 0; m &lt; length; m++) {//                    for (int k = 0; k &lt; width; k++) {//                        if (array[m][k] != null)//                            System.out.print(array[m][k] + &quot; &quot;);//                    }//                    System.out.println();//todo 严重问题 换行需要判断//                }                // 如果一条一条输出则请注释此处，完整输出则无需注释,但要生成表格不能注释                index_on_array++;            }        }        return array;    }    public static void write_to_xls(String array[][]) throws Exception {        //创建Excel文件        File file = new File(&quot;C:\\Users\\Administrator\\desktop\\中间表.xls&quot;);        //创建文件        file.createNewFile();        //创建工作薄        WritableWorkbook workbook = Workbook.createWorkbook(file);        //创建sheet        WritableSheet sheet = workbook.createSheet(&quot;国家政策&quot;, 0);        //添加数据//        String title[] = {&quot;id&quot;, &quot;name&quot;,  &quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;, &quot;value4&quot;, &quot;value5&quot;, &quot;value6&quot;, &quot;value7&quot;, &quot;value8&quot;,&quot;explain&quot;};        String title[] = new String[column + cho];        title[0] = &quot;id&quot;;        title[1] = &quot;name&quot;;        title[2] = &quot;explain&quot;;        // value        for (int k = 1; k &lt; column + 1; k++) {            title[k + cho - 1] = &quot;value&quot; + k;        }        Label label = null;        for (int i = 0; i &lt; title.length; i++) {            label = new Label(i, 0, title[i]);            sheet.addCell(label);        }        // 追加数据        for (int i = 1; i &lt; array.length + 1; i++) {            //id            label = new Label(0, i, array[i - 1][0]);            sheet.addCell(label);            //name            label = new Label(1, i, array[i - 1][1]);            sheet.addCell(label);            //explain            label = new Label(2, i, array[i - 1][cho + column - 1]);            sheet.addCell(label);            //vaue            for (int j = 0; j &lt; column; j++) {                if (array[i - 1][j + cho] != null) {                    label = new Label(j + cho, i, array[i - 1][j + cho - 1].replaceAll(&quot;[\u4e00-\u9fa5\\uFF1A]&quot;, &quot;&quot;));                    String s_label = &quot;&quot; + label;                    sheet.addCell(label);                }            }        }        workbook.write();        workbook.close();    }    public static void main(String[] args) throws Exception {//        System.out.println(&quot;path：&quot;);//        Scanner in = new Scanner(System.in);//        String path = in.nextLine();//        String policy[][] = toArrayByInputStreamReader2(path);//        write_to_xls(policy);        for_xls.main();    }}</code></pre><p>read_output_xls,java 读表+输出python结构体</p><pre><code class="java">import jxl.Cell;import jxl.CellType;import jxl.Sheet;import jxl.Workbook;import jxl.read.biff.BiffException;import java.io.*;public class read_output_xls {    public static void readColumn(File file, int index) throws Exception {        Sheet sheet;        Workbook book;//        格式参考//        [//        {//                id: 200001,//                name:&quot;央行减息&quot;,//                description:&quot;经历一段时间的经济低迷，银行存款利率下调，对经济略有负面影响。&quot;,//                result: [-5, -5, 0, 0, 0, -5, 0, 0]//        },//        ]        try {            book = Workbook.getWorkbook(new File(String.valueOf(file)));            //工作表对象            sheet = book.getSheet(0);            System.out.println(&quot;[&quot;);            for (int i = 1; i &lt; sheet.getRows(); i++) {                String cell_info = sheet.getCell(0, i).getContents();                if (cell_info.equals(&quot;&quot;)) break;                System.out.print(&quot;{&quot; + &quot;\n&quot; + &quot;id:&quot;);                System.out.print(cell_info + &quot;,\nname:\&quot;&quot;);                cell_info = sheet.getCell(1, i).getContents();                System.out.print(cell_info + &quot;\&quot;,\ndescription:\&quot;&quot;);                cell_info = sheet.getCell(2, i).getContents();                System.out.print(cell_info + &quot;\&quot;,\nresult:[&quot;);                for (int j = 3; j &lt; sheet.getColumns(); j++) {                    cell_info = sheet.getCell(j, i).getContents();// blog                    if (cell_info.equals(&quot;&quot;)) cell_info = &quot;0&quot;;//                    cell_info = sheet.getCell(j, i).getContents().replace(&quot;&quot;, &quot;0&quot;);                    System.out.print(cell_info);                    if (j != sheet.getColumns() - 1)                        System.out.print(&quot;,&quot;);                }                System.out.println(&quot;]\n}&quot;);            }            System.out.println(&quot;]&quot;);        } catch (FileNotFoundException e) {            e.printStackTrace();        }    }}</code></pre><p>for_xls.java</p><pre><code class="java">import java.io.File;//import static readExcel.readColumn;public class for_xls {    public static void main() {        File file = new File(&quot;C:\\Users\\Administrator\\desktop\\中间表.xls&quot;);        try {            System.out.println(&quot;正在读取...&quot;);            read_output_xls.readColumn(file, 1);            System.out.println(&quot;读取完毕&quot;);        } catch (Exception e) {            e.printStackTrace();        }    }}</code></pre>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql和DataGrip配置过程中的两个小问题</title>
    <link href="/silmont2000.github.io/2020/03/28/mysql%E5%92%8CDataGrip%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/silmont2000.github.io/2020/03/28/mysql%E5%92%8CDataGrip%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql下载与配置"><a href="#mysql下载与配置" class="headerlink" title="mysql下载与配置"></a>mysql下载与配置</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>下载社区版，进入推荐下载，会有两个版本：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585657445/image-20200328195329462_hc7gtw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200328195329462"></p><p>这里面看msi的命名可以看出下面这个有个web，意思是在线安装包。二者区别不大，在线安装是用官方的下载器，运行下载器后下载安装包并自动安装，网络通畅的情况下ok；离线的话手动安装。</p><p>一路next下面，到Choosing a Setup Type的时候选择custom，然后进入Select Products and Features，选择MySQL Servers下面的第三级目录，选择一个32位或64位的server即可。输入密码的时候要记好自己的密码。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>后来发生了神奇的事情，我的mysql仅在下载当天第一次通过密码登陆成功，之后mysql的窗口输入密码后回车闪退。于是开始尝试网上的方法：</p><h3 id="mysql服务未开启"><a href="#mysql服务未开启" class="headerlink" title="mysql服务未开启"></a>mysql服务未开启</h3><p>打开“服务”窗口，找到mysq80，双击打开看是否开启，的确没开启然后手动开启的时候出现如下提示：（因为是我已经修复啦只是一个截图，所以不是mysql80）</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585657445/image-20200328202123309_h5lmxe.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200328202123309"></p><p>我心想：嗯？难道我应该打开mysql窗口？重复了一下又失败了。这时我发现：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585657445/image-20200328202303552_zmedop.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200328202303552"></p><p>？</p><p>为什么我有三个</p><p>于是我试着把正在运行的这个给关掉，再打开正经的mysql80：</p><p>成功了</p><p>。</p><p>然后这时候再启动其他的服务，也没什么问题了qwq</p><h1 id="DataGrip"><a href="#DataGrip" class="headerlink" title="DataGrip"></a>DataGrip</h1><p>JetBrains， nb！</p><p>然后配置的时候出了很多问题。。。。总结下来比较方便的是：</p><p>新建项目，然后按第一个快捷键，点左上角小加号添加数据库；注意severtimezone改成“Asia/Shanghai”，这样测试的时候就可以通过啦qwq</p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>DataGrip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: nested subqueries, complex queries and examples</title>
    <link href="/silmont2000.github.io/2020/03/18/Database-System-nested-subqueries-and-examples/"/>
    <url>/silmont2000.github.io/2020/03/18/Database-System-nested-subqueries-and-examples/</url>
    
    <content type="html"><![CDATA[<h1 id="views"><a href="#views" class="headerlink" title="views"></a>views</h1><p>好处：因为展示的属性比较少，所以更安全/容易使用</p><pre><code class="mysql">create view &lt;name&gt; as    select c1,c2....from...;create view &lt;name&gt; as(d1,d2...) -- 列重命名    select c1...from...</code></pre><p>还是拿之前的照秋学期春学期开课的题目做例子：</p><pre><code class="mysql">create view physics_fall_2009 as -- 建立一个09年秋季物理系开课情况表select course.course_id,sec_id,building,room_numberfrom course, sectionwhere course.course_id = section.course_id        and course.dept_name = &#39;Physics&#39;        and section.semester = &#39;fall&#39;        and section.year = &#39;2009&#39;;select course_id                -- 按照正常的表格使用from physics_fall_2009where building = &#39;waston&#39;;</code></pre><h1 id="complex-queries"><a href="#complex-queries" class="headerlink" title="complex queries"></a>complex queries</h1><h2 id="derived-relations-导出关系创建局部视图"><a href="#derived-relations-导出关系创建局部视图" class="headerlink" title="derived relations 导出关系创建局部视图"></a>derived relations 导出关系创建局部视图</h2><p>e.g. 找出那些平均工资高于42000美元的学院。</p><pre><code class="mysql">select dept_name, avg_salary            -- 3所求（结合内部）from(select dept_name, avg(salary)        -- 1先按学院计算平均工资    from instructor    group by dept_name)    as dept_avg(dept_name, avg_salary)    -- 2导出为表格dept_avg    -- 把子查询导出为一个relation，因为from后面应该加一个relation namewhere avg_salary &gt; 4200;</code></pre><p>from … as …  将内部 select 语句导出为一个<strong>局部视图</strong>，仅在执行时产生，执行结束就没有了，而 create view 是全局视图</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="with-clause-创建局部视图"><a href="#with-clause-创建局部视图" class="headerlink" title="with clause 创建局部视图"></a>with clause 创建局部视图</h2><pre><code class="mysql">with max_budget(value) as             -- 局部视图m_b，只有一个属性viewselect max(budget)from departmentselect budget                        -- 匹配最有钱的部门from department, max_budgetwhere department.budegt = max_budget.value;</code></pre><p>在这里 with 也产生一个临时视图，语句结束就消失。也可以同时创建多个：</p><p>e.g. 找出支出工资平均大于总体平均值的系</p><pre><code class="mysql">with     dept_total(dept_name, value) as        -- 建立分类表格    (select dept_name, avg(salary)    from instructor    group by dept_name)    dept_total_avg(value) as            -- 求总体平均值    (select avg(value)    from dept_total)select dept_name                        -- 比较，from要同时加入两个relationfrom dept_total A, dept_total_avg Bwhere A.value &gt; B.value;</code></pre><h1 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h1><h2 id="嵌套例题"><a href="#嵌套例题" class="headerlink" title="嵌套例题"></a>嵌套例题</h2><p>概念：select语句中套着另一个select语句。</p><ol><li><h3 id="同时在09年秋季和10年春季开课的课程"><a href="#同时在09年秋季和10年春季开课的课程" class="headerlink" title="同时在09年秋季和10年春季开课的课程"></a>同时在09年秋季和10年春季开课的课程</h3></li></ol><pre><code class="mysql">select distinct course_idfrom sectionwhere semester=&#39;fall&#39; and year = 2009 and    course_id in (    select course_id    from section    where semester=&#39;spring&#39; and year = 2010);</code></pre><p>这里有一个 <strong>in</strong> 关键词，用来做一个check。相对的就是not in， 没有出现。</p><ol start="2"><li><h3 id="上过10101老师上过的课-注意必须去重"><a href="#上过10101老师上过的课-注意必须去重" class="headerlink" title="上过10101老师上过的课: 注意必须去重"></a>上过10101老师上过的课: 注意必须去重</h3></li></ol><pre><code class="mysql">select count(distinct id)from takeswhere (course_id, sec_id, semester, year)    in(    select course_id, sec_id, semester, year    from teaches    where instructor_id = 10101);</code></pre><ol start="3"><li><h3 id="找出每个银行中最大存款的账户"><a href="#找出每个银行中最大存款的账户" class="headerlink" title="找出每个银行中最大存款的账户"></a>找出每个银行中最大存款的账户</h3></li></ol><pre><code class="mysql">select account_num AN, balance from account Awhere balance &gt;=(select max(balance) from account B where A.branch_name = B.branch_name)order by balance;</code></pre><p>解释：内层的语句和外层不独立，先从内层账户中提取一个max值，条件就是和我当前检查的账户在同一个支行，然后再次比较当前账户的balance和max值进行比较，计算量相当可观。</p><ol start="4"><li><h3 id="输出比至少一个生物系老师工资高的老师"><a href="#输出比至少一个生物系老师工资高的老师" class="headerlink" title="输出比至少一个生物系老师工资高的老师"></a>输出比至少一个生物系老师工资高的老师</h3></li></ol><pre><code class="mysql">select distince T.namefrom instructor T,instructor Swhere T.salary&gt;S.salary and S.dept_name = &quot;BIO&quot;;</code></pre><pre><code class="mysql">select name from instructorwhere salary &gt; some     (select salary     from instructor     where dept_name = &quot;BIO&quot;);</code></pre><p>这里引入some和all，可以用于where中的比较。<strong>= some 即 in， 但 ≠some 不意味着 not in。</strong>返回T/F。</p><ol start="4"><li><h3 id="找出上了生物系所有课程的学生"><a href="#找出上了生物系所有课程的学生" class="headerlink" title="找出上了生物系所有课程的学生"></a>找出上了生物系所有课程的学生</h3></li></ol><pre><code class="mysql">select distinct S.id, S.namefrom student as S                 -- 检索所有学生where not exists((                -- 检查生物系所有课-S选的所有课是否是空集                               -- 是的话就输出    select course_id            -- 列出生物系所有课程id    from course    where dept_name = &quot;BIO&quot;)    except(    select T.student_id            -- 列出S选出的所有课    from takes as T    where S.id = T.id));</code></pre><p>exist： 不是空集， not exists 是空集，返回T/F。</p><p>类似的有unique，not unique，判断是否有重复，返回T,F。</p><h2 id="运用例题"><a href="#运用例题" class="headerlink" title="运用例题"></a>运用例题</h2><ol><li>找出上了十门课以上的学生； <em>enroll: 选课表</em></li></ol><pre><code class="mysql">select sno from enrollgroup by snohaving count(distinct cno) &gt; 10;</code></pre><ol start="2"><li><p>找出这些学生的名字：涉及两个表</p><p>不管是否被引用，导出表 (或称<strong>嵌套表</strong>) 必须给出别名</p><p>Student(sno, sname, ssex, sage, sdept)</p><p>Enroll(sno, cno, score)</p><p>Course(cno, cname, credits, pcourse)</p></li></ol><pre><code class="mysql">select TT.sno, sname, c_numfrom    (select sno, count(cno) as c_num    -- 分组求选课总数    from enroll    group by sno)as TT, student S                        -- 笛卡尔积 连接两个表where TT.sno = S.sno and c_num &gt; 10;        -- 筛选</code></pre>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: basic statements</title>
    <link href="/silmont2000.github.io/2020/03/13/Database-System-basic-statements/"/>
    <url>/silmont2000.github.io/2020/03/13/Database-System-basic-statements/</url>
    
    <content type="html"><![CDATA[<h1 id="What‘s-SQL"><a href="#What‘s-SQL" class="headerlink" title="What‘s  SQL"></a>What‘s  SQL</h1><p>结构化查询语言，structured query language，called ”SEQUEL“. It can define the structure of the data, modify data in the database, and specify security constraints. </p><p>There are four SQL conformance levels: entry level, transitional,  intermediate and full. But currently no DBMS products achieve Full SQL level.</p><p>including:</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>data_definition language. DDL is used to operate the <strong>table</strong>.</p><ul><li>create table; alter(修改) table; drop table——integrity</li><li>create index; drop index</li><li>create view; drop view</li><li>create trigger; drop trigger</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="*DML"></a>*DML</h2><p>data_manipulation language. The SQL DML provides the ability to <strong>query</strong> information from the database and to <strong>insert</strong> tuples into, <strong>delete</strong> tuples from, and <strong>modify</strong> tuples in the database.</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>data_control language.</p><h1 id="data-definition"><a href="#data-definition" class="headerlink" title="data definition"></a>data definition</h1><h2 id="basic-types"><a href="#basic-types" class="headerlink" title="basic types"></a>basic types</h2><ul><li>char(<em>n</em>): A fixed-length character string with user-specified length n. if store “hello” in char(7), <strong>two more spaces</strong> will be appended. when comparing two values of type char,if they are of different lengths, <strong>extra spaces</strong> are automatically added to the shorter one to make them the same size, before comparison. </li><li>varchar(<em>n</em>):  (<strong>recommended</strong>) A variable-length character string with user-specified maximum length n. so if “hello” is stored in varchar(7), <strong>no more spaces</strong> will be appended.</li><li>int</li><li>smallint: Kind of like a short int. Its size depends on the machine.</li><li>numeric(<em>p,d</em>): the allowed format is (p<strong>-d</strong> digits. d digits). e.g. numeric(4,2) allows 22.22, but neither 222.2 or 2.222.</li><li>real, double: real is kind of like float. and double is double.</li><li>float(<em>n</em>): A floating_point number, with precision of <strong>at least</strong> n digits.</li><li>date: containing a 4-digit-year, month and date. e.g. date ‘2000-2-17’</li><li>time: ‘08:15:30’ or ‘08:15:30.75’</li><li>timestamp: date + time. timestamp ‘2000-2-17 08:15:30.75’</li></ul><h2 id="basic-schema-definition-amp-basic-structure-of-select"><a href="#basic-schema-definition-amp-basic-structure-of-select" class="headerlink" title="basic schema definition &amp; basic structure of select"></a>basic schema definition &amp; basic structure of select</h2><h3 id="create-a-table"><a href="#create-a-table" class="headerlink" title="create a table"></a>create a table</h3><pre><code class="mysql">create table department            -- name of the table    (dept_name varchar(20) NOT NULL,     -- name of the attribute; domain of the attribute    building varchar(15),    budget numeric(12,2),    primary key(dept_name)        -- &lt;integrity_constraint&gt;     -- more than one primary keys are allowed    foreign key(dept_name) references department);    </code></pre><p>SQL supports a number of different integrity constraints. For example: <strong>primary key, foreign key references</strong> <em>s</em>, <strong>not null</strong>. Without a ban, every attribute can be null. As for primary key, the following writing is also equivalent:</p><pre><code class="sql">create table department                (primary key,     dept_name varchar(20) NOT NULL,   ...);    </code></pre><p>And if a check is necessary, we write:</p><pre><code class="mysql">create table instructor(ID char(5),primary key,            -- mark the folowing line is the primary keyname varchar(20),dept_name varchar(20),salary numeric(8,2),check(salary&gt;=0));        -- add some conditions</code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>And the relation is empty initially. We write as below to insert a tuple; The values are specified in the order in which the corresponding attributes are listed i<strong>n the relation schema</strong>. </p><pre><code class="sql">insert into instructor    values (null, &quot;Silmont&quot;, &quot;digital media&quot;, 66000);</code></pre><p>But what if I forgot the order?</p><pre><code class="mysql">insert into instructor(name, dept_name, salary, ID)-- specify the order    values(&quot;Silmont&quot;, &quot;digital media&quot;, 66000, null);    -- or：    -- select e1, e2, ... from ...;</code></pre><h3 id="select"><a href="#select" class="headerlink" title="*select"></a>*select</h3><h4 id="queries-on-single-relation"><a href="#queries-on-single-relation" class="headerlink" title="queries on single relation"></a>queries on single relation</h4><p>The <strong>select</strong> clause is used to list the attributes desired in the result of a query. The <strong>from</strong> clause is a list of the relations to be accessed in the evaluation of the query.  The simplest statement is:</p><pre><code class="sql">select namefrom instructor;</code></pre><p>Ending with a semicolon, the statement means take out all the <em>names</em> of the relation <em>instructor</em>, the result will have a heading “<strong><em>name</em></strong>“. But if we do the same thing to find dept_name, lots of duplication will happen because <strong>more than one</strong> employee works in this department. The solution is:</p><pre><code class="sql">select distinct dept_namefrom instructor;</code></pre><p>With <strong>distinct</strong>, we force the elimination(淘汰) of duplicates ( <strong>exactly</strong> the same results) . On the contrary, select all is used to emphasize that duplicates should not be removed. And <strong>all is the default.</strong></p><p>The select clause may also contain arithmetic expressions involving the operators +, − , ∗,a n d / operating on constants or attributes of tuples, while not result in any change to relation. For example:</p><pre><code class="mysql">select ID, name, salary * 1.1from instructor;</code></pre><p>While in life, sometimes only those who contribute more can get a rise. So we need to specifies the condition, like:</p><pre><code class="mysql">select ID, name, salary * 1.1from instructorwhere salary &gt;=10 000 and dept_name = &#39;Comp.Sci&#39;;</code></pre><p>The <strong>where</strong> clause is a predicate involving attributes of the relation in the <strong>from</strong> clause, if omitted, the predicate is <strong>true</strong>. Some other symbols has the same status as ‘&gt;’: <strong>&lt;, =,</strong> <strong>between</strong> num1 <strong>and</strong> num2, <strong>not</strong> <strong>between</strong>; <strong>NOT</strong> and <strong>OR</strong> are used widely, too.</p><pre><code class="mysql">where (instructor.ID, dept_name) = (teaches.ID, &#39;bio&#39;)；</code></pre><p>The statement above is also legal.</p><h4 id="queries-on-multiple-relations"><a href="#queries-on-multiple-relations" class="headerlink" title="queries on multiple relations"></a>queries on multiple relations</h4><p>To solve the problem that more than one relation are involved to get a result, we need to <strong>select</strong> from a unioned-relation. For example, “Retrieve the names of all instructors, along with their department names and department building name”,  the operations are related to the relation <em>instructor</em>, <em>department</em>.</p><pre><code class="mysql">select name, instructor.dept_name, buildingfrom instructor, departmentwhere instructor.dept_name = department.dept_name;orfrom instructor natural join teaches;</code></pre><p>First, the relation name are used <strong>necessarily</strong> as a prefix to make <em>dept_name</em> clear. Second, list the relations that need to be accessed in the <strong>from</strong> clause(Cartesian Product), and specify the matching condition in the <strong>where</strong> clause. The example above is a natural union.</p><p>In the previous article, I mentioned that when finding the <em>most</em>, making a Cartesian product with the relation itself is feasible. But they will have the same prefix, so renaming is put forward:</p><pre><code class="mysql">select name as instructor_name, course_IDfrom instructor as I, teaches as Twhere I.ID = T.ID;select distinct namefrom instructor as I, instructor as Twhere I.salary &lt; T.salary and T.dept_name = &quot;Comp.Sci&quot;;</code></pre><p>‘AS’ is optional. It rename the result of column A as B, so you can also write count(name) as name_num. </p><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><pre><code class="mysql">drop table instructor; -- delete all information</code></pre><p>delete everything about instructor, including the relation itself.</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p><strong>delete</strong> retains relation <em>instructor</em>, but deletes all tuples in <em>instructor</em>. </p><p>e.g. 删除金融系的所有教师信息</p><pre><code class="mysql">delete from instructorwhere dept_name = &#39;Finace&#39;;</code></pre><p>删除 Needham 市所有支行的所有存款信息，并删除存款人中的相关信息</p><pre><code class="mysql">delete from accountwhere branch_name in    (select branch_name                 -- 先找到要删哪些支行    from branch    where branch_city = &#39;Needham&#39;);delete from depositerwhere account_number in    (select account_number    from branch B, branch A    where branch_city = &#39;Needham&#39; and B.branch_name = A.branch_name)</code></pre><p>删除所有工资水平低于平均水平的老师</p><pre><code class="mysql">delete from instructorwhere salary &lt;    (select avg(salary)    from instructor);                -- 虽然是数和avg返回集合的比较  但因为集合是单元素集合 所以ok    -- 另外 这里不必考虑删除元组造成的avg更新 因为在同一SQL语句内  除非外层查询的元组变量引入内层查询  否则内层查询只进行一次</code></pre><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>对relation的更新：</p><p>Example: all instructors with salary over $100,000 receive a 3 percent raise, whereas (而) all others receive a 5 percent raise. 这里如果更新两次，那么顺序很重要，要避免两类人群发生交叠。</p><pre><code class="mysql">update instructor    set salary =salary * 1.05    where salary &gt; 10000;update instructor     set salary = salary * 1.03    where salary &lt;= 10000;update instructor             -- 可以用 case 语句解决顺序问题set salary = case            when salary &lt;=10000            then salary * 1.05            else salary * 1.03            end;</code></pre><p>对view的更新：</p><pre><code class="mysql">create view faculty asselect ID, name, dept_namefrom instructorinsert into facultyvalues(&#39;30765&#39;,&#39;Green&#39;,&#39;music&#39;);-- 这实际上是：insert into instructor value(&#39;3..&#39;,&#39;G..&#39;,&#39;m..&#39;, null);-- 正因此，太过复杂的view的更新难以翻译，所以不被允许-- 换句话说，view 只是一个续表，宽松查询，严格更新</code></pre><h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><p><strong>Alter</strong> is used to add or drop or modify attributes to an existing relation. A is the new attribute, D is its domain.</p><pre><code class="mysql">alter table r add (A1 D1, A2 D2...,An Dn);alter table r drop A;-- may be not supportedalter table r modify (ID char(10), salary not null);</code></pre><h3 id="create-index"><a href="#create-index" class="headerlink" title="create index"></a>create index</h3><p>It is used to create indexes on tables. Indexes enable database applications to look up data faster without reading the entire table. </p><pre><code class="mysql">CREATE INDEX index_nameON table_name (column_name a, b,...,n);-- Creates a unique index on a table. Duplicate values are not allowed:CREATE UNIQUE INDEX index_nameON table_name (column_name)</code></pre><h2 id="string-operations"><a href="#string-operations" class="headerlink" title="string operations"></a>string operations</h2><h3 id="string-matching-operator-通配符"><a href="#string-matching-operator-通配符" class="headerlink" title="string-matching operator 通配符"></a>string-matching operator 通配符</h3><h4 id="all"><a href="#all" class="headerlink" title="*: all"></a>*: all</h4><pre><code class="mysql">select * from student where dept_name = &quot;Sci&quot;;</code></pre><h4 id="matches-any-substring"><a href="#matches-any-substring" class="headerlink" title="%:  matches any substring."></a>%:  matches any substring.</h4><h4 id="matches-any-char"><a href="#matches-any-char" class="headerlink" title="_:  matches  any char."></a>_:  matches  any char.</h4><p>Must be used with <strong>LIKE</strong> in <strong>WHERE</strong>.</p><pre><code class="mysql">SELECT * FROM WebsitesWHERE url LIKE &#39;https%&#39;</code></pre><p>Caution that patterns are case sensitive, uppercase characters do not match lowercase characters. </p><p>• ’Intro%’ matches any string beginning with “Intro”. </p><p>• ’%Comp%’ matches any string containing “Comp” as a substring, for example, ’Intro. to Computer Science’, and ’Computational Biology’. </p><p>• ’ _ _ _ ’matches any string of exactly three characters . </p><p>• ’ _ _ _%’ matches any string of at least three characters. </p><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>The <strong>escape character</strong> is used immediately before a special pattern character to indicate that the special pattern character is to be treated like a normal character. We define the escape character for a <strong>like</strong> comparison using the <strong>escape</strong> keyword. To illustrate, consider the following patterns, which use a backslash (\) as the escape character.</p><p>• <strong>like</strong> ’ab%cd%’ <strong>escape</strong> ’\’   matches all strings beginning with “ab%cd”. </p><p>• <strong>like</strong> ’ab\cd%’ <strong>escape</strong> ’\’    matches all strings beginning with “ab\cd”. </p><p> the string “It’s right” can be specified by “It<strong>”</strong>s right”. And sometimes we use <strong>not</strong> <strong>like</strong> to find mismatches.</p><h3 id="concatenating-串联"><a href="#concatenating-串联" class="headerlink" title="concatenating 串联"></a>concatenating 串联</h3><pre><code class="mysql">select 教师名 =  || name from instructorwhere ...</code></pre><p>the output is: 教师名 = SU…</p><h3 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h3><p>and by using function <strong>lower(s), upper(s)</strong> we can convert from upper to lower case and vice versa; <strong>trim(s)</strong> helps to remove the space at the end of the sentence.</p><h2 id="display-the-tuples"><a href="#display-the-tuples" class="headerlink" title="display the tuples"></a>display the tuples</h2><h3 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a>ordering</h3><pre><code class="mysql">select name from instructor where dept_name = &#39;CS&#39;order by salary desc, name asc;</code></pre><p>We specify desc for descending order, and asc for ascending order. <strong>Asc is the default.</strong></p><h2 id="set-operations"><a href="#set-operations" class="headerlink" title="set operations"></a>set operations</h2><p>Unlike <strong>SELECT</strong> clause, all these operations automatically eliminates duplicates. Use <strong>union all, intersect all</strong> and <strong>except all</strong> to retain duplicates.</p><p>union</p><pre><code class="mysql">-- select courses in this long term (select course id from section where semester = ’Fall’ and year= 2009) union (select course id from section where semester = ’Spring’ and year= 2010); -- get a complete result(select course id from section where semester = ’Fall’ and year= 2009) union all(select course id from section where semester = ’Spring’ and year= 2010); </code></pre><p>intersect and except are similar to union.</p><h2 id="aggregate-functions"><a href="#aggregate-functions" class="headerlink" title="aggregate functions"></a>aggregate functions</h2><p>These functions operate on the multi-set of values of a column of a relation, and return  <strong>a value.</strong></p><p>avg (col ):  average value</p><p>min (col ):   minimum value</p><p>max (col ):   maximum value</p><p>sum (col ):   sum of values</p><p>count (col ):   number of values</p><ul><li>Attributes in <strong>select</strong> clause outside of <strong>aggregate</strong> functions must appear in <strong>group</strong> <strong>by</strong> list</li></ul><p>要么在聚合函数里  要么在group by里</p><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><ol><li>输出计院的老师工资平均数: 得到结果</li></ol><pre><code class="mysql">select avg(salary) as avg_salaryfrom instructorwhere dept_name = &#39;CS&#39;;</code></pre><ol start="2"><li>输出各个学院的平均工资： 得到分组结果</li></ol><pre><code class="mysql">select dept_name, avg(salary) as avg_salaryfrom instructorgroup by dept_name;</code></pre><ol start="3"><li>找出每个支行的用户数：得到需要自然连接的分组结果</li></ol><pre><code class="mysql">select bra_name, count(distinct id) as numfrom account, depositorwhere account.bra_name=depositor.bra_namegroup by bra_name;</code></pre><ol start="4"><li>找出平均工资大于…的学院：对分组结果进行选择（having，出现的也是要么在聚合函数，要么在group by）</li></ol><pre><code class="mysql">select dept_name, avg(salary) as avgfrom instructorgroup by deot_namehaving avg(salary)&gt;42000;</code></pre><h2 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h2><p><strong>execution order:</strong></p><p>from-&gt; where-&gt; group-&gt; having-&gt; select-&gt;order by</p><p><strong>notes</strong>: </p><p>having/select语句，出现的也是要么在聚合函数，要么在group by</p><p>where里面不能直接加聚合函数要放到having</p><h2 id="null-value"><a href="#null-value" class="headerlink" title="null value"></a>null value</h2><p>对null值做加减乘除结果都是null</p><p>和null的一切比较（包括=）结果都是unknown（防止逻辑矛盾），所以如果要统计null值要写 A is null， 而不能是 A = null；或者写 A = null is unknown，聚合函数会忽略空值。但count（*）来计算总记录数目，不会忽略空值。</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: concepts, relational algebra, null value</title>
    <link href="/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/"/>
    <url>/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/</url>
    
    <content type="html"><![CDATA[<h2 id="CONCEPTS"><a href="#CONCEPTS" class="headerlink" title="CONCEPTS"></a>CONCEPTS</h2><h3 id="1-relation-relationship"><a href="#1-relation-relationship" class="headerlink" title="1. relation/relationship"></a><strong>1. relation/relationship</strong></h3><p>a relationship is a specific association among several entities.</p><p>a relation is an abstract concept，mostly equals to a table.</p><h3 id="2-principals"><a href="#2-principals" class="headerlink" title="2. principals"></a><strong>2. principals</strong></h3><p><em>key words： domain；atomic；null/true/false；relation schema/relation instance or database schema/database instance；unordered and no duplicate；</em></p><h4 id="custom-writing-formats："><a href="#custom-writing-formats：" class="headerlink" title="custom writing formats："></a>custom writing formats：</h4><p>a relation schema： R = {A1, A2…,An}<br>                  INSTRUCTOR-SCHEMA = {ID, NAME, DEPT_NAME}<br>a relation： r(R) = {A1, A2…,An}<br>                  instructor_one(INSTRUCTOR-SCHEMA) = {ID, NAME, DEPT_NAME}<br>a tuple( a row in the table)：t || r<br>an attribute： t[name]</p><h3 id="3-about-KEY"><a href="#3-about-KEY" class="headerlink" title="3. about KEY"></a><strong>3. about KEY</strong></h3><p><img src="https://cdn-images-1.medium.com/max/1000/1*GNDD3CpbMQOSfBkqKALn-Q.png" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><p>student(people) = {<u>st-ID</u>, st-name，sex, address，major-ID}</p><p>major(subject) = {<u>major-ID</u>, major-name}</p><p>major-ID is not a primary key of relation student, but a primary key of major, then it’s called a foreign key （referencing major，and major-ID must exist while can be marked with NULL），student is called a referencing relation；and major is a referenced relation.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851554/1_wdgu4h.png" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><center>Schema Diagram (模式图)</center><h2 id="TALK-ABOUT-RELATIONAL-ALGEBRA"><a href="#TALK-ABOUT-RELATIONAL-ALGEBRA" class="headerlink" title="TALK ABOUT RELATIONAL ALGEBRA"></a>TALK ABOUT RELATIONAL ALGEBRA</h2><p>What plays a vital role in learning DBS is four basic operations： to add，to delete，to update the data and to select what you need. </p><p>Pure languages form underlying basis of query languages that people use，including：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583852096/2_orcqst.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200310231102353"></p><h3 id="1-relational-algebra"><a href="#1-relational-algebra" class="headerlink" title="1. relational algebra"></a><strong>1. relational algebra</strong></h3><h4 id="select：-sigma-rho-R"><a href="#select：-sigma-rho-R" class="headerlink" title="select： $\sigma$_ $\rho$(R)"></a>select： $\sigma$_ $\rho$(R)</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170550040_adbark.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170550040"></p><p>incident: $\sigma$_(A=B ^ c&gt;20) (R)    result:</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170640349_trjdbw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170640349"></p><hr><h4 id="project-prod-A-C-r"><a href="#project-prod-A-C-r" class="headerlink" title="project :  $\prod$_A,C(r)"></a>project :  $\prod$_A,C(r)</h4><h4 id><a href="#" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170659603_dnoiiw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170659603"></h4><p>result：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170722947_cb5kcy.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170722947"></p><hr><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><h4 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170830612_klxjsz.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170830612"></h4><p>result： merger of similar items. </p><p>for R union S to be, they must have the same arity (same number of attributes) and the domains must be compatible.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170848539_mvp8cl.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170848539"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308164500042_hioijk.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308164500042"></p><h4 id="set-difference-a-b"><a href="#set-difference-a-b" class="headerlink" title="set difference: a-b"></a>set difference: a-b</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170907433_jfynpx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170907433"></p><h4 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308173354362_tb2c8k.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308173354362"></p><hr><h4 id="Cartesian-product"><a href="#Cartesian-product" class="headerlink" title="Cartesian product"></a>Cartesian product</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170933374_budd0t.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170933374"></p><p>result: list out all the possible permutation results</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170950775_aiim6b.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170950775"></p><hr><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><p>$\rho$_x(E): rename E as x;</p><p>x can be x(a1, a2 …, an) to rename attributes at the same time.</p><hr><h4 id="natural-join-a-special-case-of-theta-join"><a href="#natural-join-a-special-case-of-theta-join" class="headerlink" title="natural join (a special case of theta join)"></a>natural join (a special case of theta join)</h4><p>first find out the same attributes(1,a; 2,b).</p><p>second make Cartesian product.</p><p>at last merge similar items.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308173613414_gadtj6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308173613414"></p><hr><h4 id="division"><a href="#division" class="headerlink" title="division"></a>division</h4><p>Inverse calculation of Cartesian product</p><p>example: Q = R/S</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308174447859_ilinqp.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308174447859"></p><hr><h4 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309162625959_qismip.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309162625959"></p><p>in fact, this thought is similiar to that in <em>example: banking; 7</em> ,  to <strong>take away what we don’t need</strong> (tmp2).</p><hr><h4 id="extended-relational-algebra-operations"><a href="#extended-relational-algebra-operations" class="headerlink" title="extended relational-algebra-operations"></a>extended relational-algebra-operations</h4><p><strong>generalized projection</strong>: use arithmetic expressions as the projection order.</p><p><strong>aggregate functions &amp; operations</strong>: returns a single value as a result. requirements can be avg，min，max，sum，count；rename the result with ‘as’.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165427164_lvksfv.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309165427164"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165755602_livi38.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309165755602"></p><p><strong>Left Out Join &amp; Right Out Join &amp; Full Outer Join</strong>: define the basis for retaining results.</p><hr><hr><h3 id="EXAMPLE-banking"><a href="#EXAMPLE-banking" class="headerlink" title="EXAMPLE: banking"></a>EXAMPLE: banking</h3><hr><p><strong>branch (<u>branch-name</u>, branch-city, assets)</strong></p><p><strong>customer (<u>customer-name</u>, customer-street, customer-city)</strong></p><p><strong>account (<u>account-number</u>, branch-name, balance)</strong></p><p><strong>loan (<u>loan-number</u>, branch-name, amount)</strong></p><p><strong>depositor (<u>customer-name, account-number</u>)</strong></p><p><strong>borrower (<u>customer-name, loan-number</u>)</strong></p><p>Q:</p><p>1: Find all loans of over $1200</p><p>2: Find the <strong>loan number</strong> for each loan of an amount greater than $1200</p><p>3: Find the names of all customers who have a loan, <strong>or</strong> an account, or both, from the bank.</p><p>4: WHAT ABOUT <strong>AND</strong>?</p><p>5: Find the names of all customers who have a loan at the Perryridge branch.(<strong>USE AXB</strong>)</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308172122007_qs6btb.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308172122007"></p><p>6: Find the names of all customers who have a loan at the Perryridge branch but do not have</p><p> an account at any branch of the bank.(<strong>USE A-B</strong>)</p><p><strong>7: Find the largest account balance.</strong></p><p>ans = all - not the largest</p><p>​       = all - $\prod$<em>_account_balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2)     //a1 == a2 ==account</p><p>​       = $\prod$<em>balance (account) - $\prod$a1.balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2) </p><h3 id="2-tuple-relational-calculus"><a href="#2-tuple-relational-calculus" class="headerlink" title="2. tuple relational calculus"></a><strong>2. tuple relational calculus</strong></h3><p>//To be added</p><h3 id="3-domain-relational-calculus"><a href="#3-domain-relational-calculus" class="headerlink" title="3. domain relational calculus"></a><strong>3. domain relational calculus</strong></h3><p>//To be added</p><h2 id="about-NULL-value"><a href="#about-NULL-value" class="headerlink" title="about NULL value"></a>about NULL value</h2><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309171926902_o7qkus.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309171926902"></p><p>ALL in all，null is known, unknown is unknown.</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/silmont2000.github.io/2020/03/07/hello-world/"/>
    <url>/silmont2000.github.io/2020/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
