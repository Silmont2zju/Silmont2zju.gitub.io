<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Database System: nested subqueries, complex queries and examples</title>
    <link href="/silmont2000.github.io/2020/03/18/Database-System-nested-subqueries-and-examples/"/>
    <url>/silmont2000.github.io/2020/03/18/Database-System-nested-subqueries-and-examples/</url>
    
    <content type="html"><![CDATA[<h1 id="views"><a href="#views" class="headerlink" title="views"></a>views</h1><p>好处：因为展示的属性比较少，所以更安全/容易使用</p><pre><code class="mysql">create view &lt;name&gt; as    select c1,c2....from...;create view &lt;name&gt; as(d1,d2...) -- 列重命名    select c1...from...</code></pre><p>还是拿之前的照秋学期春学期开课的题目做例子：</p><pre><code class="mysql">create view physics_fall_2009 as -- 建立一个09年秋季物理系开课情况表select course.course_id,sec_id,building,room_numberfrom course, sectionwhere course.course_id = section.course_id        and course.dept_name = &#39;Physics&#39;        and section.semester = &#39;fall&#39;        and section.year = &#39;2009&#39;;select course_id                -- 按照正常的表格使用from physics_fall_2009where building = &#39;waston&#39;;</code></pre><h1 id="complex-queries"><a href="#complex-queries" class="headerlink" title="complex queries"></a>complex queries</h1><h2 id="derived-relations-导出关系创建局部视图"><a href="#derived-relations-导出关系创建局部视图" class="headerlink" title="derived relations 导出关系创建局部视图"></a>derived relations 导出关系创建局部视图</h2><p>e.g. 找出那些平均工资高于42000美元的学院。</p><pre><code class="mysql">select dept_name, avg_salary            -- 3所求（结合内部）from(select dept_name, avg(salary)        -- 1先按学院计算平均工资    from instructor    group by dept_name)    as dept_avg(dept_name, avg_salary)    -- 2导出为表格dept_avg    -- 把子查询导出为一个relation，因为from后面应该加一个relation namewhere avg_salary &gt; 4200;</code></pre><p>from … as …  将内部 select 语句导出为一个<strong>局部视图</strong>，仅在执行时产生，执行结束就没有了，而 create view 是全局视图</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="with-clause-创建局部视图"><a href="#with-clause-创建局部视图" class="headerlink" title="with clause 创建局部视图"></a>with clause 创建局部视图</h2><pre><code class="mysql">with max_budget(value) as             -- 局部视图m_b，只有一个属性viewselect max(budget)from departmentselect budget                        -- 匹配最有钱的部门from department, max_budgetwhere department.budegt = max_budget.value;</code></pre><p>在这里 with 也产生一个临时视图，语句结束就消失。也可以同时创建多个：</p><p>e.g. 找出支出工资平均大于总体平均值的系</p><pre><code class="mysql">with     dept_total(dept_name, value) as        -- 建立分类表格    (select dept_name, avg(salary)    from instructor    group by dept_name)    dept_total_avg(value) as            -- 求总体平均值    (select avg(value)    from dept_total)select dept_name                        -- 比较，from要同时加入两个relationfrom dept_total A, dept_total_avg Bwhere A.value &gt; B.value;</code></pre><h1 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h1><h2 id="嵌套例题"><a href="#嵌套例题" class="headerlink" title="嵌套例题"></a>嵌套例题</h2><p>概念：select语句中套着另一个select语句。</p><ol><li><h3 id="同时在09年秋季和10年春季开课的课程"><a href="#同时在09年秋季和10年春季开课的课程" class="headerlink" title="同时在09年秋季和10年春季开课的课程"></a>同时在09年秋季和10年春季开课的课程</h3></li></ol><pre><code class="mysql">select distinct course_idfrom sectionwhere semester=&#39;fall&#39; and year = 2009 and    course_id in (    select course_id    from section    where semester=&#39;spring&#39; and year = 2010);</code></pre><p>这里有一个 <strong>in</strong> 关键词，用来做一个check。相对的就是not in， 没有出现。</p><ol start="2"><li><h3 id="上过10101老师上过的课-注意必须去重"><a href="#上过10101老师上过的课-注意必须去重" class="headerlink" title="上过10101老师上过的课: 注意必须去重"></a>上过10101老师上过的课: 注意必须去重</h3></li></ol><pre><code class="mysql">select count(distinct id)from takeswhere (course_id, sec_id, semester, year)    in(    select course_id, sec_id, semester, year    from teaches    where instructor_id = 10101);</code></pre><ol start="3"><li><h3 id="找出每个银行中最大存款的账户"><a href="#找出每个银行中最大存款的账户" class="headerlink" title="找出每个银行中最大存款的账户"></a>找出每个银行中最大存款的账户</h3></li></ol><pre><code class="mysql">select account_num AN, balance from account Awhere balance &gt;=(select max(balance) from account B where A.branch_name = B.branch_name)order by balance;</code></pre><p>解释：内层的语句和外层不独立，先从内层账户中提取一个max值，条件就是和我当前检查的账户在同一个支行，然后再次比较当前账户的balance和max值进行比较，计算量相当可观。</p><ol start="4"><li><h3 id="输出比至少一个生物系老师工资高的老师"><a href="#输出比至少一个生物系老师工资高的老师" class="headerlink" title="输出比至少一个生物系老师工资高的老师"></a>输出比至少一个生物系老师工资高的老师</h3></li></ol><pre><code class="mysql">select distince T.namefrom instructor T,instructor Swhere T.salary&gt;S.salary and S.dept_name = &quot;BIO&quot;;</code></pre><pre><code class="mysql">select name from instructorwhere salary &gt; some     (select salary     from instructor     where dept_name = &quot;BIO&quot;);</code></pre><p>这里引入some和all，可以用于where中的比较。<strong>= some 即 in， 但 ≠some 不意味着 not in。</strong>返回T/F。</p><ol start="4"><li><h3 id="找出上了生物系所有课程的学生"><a href="#找出上了生物系所有课程的学生" class="headerlink" title="找出上了生物系所有课程的学生"></a>找出上了生物系所有课程的学生</h3></li></ol><pre><code class="mysql">select distinct S.id, S.namefrom student as S                 -- 检索所有学生where not exists((                -- 检查生物系所有课-S选的所有课是否是空集                               -- 是的话就输出    select course_id            -- 列出生物系所有课程id    from course    where dept_name = &quot;BIO&quot;)    except(    select T.student_id            -- 列出S选出的所有课    from takes as T    where S.id = T.id));</code></pre><p>exist： 不是空集， not exists 是空集，返回T/F。</p><p>类似的有unique，not unique，判断是否有重复，返回T,F。</p><h2 id="运用例题"><a href="#运用例题" class="headerlink" title="运用例题"></a>运用例题</h2><ol><li>找出上了十门课以上的学生； <em>enroll: 选课表</em></li></ol><pre><code class="mysql">select sno from enrollgroup by snohaving count(distinct cno) &gt; 10;</code></pre><ol start="2"><li><p>找出这些学生的名字：涉及两个表</p><p>不管是否被引用，导出表 (或称<strong>嵌套表</strong>) 必须给出别名</p><p>Student(sno, sname, ssex, sage, sdept)</p><p>Enroll(sno, cno, score)</p><p>Course(cno, cname, credits, pcourse)</p></li></ol><pre><code class="mysql">select TT.sno, sname, c_numfrom    (select sno, count(cno) as c_num    -- 分组求选课总数    from enroll    group by sno)as TT, student S                        -- 笛卡尔积 连接两个表where TT.sno = S.sno and c_num &gt; 10;        -- 筛选</code></pre>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: basic statements</title>
    <link href="/silmont2000.github.io/2020/03/13/Database-System-basic-statements/"/>
    <url>/silmont2000.github.io/2020/03/13/Database-System-basic-statements/</url>
    
    <content type="html"><![CDATA[<h1 id="What‘s-SQL"><a href="#What‘s-SQL" class="headerlink" title="What‘s  SQL"></a>What‘s  SQL</h1><p>结构化查询语言，structured query language，called ”SEQUEL“. It can define the structure of the data, modify data in the database, and specify security constraints. </p><p>There are four SQL conformance levels: entry level, transitional,  intermediate and full. But currently no DBMS products achieve Full SQL level.</p><p>including:</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>data_definition language. DDL is used to operate the <strong>table</strong>.</p><ul><li>create table; alter(修改) table; drop table——integrity</li><li>create index; drop index</li><li>create view; drop view</li><li>create trigger; drop trigger</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="*DML"></a>*DML</h2><p>data_manipulation language. The SQL DML provides the ability to <strong>query</strong> information from the database and to <strong>insert</strong> tuples into, <strong>delete</strong> tuples from, and <strong>modify</strong> tuples in the database.</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>data_control language.</p><h1 id="data-definition"><a href="#data-definition" class="headerlink" title="data definition"></a>data definition</h1><h2 id="basic-types"><a href="#basic-types" class="headerlink" title="basic types"></a>basic types</h2><ul><li>char(<em>n</em>): A fixed-length character string with user-specified length n. if store “hello” in char(7), <strong>two more spaces</strong> will be appended. when comparing two values of type char,if they are of different lengths, <strong>extra spaces</strong> are automatically added to the shorter one to make them the same size, before comparison. </li><li>varchar(<em>n</em>):  (<strong>recommended</strong>) A variable-length character string with user-specified maximum length n. so if “hello” is stored in varchar(7), <strong>no more spaces</strong> will be appended.</li><li>int</li><li>smallint: Kind of like a short int. Its size depends on the machine.</li><li>numeric(<em>p,d</em>): the allowed format is (p<strong>-d</strong> digits. d digits). e.g. numeric(4,2) allows 22.22, but neither 222.2 or 2.222.</li><li>real, double: real is kind of like float. and double is double.</li><li>float(<em>n</em>): A floating_point number, with precision of <strong>at least</strong> n digits.</li><li>date: containing a 4-digit-year, month and date. e.g. date ‘2000-2-17’</li><li>time: ‘08:15:30’ or ‘08:15:30.75’</li><li>timestamp: date + time. timestamp ‘2000-2-17 08:15:30.75’</li></ul><h2 id="basic-schema-definition-amp-basic-structure-of-select"><a href="#basic-schema-definition-amp-basic-structure-of-select" class="headerlink" title="basic schema definition &amp; basic structure of select"></a>basic schema definition &amp; basic structure of select</h2><h3 id="create-a-table"><a href="#create-a-table" class="headerlink" title="create a table"></a>create a table</h3><pre><code class="mysql">create table department            -- name of the table    (dept_name varchar(20) NOT NULL,     -- name of the attribute; domain of the attribute    building varchar(15),    budget numeric(12,2),    primary key(dept_name)        -- &lt;integrity_constraint&gt;     -- more than one primary keys are allowed    foreign key(dept_name) references department);    </code></pre><p>SQL supports a number of different integrity constraints. For example: <strong>primary key, foreign key references</strong> <em>s</em>, <strong>not null</strong>. Without a ban, every attribute can be null. As for primary key, the following writing is also equivalent:</p><pre><code class="sql">create table department                (primary key,     dept_name varchar(20) NOT NULL,   ...);    </code></pre><p>And if a check is necessary, we write:</p><pre><code class="mysql">create table instructor(ID char(5),primary key,            -- mark the folowing line is the primary keyname varchar(20),dept_name varchar(20),salary numeric(8,2),check(salary&gt;=0));        -- add some conditions</code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>And the relation is empty initially. We write as below to insert a tuple; The values are specified in the order in which the corresponding attributes are listed i<strong>n the relation schema</strong>. </p><pre><code class="sql">insert into instructor    values (null, &quot;Silmont&quot;, &quot;digital media&quot;, 66000);</code></pre><p>But what if I forgot the order?</p><pre><code class="mysql">insert into instructor(name, dept_name, salary, ID)-- specify the order    values(&quot;Silmont&quot;, &quot;digital media&quot;, 66000, null);    -- or：    -- select e1, e2, ... from ...;</code></pre><h3 id="select"><a href="#select" class="headerlink" title="*select"></a>*select</h3><h4 id="queries-on-single-relation"><a href="#queries-on-single-relation" class="headerlink" title="queries on single relation"></a>queries on single relation</h4><p>The <strong>select</strong> clause is used to list the attributes desired in the result of a query. The <strong>from</strong> clause is a list of the relations to be accessed in the evaluation of the query.  The simplest statement is:</p><pre><code class="sql">select namefrom instructor;</code></pre><p>Ending with a semicolon, the statement means take out all the <em>names</em> of the relation <em>instructor</em>, the result will have a heading “<strong><em>name</em></strong>“. But if we do the same thing to find dept_name, lots of duplication will happen because <strong>more than one</strong> employee works in this department. The solution is:</p><pre><code class="sql">select distinct dept_namefrom instructor;</code></pre><p>With <strong>distinct</strong>, we force the elimination(淘汰) of duplicates ( <strong>exactly</strong> the same results) . On the contrary, select all is used to emphasize that duplicates should not be removed. And <strong>all is the default.</strong></p><p>The select clause may also contain arithmetic expressions involving the operators +, − , ∗,a n d / operating on constants or attributes of tuples, while not result in any change to relation. For example:</p><pre><code class="mysql">select ID, name, salary * 1.1from instructor;</code></pre><p>While in life, sometimes only those who contribute more can get a rise. So we need to specifies the condition, like:</p><pre><code class="mysql">select ID, name, salary * 1.1from instructorwhere salary &gt;=10 000 and dept_name = &#39;Comp.Sci&#39;;</code></pre><p>The <strong>where</strong> clause is a predicate involving attributes of the relation in the <strong>from</strong> clause, if omitted, the predicate is <strong>true</strong>. Some other symbols has the same status as ‘&gt;’: <strong>&lt;, =,</strong> <strong>between</strong> num1 <strong>and</strong> num2, <strong>not</strong> <strong>between</strong>; <strong>NOT</strong> and <strong>OR</strong> are used widely, too.</p><pre><code class="mysql">where (instructor.ID, dept_name) = (teaches.ID, &#39;bio&#39;)；</code></pre><p>The statement above is also legal.</p><h4 id="queries-on-multiple-relations"><a href="#queries-on-multiple-relations" class="headerlink" title="queries on multiple relations"></a>queries on multiple relations</h4><p>To solve the problem that more than one relation are involved to get a result, we need to <strong>select</strong> from a unioned-relation. For example, “Retrieve the names of all instructors, along with their department names and department building name”,  the operations are related to the relation <em>instructor</em>, <em>department</em>.</p><pre><code class="mysql">select name, instructor.dept_name, buildingfrom instructor, departmentwhere instructor.dept_name = department.dept_name;orfrom instructor natural join teaches;</code></pre><p>First, the relation name are used <strong>necessarily</strong> as a prefix to make <em>dept_name</em> clear. Second, list the relations that need to be accessed in the <strong>from</strong> clause(Cartesian Product), and specify the matching condition in the <strong>where</strong> clause. The example above is a natural union.</p><p>In the previous article, I mentioned that when finding the <em>most</em>, making a Cartesian product with the relation itself is feasible. But they will have the same prefix, so renaming is put forward:</p><pre><code class="mysql">select name as instructor_name, course_IDfrom instructor as I, teaches as Twhere I.ID = T.ID;select distinct namefrom instructor as I, instructor as Twhere I.salary &lt; T.salary and T.dept_name = &quot;Comp.Sci&quot;;</code></pre><p>‘AS’ is optional. It rename the result of column A as B, so you can also write count(name) as name_num. </p><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><pre><code class="mysql">drop table instructor; -- delete all information</code></pre><p>delete everything about instructor, including the relation itself.</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p><strong>delete</strong> retains relation <em>instructor</em>, but deletes all tuples in <em>instructor</em>. </p><p>e.g. 删除金融系的所有教师信息</p><pre><code class="mysql">delete from instructorwhere dept_name = &#39;Finace&#39;;</code></pre><p>删除 Needham 市所有支行的所有存款信息，并删除存款人中的相关信息</p><pre><code class="mysql">delete from accountwhere branch_name in    (select branch_name                 -- 先找到要删哪些支行    from branch    where branch_city = &#39;Needham&#39;);delete from depositerwhere account_number in    (select account_number    from branch B, branch A    where branch_city = &#39;Needham&#39; and B.branch_name = A.branch_name)</code></pre><p>删除所有工资水平低于平均水平的老师</p><pre><code class="mysql">delete from instructorwhere salary &lt;    (select avg(salary)    from instructor);                -- 虽然是数和avg返回集合的比较  但因为集合是单元素集合 所以ok    -- 另外 这里不必考虑删除元组造成的avg更新 因为在同一SQL语句内  除非外层查询的元组变量引入内层查询  否则内层查询只进行一次</code></pre><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>对relation的更新：</p><p>Example: all instructors with salary over $100,000 receive a 3 percent raise, whereas (而) all others receive a 5 percent raise. 这里如果更新两次，那么顺序很重要，要避免两类人群发生交叠。</p><pre><code class="mysql">update instructor    set salary =salary * 1.05    where salary &gt; 10000;update instructor     set salary = salary * 1.03    where salary &lt;= 10000;update instructor             -- 可以用 case 语句解决顺序问题set salary = case            when salary &lt;=10000            then salary * 1.05            else salary * 1.03            end;</code></pre><p>对view的更新：</p><pre><code class="mysql">create view faculty asselect ID, name, dept_namefrom instructorinsert into facultyvalues(&#39;30765&#39;,&#39;Green&#39;,&#39;music&#39;);-- 这实际上是：insert into instructor value(&#39;3..&#39;,&#39;G..&#39;,&#39;m..&#39;, null);-- 正因此，太过复杂的view的更新难以翻译，所以不被允许-- 换句话说，view 只是一个续表，宽松查询，严格更新</code></pre><h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><p><strong>Alter</strong> is used to add or drop or modify attributes to an existing relation. A is the new attribute, D is its domain.</p><pre><code class="mysql">alter table r add (A1 D1, A2 D2...,An Dn);alter table r drop A;-- may be not supportedalter table r modify (ID char(10), salary not null);</code></pre><h3 id="create-index"><a href="#create-index" class="headerlink" title="create index"></a>create index</h3><p>It is used to create indexes on tables. Indexes enable database applications to look up data faster without reading the entire table. </p><pre><code class="mysql">CREATE INDEX index_nameON table_name (column_name a, b,...,n);-- Creates a unique index on a table. Duplicate values are not allowed:CREATE UNIQUE INDEX index_nameON table_name (column_name)</code></pre><h2 id="string-operations"><a href="#string-operations" class="headerlink" title="string operations"></a>string operations</h2><h3 id="string-matching-operator-通配符"><a href="#string-matching-operator-通配符" class="headerlink" title="string-matching operator 通配符"></a>string-matching operator 通配符</h3><h4 id="all"><a href="#all" class="headerlink" title="*: all"></a>*: all</h4><pre><code class="mysql">select * from student where dept_name = &quot;Sci&quot;;</code></pre><h4 id="matches-any-substring"><a href="#matches-any-substring" class="headerlink" title="%:  matches any substring."></a>%:  matches any substring.</h4><h4 id="matches-any-char"><a href="#matches-any-char" class="headerlink" title="_:  matches  any char."></a>_:  matches  any char.</h4><p>Must be used with <strong>LIKE</strong> in <strong>WHERE</strong>.</p><pre><code class="mysql">SELECT * FROM WebsitesWHERE url LIKE &#39;https%&#39;</code></pre><p>Caution that patterns are case sensitive, uppercase characters do not match lowercase characters. </p><p>• ’Intro%’ matches any string beginning with “Intro”. </p><p>• ’%Comp%’ matches any string containing “Comp” as a substring, for example, ’Intro. to Computer Science’, and ’Computational Biology’. </p><p>• ’ _ _ _ ’matches any string of exactly three characters . </p><p>• ’ _ _ _%’ matches any string of at least three characters. </p><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>The <strong>escape character</strong> is used immediately before a special pattern character to indicate that the special pattern character is to be treated like a normal character. We define the escape character for a <strong>like</strong> comparison using the <strong>escape</strong> keyword. To illustrate, consider the following patterns, which use a backslash (\) as the escape character.</p><p>• <strong>like</strong> ’ab%cd%’ <strong>escape</strong> ’\’   matches all strings beginning with “ab%cd”. </p><p>• <strong>like</strong> ’ab\cd%’ <strong>escape</strong> ’\’    matches all strings beginning with “ab\cd”. </p><p> the string “It’s right” can be specified by “It<strong>”</strong>s right”. And sometimes we use <strong>not</strong> <strong>like</strong> to find mismatches.</p><h3 id="concatenating-串联"><a href="#concatenating-串联" class="headerlink" title="concatenating 串联"></a>concatenating 串联</h3><pre><code class="mysql">select 教师名 =  || name from instructorwhere ...</code></pre><p>the output is: 教师名 = SU…</p><h3 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h3><p>and by using function <strong>lower(s), upper(s)</strong> we can convert from upper to lower case and vice versa; <strong>trim(s)</strong> helps to remove the space at the end of the sentence.</p><h2 id="display-the-tuples"><a href="#display-the-tuples" class="headerlink" title="display the tuples"></a>display the tuples</h2><h3 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a>ordering</h3><pre><code class="mysql">select name from instructor where dept_name = &#39;CS&#39;order by salary desc, name asc;</code></pre><p>We specify desc for descending order, and asc for ascending order. <strong>Asc is the default.</strong></p><h2 id="set-operations"><a href="#set-operations" class="headerlink" title="set operations"></a>set operations</h2><p>Unlike <strong>SELECT</strong> clause, all these operations automatically eliminates duplicates. Use <strong>union all, intersect all</strong> and <strong>except all</strong> to retain duplicates.</p><p>union</p><pre><code class="mysql">-- select courses in this long term (select course id from section where semester = ’Fall’ and year= 2009) union (select course id from section where semester = ’Spring’ and year= 2010); -- get a complete result(select course id from section where semester = ’Fall’ and year= 2009) union all(select course id from section where semester = ’Spring’ and year= 2010); </code></pre><p>intersect and except are similar to union.</p><h2 id="aggregate-functions"><a href="#aggregate-functions" class="headerlink" title="aggregate functions"></a>aggregate functions</h2><p>These functions operate on the multi-set of values of a column of a relation, and return  <strong>a value.</strong></p><p>avg (col ):  average value</p><p>min (col ):   minimum value</p><p>max (col ):   maximum value</p><p>sum (col ):   sum of values</p><p>count (col ):   number of values</p><ul><li>Attributes in <strong>select</strong> clause outside of <strong>aggregate</strong> functions must appear in <strong>group</strong> <strong>by</strong> list</li></ul><p>要么在聚合函数里  要么在group by里</p><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><ol><li>输出计院的老师工资平均数: 得到结果</li></ol><pre><code class="mysql">select avg(salary) as avg_salaryfrom instructorwhere dept_name = &#39;CS&#39;;</code></pre><ol start="2"><li>输出各个学院的平均工资： 得到分组结果</li></ol><pre><code class="mysql">select dept_name, avg(salary) as avg_salaryfrom instructorgroup by dept_name;</code></pre><ol start="3"><li>找出每个支行的用户数：得到需要自然连接的分组结果</li></ol><pre><code class="mysql">select bra_name, count(distinct id) as numfrom account, depositorwhere account.bra_name=depositor.bra_namegroup by bra_name;</code></pre><ol start="4"><li>找出平均工资大于…的学院：对分组结果进行选择（having，出现的也是要么在聚合函数，要么在group by）</li></ol><pre><code class="mysql">select dept_name, avg(salary) as avgfrom instructorgroup by deot_namehaving avg(salary)&gt;42000;</code></pre><h2 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h2><p><strong>execution order:</strong></p><p>from-&gt; where-&gt; group-&gt; having-&gt; select-&gt;order by</p><p><strong>notes</strong>: </p><p>having/select语句，出现的也是要么在聚合函数，要么在group by</p><p>where里面不能直接加聚合函数要放到having</p><h2 id="null-value"><a href="#null-value" class="headerlink" title="null value"></a>null value</h2><p>对null值做加减乘除结果都是null</p><p>和null的一切比较（包括=）结果都是unknown（防止逻辑矛盾），所以如果要统计null值要写 A is null， 而不能是 A = null；或者写 A = null is unknown，聚合函数会忽略空值。但count（*）来计算总记录数目，不会忽略空值。</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: concepts, relational algebra, null value</title>
    <link href="/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/"/>
    <url>/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/</url>
    
    <content type="html"><![CDATA[<h2 id="CONCEPTS"><a href="#CONCEPTS" class="headerlink" title="CONCEPTS"></a>CONCEPTS</h2><h3 id="1-relation-relationship"><a href="#1-relation-relationship" class="headerlink" title="1. relation/relationship"></a><strong>1. relation/relationship</strong></h3><p>a relationship is a specific association among several entities.</p><p>a relation is an abstract concept，mostly equals to a table.</p><h3 id="2-principals"><a href="#2-principals" class="headerlink" title="2. principals"></a><strong>2. principals</strong></h3><p><em>key words： domain；atomic；null/true/false；relation schema/relation instance or database schema/database instance；unordered and no duplicate；</em></p><h4 id="custom-writing-formats："><a href="#custom-writing-formats：" class="headerlink" title="custom writing formats："></a>custom writing formats：</h4><p>a relation schema： R = {A1, A2…,An}<br>                  INSTRUCTOR-SCHEMA = {ID, NAME, DEPT_NAME}<br>a relation： r(R) = {A1, A2…,An}<br>                  instructor_one(INSTRUCTOR-SCHEMA) = {ID, NAME, DEPT_NAME}<br>a tuple( a row in the table)：t || r<br>an attribute： t[name]</p><h3 id="3-about-KEY"><a href="#3-about-KEY" class="headerlink" title="3. about KEY"></a><strong>3. about KEY</strong></h3><p><img src="https://cdn-images-1.medium.com/max/1000/1*GNDD3CpbMQOSfBkqKALn-Q.png" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><p>student(people) = {<u>st-ID</u>, st-name，sex, address，major-ID}</p><p>major(subject) = {<u>major-ID</u>, major-name}</p><p>major-ID is not a primary key of relation student, but a primary key of major, then it’s called a foreign key （referencing major，and major-ID must exist while can be marked with NULL），student is called a referencing relation；and major is a referenced relation.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851554/1_wdgu4h.png" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><center>Schema Diagram (模式图)</center><h2 id="TALK-ABOUT-RELATIONAL-ALGEBRA"><a href="#TALK-ABOUT-RELATIONAL-ALGEBRA" class="headerlink" title="TALK ABOUT RELATIONAL ALGEBRA"></a>TALK ABOUT RELATIONAL ALGEBRA</h2><p>What plays a vital role in learning DBS is four basic operations： to add，to delete，to update the data and to select what you need. </p><p>Pure languages form underlying basis of query languages that people use，including：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583852096/2_orcqst.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200310231102353"></p><h3 id="1-relational-algebra"><a href="#1-relational-algebra" class="headerlink" title="1. relational algebra"></a><strong>1. relational algebra</strong></h3><h4 id="select：-sigma-rho-R"><a href="#select：-sigma-rho-R" class="headerlink" title="select： $\sigma$_ $\rho$(R)"></a>select： $\sigma$_ $\rho$(R)</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170550040_adbark.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170550040"></p><p>incident: $\sigma$_(A=B ^ c&gt;20) (R)    result:</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170640349_trjdbw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170640349"></p><hr><h4 id="project-prod-A-C-r"><a href="#project-prod-A-C-r" class="headerlink" title="project :  $\prod$_A,C(r)"></a>project :  $\prod$_A,C(r)</h4><h4 id><a href="#" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170659603_dnoiiw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170659603"></h4><p>result：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170722947_cb5kcy.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170722947"></p><hr><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><h4 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170830612_klxjsz.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170830612"></h4><p>result： merger of similar items. </p><p>for R union S to be, they must have the same arity (same number of attributes) and the domains must be compatible.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170848539_mvp8cl.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170848539"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308164500042_hioijk.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308164500042"></p><h4 id="set-difference-a-b"><a href="#set-difference-a-b" class="headerlink" title="set difference: a-b"></a>set difference: a-b</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170907433_jfynpx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170907433"></p><h4 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308173354362_tb2c8k.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308173354362"></p><hr><h4 id="Cartesian-product"><a href="#Cartesian-product" class="headerlink" title="Cartesian product"></a>Cartesian product</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170933374_budd0t.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170933374"></p><p>result: list out all the possible permutation results</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170950775_aiim6b.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170950775"></p><hr><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><p>$\rho$_x(E): rename E as x;</p><p>x can be x(a1, a2 …, an) to rename attributes at the same time.</p><hr><h4 id="natural-join-a-special-case-of-theta-join"><a href="#natural-join-a-special-case-of-theta-join" class="headerlink" title="natural join (a special case of theta join)"></a>natural join (a special case of theta join)</h4><p>first find out the same attributes(1,a; 2,b).</p><p>second make Cartesian product.</p><p>at last merge similar items.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308173613414_gadtj6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308173613414"></p><hr><h4 id="division"><a href="#division" class="headerlink" title="division"></a>division</h4><p>Inverse calculation of Cartesian product</p><p>example: Q = R/S</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308174447859_ilinqp.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308174447859"></p><hr><h4 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309162625959_qismip.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309162625959"></p><p>in fact, this thought is similiar to that in <em>example: banking; 7</em> ,  to <strong>take away what we don’t need</strong> (tmp2).</p><hr><h4 id="extended-relational-algebra-operations"><a href="#extended-relational-algebra-operations" class="headerlink" title="extended relational-algebra-operations"></a>extended relational-algebra-operations</h4><p><strong>generalized projection</strong>: use arithmetic expressions as the projection order.</p><p><strong>aggregate functions &amp; operations</strong>: returns a single value as a result. requirements can be avg，min，max，sum，count；rename the result with ‘as’.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165427164_lvksfv.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309165427164"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165755602_livi38.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309165755602"></p><p><strong>Left Out Join &amp; Right Out Join &amp; Full Outer Join</strong>: define the basis for retaining results.</p><hr><hr><h3 id="EXAMPLE-banking"><a href="#EXAMPLE-banking" class="headerlink" title="EXAMPLE: banking"></a>EXAMPLE: banking</h3><hr><p><strong>branch (<u>branch-name</u>, branch-city, assets)</strong></p><p><strong>customer (<u>customer-name</u>, customer-street, customer-city)</strong></p><p><strong>account (<u>account-number</u>, branch-name, balance)</strong></p><p><strong>loan (<u>loan-number</u>, branch-name, amount)</strong></p><p><strong>depositor (<u>customer-name, account-number</u>)</strong></p><p><strong>borrower (<u>customer-name, loan-number</u>)</strong></p><p>Q:</p><p>1: Find all loans of over $1200</p><p>2: Find the <strong>loan number</strong> for each loan of an amount greater than $1200</p><p>3: Find the names of all customers who have a loan, <strong>or</strong> an account, or both, from the bank.</p><p>4: WHAT ABOUT <strong>AND</strong>?</p><p>5: Find the names of all customers who have a loan at the Perryridge branch.(<strong>USE AXB</strong>)</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308172122007_qs6btb.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308172122007"></p><p>6: Find the names of all customers who have a loan at the Perryridge branch but do not have</p><p> an account at any branch of the bank.(<strong>USE A-B</strong>)</p><p><strong>7: Find the largest account balance.</strong></p><p>ans = all - not the largest</p><p>​       = all - $\prod$<em>_account_balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2)     //a1 == a2 ==account</p><p>​       = $\prod$<em>balance (account) - $\prod$a1.balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2) </p><h3 id="2-tuple-relational-calculus"><a href="#2-tuple-relational-calculus" class="headerlink" title="2. tuple relational calculus"></a><strong>2. tuple relational calculus</strong></h3><p>//To be added</p><h3 id="3-domain-relational-calculus"><a href="#3-domain-relational-calculus" class="headerlink" title="3. domain relational calculus"></a><strong>3. domain relational calculus</strong></h3><p>//To be added</p><h2 id="about-NULL-value"><a href="#about-NULL-value" class="headerlink" title="about NULL value"></a>about NULL value</h2><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309171926902_o7qkus.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309171926902"></p><p>ALL in all，null is known, unknown is unknown.</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/silmont2000.github.io/2020/03/07/hello-world/"/>
    <url>/silmont2000.github.io/2020/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
