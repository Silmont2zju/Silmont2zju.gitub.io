<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数字视音频历年题整理</title>
    <link href="/silmont2000.github.io/2021/01/27/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91%E5%8E%86%E5%B9%B4%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <url>/silmont2000.github.io/2021/01/27/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91%E5%8E%86%E5%B9%B4%E9%A2%98%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>楼源cc98  好人一生平安ww</p><p>========================================13-14<br>第一部分选择题，7个题10个空，10分<br> 1.音乐制作的步骤<br> 2.音乐处理技术<br> 3.语音信号处理方法<br> 4.特征提取预处理的目的<br> 5.关键帧提取算法<br> 6.镜头相似度提取的特征<br> 7.视频目录构造的过程<br> 第二部分判断题，3个题，错误的话需要说出错误理由，每题两分<br> 1.Nyquist API的功能<br> 2.MFCC<br> 3.Group的定义<br> 第三部分，简答题，6道题，每题7分<br> 1.音乐的四要素及具体定义<br> 2.三种音乐编程方法<br> 3.PITCH提取<br> 4.端点检测算法<br> 5.运动向量搜索的三种方法<br> 6.时序结构图的构造<br> 第四部分，论述题，三个题，共42分<br> 1.音乐检索的现状及未来发展预测<br> 2.说话人识别图，以及改进方法<br> 3.I、P、B，视频压缩方法，主要是P帧</p><p>==========================================14-15<br>考题基本与去年一样，列出不同的或者补充<br> 选择题<br> （谱曲 作词 混音之类的）音乐制作的步骤<br> 音乐处理技术<br> （旋律检测还是节奏检测？）Midomi 公司用了什么技术<br> （频域 时域 实频域 复频域）语音分析的方法有那三个?ACF属于什么技术？<br> 语音处理中高频部分需增益<br> （扯淡题，算法名都是出题老师自己起的吧）哪些不是关键帧提取算法</p><p> 判断题<br> （错，这个应该是在讲OpenAL）Nyquist具有什么什么功能，而且Nyquist根本没有API<br> （错，顺序可能有误，考前记得把顺序背熟）MFCC<br> （不确定）视频组的定义</p><p> 简答题<br> 说话人识别图<br> 语音的短时平稳理论<br> 写出检测运动向量的3种方法<br> （和视频目录构造有什么区别呢？）构建视频时序结构的过程</p><p> 论述题<br> 音乐检索的发展现状以及趋势（材料给出了百度关键字检索，盛大哼唱检索，音乐雷达声纹检索）<br> 描述端点检测算法，不足及改进（给出了一张图，能量和过零，课程材料有）<br> IBP帧是什么，详细解释P帧的压缩过程</p><p>============================================15-16<br>刚考完，来说一说15年的考试题，趁着没忘，回报社会，造福下一届。<br> 题型基本一样：<br> 选择是非都在往届里面了。<br> 简答题有些变化：<br> 音乐的三种高级表现形式是什么？简述特点（节奏、旋律、和弦那个）<br> 语音编码的理论依据是什么？<br> 人对音量强弱的主观感受受哪些因素影响？<br> 论述题：（基本没变）1.结合…分析现在音乐的检索技术的现状和未来展望。<br> 2.画说话人识别流程图，简述流程。并结合各种图表（元音三角形、语图…）分析语音和时间变化等的关系。以及可视化分析。（基本就是让你复述实验，计科班的卷子貌似是分析算法，和实验一致）<br> 3.简述视频目录结构生成的流程。简述每步的功能和具体算法（定性即可）<br> PS：感谢往届学长学姐~</p><p>======================================16-17年<br>16-17树莓的，还热乎着呢【现在这个时间点好像还没到交卷orz】<br>第一部分选择题，7个题10个空，10分<br>1.音乐制作的步骤<br>2.midomi<br>3.语音发声形成过程四个空。具体什么部位影响声音的什么特征<br>4.特征提取预处理的目的<br>5.关键帧提取算法<br>6.镜头相似度提取的特征<br>7.视频目录构造的过程<br>第二部分判断题，3个题，每题4分<br>1.MIDI<br>2.MFCC<br>3.Group的定义<br>第三部分，简答题，6道题，每题6分<br>1.答旋律节奏和声以及这三个的定义<br>2.三种音乐编程方法<br>3.说话人识别过程中的假设和简化<br>4.语图生成的过程<br>5.运动向量搜索的三种方法<br>6.时序结构图的构造<br>第四部分，论述题，三个题，共42分<br>1.实验的五个题目选一个说明算法流程和关键技术<br>2.说话人识别流程，以及结合各种图表（元音三角形、语图…）说明得分低的音频的特点<br>3.I、P、B定义，P帧视频压缩方法</p><p>总之就是语音变化多一点，音乐稍微有点变，视频几乎没变化<br>再次感谢学长学姐们</p><p>=====================================16-17<br>16-17计科题：<br>第一部分不定项选择题或排序题，7个题10个空，10分<br>1.音乐制作的步骤<br>2.提取乐纹可以实现音乐检索<br>3.说话人识别建模采用的方法名称（HMM等）<br>4.预处理中加重高频段<br>5.找出可用于镜头切分的算法<br>6.镜头的时空特征<br>7.视频时序图构造的过程排序<br>第二部分判断题，3个题，每题4分<br>1.OpenAL的功能描述<br>2.短时平稳假设<br>3.镜头、场景的概念辨析<br>第三部分，简答题，6道题，每题6分<br>1.答旋律节奏和声以及这三个的定义<br>2.列举三个音乐编辑软件<br>3.端点检测的方法和伪代码<br>4.人耳对音量的感知受到哪些因素影响<br>5.I\B\P帧的特点和区别<br>6.介绍关键帧提取的三种方法<br>第四部分，论述题，三个题，共42分<br>1.实验的五个题目选一个说明算法流程和关键技术<br>2.说话人识别流程，以及结合各种图表（元音三角形、语图…）说明得分低的音频的特点，论述GMM-MFCC的不足和改进方法<br>3.视频目录构造过程概述，描述重点算法</p><p>=============================================17-18<br>还是要把这个良好的传统延续下去！感谢学长学姐们的回忆！有些细节我记不清楚了，有人来完善一下的吗<br>17-18 数媒<br>选择题<br>1.音乐编程（API）<br>2.MIDI 选个错误的 选项看起来有点陌生<br>3.说话人识别随时间的演变 3空<br>4.预处理中加重高频段<br>5.忘记了 有没有人来补充的<br>6.哪个不是关键帧提取算法<br>7.视频目录构造过程 排序</p><p>判断题<br>1.有板有眼 旋律<br>2.MFCC只能获取说话人的身份信息<br>3.视频压缩和播放顺序一定相同</p><p>简答题<br>1.音乐的软件编程 合成顺序<br>2.音乐三种高级表现形式<br>3.语音时域频域分析的特点和变量<br>4.给出机器能够与人对话图 其中所用到的知识<br>5.时许结构图场景检测<br>6.IPB帧</p><p>论述题<br>1.midomi和sha什么公司 哼唱和乐纹检索区别和技术啥的<br>2.声纹识别和乐纹识别的联系<br>3.渐变镜头的数学模型推导</p><p>总结：音乐基本无变化，视频语音都有变，视频换了新老师后要好好听课（血的教训</p><p>补充：5.(6.?)哪个不是运动向量搜索的方法</p><p>==============================================19-20 数媒<br>选择题<br>1.音乐制作过程排序<br>2.下面什么格式文件里面一定没有人声 选MIDI<br>3.MFCC提取的是什么　只记得两个选项（频谱包络　频谱细节）<br>4.端点检测提取了几个特征，设置几个阈值？（爷不会<br>5.压缩的什么算法需要统计出现概率<br>6.IPB哪个帧压缩比最大<br>7.视频目录构造过程 排序</p><p>判断题<br>1.Nyquist是API吗（原题很长的，重点应该是这个，主语应该是openAL<br>2.语图就是FFT频谱<br>3.视频压缩时损失是DCT变换和量化造成的</p><p>简答题<br>1.举两种音乐制作软件，说出主要功能<br>2.音乐三种高级表现形式<br>3.语音识别种的简化和假设<br>4.画出语音链并且解释<br>5.写出MPEG-2的5种扩展功能<br>6.写出3种运动向量搜索算法。</p><p>论述题<br>1.根据xxx的音乐雷达，xxx的哼唱检索，说出他们的基本算法，然后谈谈将来的发展趋势<br>2.语图和MFCC描述，解释MFCC为什么会变成语音识别的标准<br>3.子块匹配的算法</p><p>我的回忆应该没有错误，毕竟这个时候连卷子都还没收</p><p>音乐一如既往的水，语音有变化给爷整懵了。<br>视频方面，杨洋，算你狠，每年都有新花样。</p><p>补充一下：<br>选择题第三道 选项是波形包络 波形细节 频谱包络 频谱细节<br>论述题第三道：<br>阐述 1）运动补偿算法 2）子块匹配的标准 3）三种子块匹配算法的详细思路（可结合伪代码）</p><p>语音的题感觉应该是每年都会乱出几道（yyc真的会吗？</p>]]></content>
    
    
    <categories>
      
      <category>试题整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字视音频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字视音频-视频</title>
    <link href="/silmont2000.github.io/2021/01/26/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91-%E8%A7%86%E9%A2%91/"/>
    <url>/silmont2000.github.io/2021/01/26/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91-%E8%A7%86%E9%A2%91/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="为啥"><a href="#为啥" class="headerlink" title="为啥"></a>为啥</h1><h2 id="为什么要搞压缩"><a href="#为什么要搞压缩" class="headerlink" title="为什么要搞压缩"></a>为什么要搞压缩</h2><ol><li>不压缩就太大了</li><li>不压缩可能会引起一些网络通信问题</li><li>HDTV计算：每秒30帧*每帧1920*1080像素*每个像素每个通道8比特*3个通道=1492992000bps，太大了</li><li>信道的最大信息速率才19.2Mb，用18来算就是要达到83:1的压缩比才行</li></ol><h2 id="为什么视频这么大"><a href="#为什么视频这么大" class="headerlink" title="为什么视频这么大"></a>为什么视频这么大</h2><ol><li><p>数据中的统计冗余或结构（空间、时间、光谱）</p></li><li><p>感知无关信息的存在</p><p><strong>所以，我们要把冗余空间信息·冗余时间信息·颜色信息扔掉。</strong></p><ol><li><p>冗余空间信息：SIF：288*352</p></li><li><p>颜色：对亮度最敏感，颜色不那么重要、RGB编码冗余，411采样YUV</p></li><li><p>计算：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127083240759.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127083240759"></p></li><li><p>可行性：视频数据的时间冗余、静态图像本身的冗余</p></li></ol></li></ol><h1 id="视频压缩"><a href="#视频压缩" class="headerlink" title="视频压缩"></a>视频压缩</h1><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127083535086.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127083535086"></p><p>输入-压缩编码-存储或通过网络传递-解码解压-输出</p><h2 id="无损压缩"><a href="#无损压缩" class="headerlink" title="无损压缩"></a>无损压缩</h2><h3 id="游程编码-无损"><a href="#游程编码-无损" class="headerlink" title="游程编码-无损"></a>游程编码-无损</h3><p>数字写前面。</p><p>Example:</p><p>– Original data:</p><p>WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWW</p><p>WWWWWWWWWWWBWWWWWWWWWWWWWW</p><p>– Its run-length code:</p><p>12W1B12W3B24W1B14W</p><h3 id="预测编码-无损"><a href="#预测编码-无损" class="headerlink" title="预测编码-无损"></a>预测编码-无损</h3><p>重建=预测+误差，存误差。预测公式可以是每个都减左边那个，然后用自适应算数编码压缩误差数据。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127084151206.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127084151206"></p><p>对视频最简单的编码：按时间顺序减去图像-编码残差，称为：</p><h3 id="差分编码-无损"><a href="#差分编码-无损" class="headerlink" title="差分编码-无损"></a>差分编码-无损</h3><p>对变化快的无能为力</p><h3 id="哈弗曼编码-无损"><a href="#哈弗曼编码-无损" class="headerlink" title="哈弗曼编码-无损"></a>哈弗曼编码-无损</h3><p><a href="https://blog.csdn.net/FX677588/article/details/70767446" target="_blank" rel="noopener">https://blog.csdn.net/FX677588/article/details/70767446</a></p><p>更经常发生的符号将具有较短的代码·</p><p>过程：-根据发生概率对符号进行排序-将最小概率符号组合成一个复合符号，概率等于相应符号概率之和-对剩余符号重复过程-从代码的二叉树表示中提取代码</p><p>时刻调整</p><h2 id="有损压缩"><a href="#有损压缩" class="headerlink" title="有损压缩"></a>有损压缩</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>根据信息理论的原理-编码向量比编码标量更有效-需要将连续的样本从输入到向量中分组。</p><p>让X=样本的x1，x2，…，xkbe向量，相邻之间存在数量相关性。 如果Y是输入向量的线性变换T的结果，其分量的相关性要小得多，那么Y可以比X更有效地编码。 </p><p><strong>原因：相关性越大，冗余越多。</strong></p><p>转换T本身不压缩任何数据。 压缩来自Y组件的处理和量化。 DCT是一种广泛使用的变换，它可以对输入信号进行去相关。</p><p>傅里叶变换：</p><p>余弦基是正交的，相乘=0，自己相乘=1</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127100609534.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127100609534"></p><p>保留前6个参数就可以很好的还原了。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127101823300.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127101823300"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127101948898.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127101948898"></p><h3 id="二维DCT"><a href="#二维DCT" class="headerlink" title="二维DCT"></a>二维DCT</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127102227213.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127102227213"></p><p>过程：先把图片8*8分块然后用公式变换：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127102945705.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127102945705"></p><p>简化：分解成2个一维DCT</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127103246247.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127103246247"></p><p>之后对DCT结果进行量化，大量归零，再做IDCT</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127103347803.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127103347803"></p><p>这里的游程编码是看每个数前面有几个0，最后的一大堆0都可以不编码了</p><p><strong>应用：数字水印</strong></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127103545238.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127103545238"></p><h1 id="基于运动补偿的视频压缩"><a href="#基于运动补偿的视频压缩" class="headerlink" title="基于运动补偿的视频压缩"></a>基于运动补偿的视频压缩</h1><p>视频是：时间维度上的图像序列</p><p>相邻帧之间的差异主要来自：相机或物体的运动</p><p>运动图片编码原则：减少空间冗余和时间冗余</p><p>​    -帧内：类似于JPEG</p><p>​    -帧间：基于运动预测和补偿</p><p>​        ·P帧、B帧·多帧引用H.264</p><h2 id="运动补偿的基本思路"><a href="#运动补偿的基本思路" class="headerlink" title="运动补偿的基本思路"></a>运动补偿的基本思路</h2><p>把移动图像划分为静态背景和移动前景。首先用基础的JPEG编码第一帧，作为参考帧，之后的每一帧图像都和参考帧做对比，相同的块用特殊编码标记，对不同的块才使用普通的编码。</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>检测出图像的运动（运动矢量搜索）</li><li>基于运动补偿预测下一帧</li><li>推导出误差</li></ol><p><strong>运动补偿是在宏块级别执行的。</strong> </p><p>N*N图像块：默认情况下，亮度图像的N=16。 对于色度图像，如果采用4：2：0色子采样，则N=8</p><p>目前的图像帧称为目标帧。 在目标框架中的宏块与以前和（或)未来框架中最相似的宏块(称为参考框架)之间寻找匹配)）。 在前向预测中，参考框架被认为是以前的框架。 <strong>参考宏块向目标宏块的位移称为运动矢量MV</strong>。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127173823343.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127173823343"></p><p>搜索一般会限定在一个范围内，如上图的-p，p之间。</p><h3 id="运动向量检索"><a href="#运动向量检索" class="headerlink" title="运动向量检索"></a>运动向量检索</h3><p><strong>匹配原则</strong></p><p>设宏块的大小为n*n，宏块的中心为P。以目标帧中正在查找的像素位置为中心，在参考帧的[-p,p]范围内移动宏块，找距离最小的宏块。</p><p><strong>顺序搜索</strong></p><p>顺序搜索参考框架中的整个(2p+1)x(2p+1)窗口（也称为完全搜索）。</p><p>将以窗口内每个位置为中心的宏块与目标帧中逐像素的宏块进行比较，然后计算它们和目标帧的MAD。 提供最小MAD的向量(i，j)被指定为目标帧中宏块的MV(u，v)。 顺序搜索方法是非常昂贵的-假设每个像素比较需要三个操作（减法、绝对值、加法），获得单个宏块的运动向量的成本是(2p+1)*(2p+1)*N2*3=&gt;O(p2N2)</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127174651308.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127174651308"></p><h3 id="对数搜索"><a href="#对数搜索" class="headerlink" title="对数搜索"></a>对数搜索</h3><p>一个代价更小的版本，这是次优的，但通常仍然有效。</p><p>运动矢量的二维对数搜索过程需要几次迭代，类似于二进制搜索：-如下图所示，搜索窗口中最初只有9个位置被用作基于MAD的搜索的种子；它们被标记为“1’。 在产生最小MAD的位置之后，新搜索区域的中心被移动到它，步长（“偏移”）被缩小到一半。 在下一次迭代中，9个新位置被标记为“2”等等。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127175013976.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127175013976"></p><h3 id="分层搜索"><a href="#分层搜索" class="headerlink" title="分层搜索"></a>分层搜索</h3><p>可以受益于分层（多分辨率）方法，在这种方法中，可以从分辨率显著降低的图像中获得运动矢量的初始估计。 三级分层搜索，其中原始图像处于0级，第1级和第2级的图像是通过从以前的级别向下采样2倍获得的，初始搜索是在第2级进行的。 由于宏块的大小较小，p也可以按比例减小，因此所需的操作次数大大减少。需要指出，每一层都是对数搜索。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127175611940.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127175611940"></p><h1 id="H-261"><a href="#H-261" class="headerlink" title="H.261"></a>H.261</h1><p>H.261：早期的数字视频压缩标准（成立于1990年），它的基于MC（运动补偿）的压缩原则保留在后来的所有视频压缩标准中。-该标准是为ISDN上的录像机、视频会议和其他视听服务设计的。-视频编解码器支持比特率p*64kbps，其中P范围从1到30(因此也称为P*64)。-要求视频编码器的延迟小于150ms，以便视频可以用于实时双向视频会议。</p><p>定义了两种类型的图像帧：帧内(I帧)和帧间(P帧)：</p><p>-I帧被视为独立的图像。 在每个I帧中应用类似于JPEG的变换编码方法，因此“内部”。 </p><p>-P帧不是独立的：用前向预测编码方法编码(允许从以前的P帧进行预测，而不仅仅是从以前的I帧进行预测)。 P帧编码包括时间冗余去除，而I帧编码只执行空间冗余去除。 </p><p>-H.261中的运动矢量总是以全像素为单位测量，它们的搜索范围为±15px。 为了避免编码错误的传播，I帧通常在视频的每一秒发送几次。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127180106016.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127180106016"></p><h2 id="对I帧编码"><a href="#对I帧编码" class="headerlink" title="对I帧编码"></a>对I帧编码</h2><p>I帧的图像块是16*16，那么在YUV下采样后就会得到8*8的U和V块。对这些块进行DCT，然后参数量化、zigzag最后哈夫曼编码（熵编码）。</p><h2 id="对P帧编码"><a href="#对P帧编码" class="headerlink" title="对P帧编码"></a>对P帧编码</h2><p>P帧中的每一个宏块，都能找到一个运动向量。那么也就能得到一个误差块，对误差快哈弗曼编码。</p><p>P帧编码不同的宏块（而不是目标宏块本身）。 有时无法找到良好的匹配，即预测误差超过一定的可接受水平。 -然后对MB本身进行编码(将其视为内部MB)，在这种情况下，它被称为非运动补偿MB。 对于运动向量，差分MVD被发送到熵编码：·MVD=MV预测−MV真正。</p><h2 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h2><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127181113811.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127181113811"></p><p>DC：直流系数,是第一个系数，剩下的都是交流系数</p><h2 id="H-261比特流语法"><a href="#H-261比特流语法" class="headerlink" title="H.261比特流语法"></a>H.261比特流语法</h2><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127181836563.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127181836563"></p><h3 id="PSC、TR"><a href="#PSC、TR" class="headerlink" title="PSC、TR"></a>PSC、TR</h3><p>picture start code:图片开始界限</p><p>timporal reference: 时间戳</p><h3 id="GOB"><a href="#GOB" class="headerlink" title="GOB"></a>GOB</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127182424097.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127182424097"></p><p>group of block，一个GOB里面有11*3个宏块。计算题如下：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127182821326.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127182821326"></p><p>每个GOB层有GBSC（start code）标记开始，GN标记数目（number），如果网络错误导致一些错误或一些位的丢失，H.261视频可以在下一个可识别的GOB中恢复和重新同步。-GQ表示GOB中使用的量化器，除非它被后续的MQ（宏块的量化器）覆盖。</p><h3 id="MB"><a href="#MB" class="headerlink" title="MB"></a>MB</h3><p>macroblock。address标记MB在GOB中的位置（不是图片中的位置！！），MQ是macroblock的量化器。每个MB包含6个16*16的block。</p><h3 id="B"><a href="#B" class="headerlink" title="B"></a>B</h3><p>对于每个16x16块，比特流以直流分量开始，然后是zerorun(Run)的长度对和AC的后续非零值(Level)，最后是块的结束(EOB)代码。 run范围为[0；63]。 level反映量化值-它的范围是[−127，127]，并且不是0.</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127190244117.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127190244117"></p><h1 id="MPEG"><a href="#MPEG" class="headerlink" title="MPEG"></a>MPEG</h1><p>– Moving Pictures Experts Group运动图像专家组</p><p>1998</p><p>从1988年的25名专家到大约200家公司的350多名专家</p><h2 id="MPEG1"><a href="#MPEG1" class="headerlink" title="MPEG1"></a>MPEG1</h2><p>CD/VCD 最高1.5Mbps，1.2M是视频流，256K是音频流。</p><p>五个部分：系统Systems（11172-1），视频Video（11172-2），Audio，Conformance testing （一致性测试），及软件模拟Software Simulation。</p><p>源输入格式-只支持<strong>非间隔视频</strong></p><p>-352*240为NTSC在30fps</p><p>-352*288为PAL在25fps</p><p>-4：2：0色度次采样</p><p>在H.261中，只是前向预测，而MPEG4前后都用上：双向运动补偿，基于B帧</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127191137953.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127191137953"></p><p>基于MC的B帧编码思想是：-来自B帧的每个MB将有最多两个运动向量(MV)（一个来自前向，一个来自后向预测）。 -如果匹配成功，则将发送两个MV，并对两个相应的匹配MBS进行平均，然后与目标MB进行比较，以产生预测误差。 -如果一个可接受的匹配只能在其中一个参考框架中找到，那么从正向预测或反向预测中只使用一个MV及其相应的MB.这两种MB都还是会产生差分，对16的差分DCT变换和编码。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127192200275.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127192200275"></p><p><strong>注意：传递顺序</strong>：IPBBPBBIBB，也就是先编码一个I，后面三帧三帧都反过来。</p><h3 id="和H-261比较"><a href="#和H-261比较" class="headerlink" title="和H.261比较"></a>和H.261比较</h3><p>注意几个标准格式。</p><p>352是44个8。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127192635916.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127192635916"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127193213505.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127193213505"></p><p>MPEG-1允许运动矢量具有亚像素精度（1/2像素）。 H.263的“双线性插值”技术可用于在半像素位置生成所需的值。 </p><p>与H.261中运动矢量的最大正负15像素范围相比，MPEG-1支持半像素精度的[−512，511.5]范围，以及全像素精度运动矢量的[−1,024，1,023。 </p><p>MPEG-1位流允许随机访问-由GOP层完成，其中每个GOP被时间编码。</p><p>P帧(20)的压缩率远远大于I帧(7)，是因为时间的冗余消除了。因为双向预测的优势，还有B的最低优先级，而B帧(50)比P帧还小。</p><p>mpeg1的每一张可以分成几片，分别独立编码。</p><h3 id="比特流"><a href="#比特流" class="headerlink" title="比特流"></a>比特流</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127193932552.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127193932552"></p><p>H261是图像-GOB-MB-B-(RUN,LEVEL)</p><p>picture就是frame，GOP存的IPB之类的IBBPBBPBBPBB，12帧。slice是GOB，是block的集合。所以MPEG后面还是GOB(slice)-MB-B的结构，前面加了GOP和P。</p><p>H.261给出的是图像分层，MPEG是视频分层。</p><p><a href="https://www.cnblogs.com/samyboy/p/5478458.html" target="_blank" rel="noopener">https://www.cnblogs.com/samyboy/p/5478458.html</a></p><p>清华课本：</p><p><a href="https://books.google.com.hk/books?id=adKjHT5zZekC&amp;pg=PA133&amp;lpg=PA133&amp;dq=%E5%9C%BA%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9C%BA%E9%A2%84%E6%B5%8B&amp;source=bl&amp;ots=RBSauybRjc&amp;sig=ACfU3U2-dm4WOpJjeFCfCpb0o_vFvA0jNw&amp;hl=zh-CN&amp;sa=X&amp;ved=2ahUKEwji2L3th7zuAhWMBKYKHW0uDcIQ6AEwB3oECAYQAg#v=onepage&amp;q&amp;f=false" target="_blank" rel="noopener">https://books.google.com.hk/books?id=adKjHT5zZekC&amp;pg=PA133&amp;lpg=PA133&amp;dq=%E5%9C%BA%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9C%BA%E9%A2%84%E6%B5%8B&amp;source=bl&amp;ots=RBSauybRjc&amp;sig=ACfU3U2-dm4WOpJjeFCfCpb0o_vFvA0jNw&amp;hl=zh-CN&amp;sa=X&amp;ved=2ahUKEwji2L3th7zuAhWMBKYKHW0uDcIQ6AEwB3oECAYQAg#v=onepage&amp;q&amp;f=false</a></p><h2 id="MPEG2"><a href="#MPEG2" class="headerlink" title="MPEG2"></a>MPEG2</h2><p>开始于1990年，93完成，为更高质量的视频比特率超过4Mbps。 满足数字电视/HDTV的压缩和比特率要求。不同的分辨率，不同的压缩复杂性。 广泛接受地面、卫星、有线网络其他应用交互式电视、DVD（数字视频光盘或数字通用光盘）。</p><p>MPEG3原本是为了更高比特率下的高清数字电视做准备的，被融合进了MPEG2中。所以没有MPEG3。</p><p>规定了七个配置属性，每个配置可以最多有4个级别。</p><h3 id="支持交错视频"><a href="#支持交错视频" class="headerlink" title="支持交错视频"></a>支持交错视频</h3><p>支持交错视频·MPEG-2必须支持交错视频，因为这是数字广播电视和HDTV的选择之一。 在交错视频中，每个帧由两个字段组成，称为顶部字段和底部字段。 在帧图中，来自两个字段的所有扫描线被交织成一个帧，然后被划分为16*16宏块，并使用MC进行编码。 如果每个字段被视为一个单独的图片，那么它被称为字段图片。</p><h3 id="五种预测模型"><a href="#五种预测模型" class="headerlink" title="五种预测模型"></a>五种预测模型</h3><p><strong>帧图像的帧预测</strong></p><p>与MPEG1运动补偿相同，适用于包含慢和中等物体的视频</p><p><strong>场图像的场预测</strong></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127195553121.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127195553121"></p><p><strong>帧图像的场预测</strong></p><p>分别处理顶场和底场</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127200247490.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127200247490"></p><p><strong>16x8MC的场图</strong></p><p>对于运动是快速和不规则的</p><p><strong>双基预测</strong></p><p>MV用于导出计算的运动矢量CV</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127200612197.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127200612197"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127201307895.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127201307895"></p><h3 id="可伸缩性"><a href="#可伸缩性" class="headerlink" title="可伸缩性"></a>可伸缩性</h3><p>MPEG-2可伸缩编码：可以定义一个基础层和一个或多个增强层——也称为分层编码。</p><p> 基础层可以独立编码、传输和解码，以获得基本的视频质量。 增强层的编码和解码取决于底层或前一个增强层。 </p><p>基础层：直流分量？</p><p>可缩放编码对于在具有以下特性的网络上传输的MPEG-2视频特别有用：-具有非常不同比特率的网络。 具有可变比特率(VBR)信道的网络。 有嘈杂连接的网络。</p><ol><li><p><strong>信噪比可伸缩性增强层提供了更高的信噪比。</strong></p><p>信噪比可伸缩性：指基层上的增强/细化，以改善SNR。 MPEG-2信噪比可伸缩编码器将在两层产生输出比特流Bits_base和Bits_enhance：</p><p>在基层上，对DCT系数进行了粗量化，导致比特较少，视频质量相对较低。</p><p>然后对粗量化的DCT系数进行反量化(Q−1)，并将其馈送到增强层，与原DCT系数进行比较。</p><p>它们的差异被精细量化以产生DCT系数细化，在VLC之后，它成为称为Bits_enhance的比特流。</p></li><li><p><strong>空间可伸缩性-增强层提供了更高的空间分辨率。</strong></p></li><li><p><strong>时间可伸缩性-增强层促进了更高的帧速率。</strong></p><p>输入视频被暂时地解复用成两块，每个部分携带原始帧速率的一半。 基础层编码器对自己的输入视频执行正常的单层编码过程，并产生输出比特流Bits_base。 增强层匹配MB的预测可以通过两种方式获得：<strong>-层间MC（运动补偿）预测-组合MC预测和层间MC预测。</strong></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127203301895.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127203301895"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127203354769.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127203354769"></p></li><li><p><strong>混合可伸缩性-上述三个可伸缩性中的任意两个的组合。</strong></p><p>上述三种可伸缩性中的任何两种都可以组合成混合可伸缩性：1。 时空混合可伸缩性。 2. 信噪比和空间混合可伸缩性。 3. 信噪比和时间混合可伸缩性。 通常采用三层混合编码器，由基层、增强层1和增强层2组成。</p></li><li><p>数据分区-量化的DCT系数被分割成分区。</p><p>基本分区包含低频DCT系数，增强分区包含高频DCT系数。 严格地说，数据分区不是分层编码，因为单一的视频数据流被简单地划分，在生成增强分区时不再依赖于基本分区。 用于噪声信道上的传输和渐进传输。</p></li></ol><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127202958989.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127202958989"></p><h3 id="和MPEG1的区别"><a href="#和MPEG1的区别" class="headerlink" title="和MPEG1的区别"></a>和MPEG1的区别</h3><p>除了程序流之外，还向MPEG-2位流添加了传输流。 </p><p>支持4：2：2和4：4：4的色度次采样。 </p><p>更受限制的切片结构：MPEG-2切片必须在同一宏块行中开始和结束。 换句话说，图片的左边缘总是启动一个新的切片，MPEG-2中最长的切片只能有一行宏块。 </p><p>更灵活的视频格式：它支持DVD、ATV和HDTV定义的各种图像分辨率。</p><p>非线性量化-允许两种类型的尺度：1。 对于第一种类型，比例尺与MPEG-1中的比例尺相同，是[1,31]之间的整数，scale_i=i。 2. 对于第二种类型，存在非线性关系，即scale不是i。</p><h2 id="MPEG4"><a href="#MPEG4" class="headerlink" title="MPEG4"></a>MPEG4</h2><p>较新的标准。 除了压缩之外，还非常关注用户交互的问题。 MPEG-4在采用一种新的基于对象的编码方面与它的前辈不同：-提供更高的压缩比，也有利于数字视频的合成、操作、索引和检索。 任意形状编码-静态纹理编码-人脸对象编码和动画-身体对象编码和动画-MPEG-4视频的比特率现在涵盖了5kbps到10Mbps之间的很大范围。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127204014325.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127204014325"></p><p>MPEG-4是一个全新的标准：(a)合成媒体对象以创建理想的视听场景。 (b)对这些媒体数据实体的码流进行复用和同步，以便能够以保证服务质量(QoS)进行传输。 (c)在接收端与视听场景互动—-提供了一个先进编码模块和音频和视频压缩算法工具箱。</p><h3 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127204218867.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127204218867"></p><ol><li>视频对象序列(VS)-提供完整的MPEG-4视觉场景，其中可能包含二维或三维自然或合成对象。 </li><li>视频对象(VO)-场景中的特定对象，它可以是与场景的对象或背景相对应的任意（非矩形）形状。</li><li>视频对象层(VOL)-促进了一种支持（多层）可伸缩编码的方法。 一个VO可以在可伸缩编码下有多个VOL，也可以在不可伸缩编码下有一个VOL</li><li>视频对象平面组(GOV)-将视频对象平面组在一起（可选级别）。</li><li>视频对象平面(VOP)-特定时刻VO的快照。</li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127204942935.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127204942935"></p><h1 id="镜头检测-关键帧提取"><a href="#镜头检测-关键帧提取" class="headerlink" title="镜头检测 关键帧提取"></a>镜头检测 关键帧提取</h1><p>目录结构：相似镜头聚类</p><p>镜头边缘分类：硬切：切是从一个场景到下一个场景的瞬时过渡。 淡出：淡出是场景与恒定图像（淡出)或恒定图像与场景(淡入)之间的逐渐过渡）。 溶解：溶解是从一个场景逐渐过渡到另一个场景，其中第一个场景消失，第二个场景消失。 另一个常见的场景中断是擦除，其中一行移动到屏幕上，新的场景出现在行后面。</p><p>聚类的优点：<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127205504203.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127205504203"></p><h1 id="镜头结构化"><a href="#镜头结构化" class="headerlink" title="镜头结构化"></a>镜头结构化</h1><p><strong>结构化生成</strong></p><p>镜头切分，相似镜头成组，镜头组之间的联系</p><p>对MPEG视频文件进行解码，得到视频图像帧。通过镜头分割和关键帧提取，得到镜头关键帧。对关键帧进行聚类分析，生成视频类，接着构造时序结构图，添加入口出口。</p><p><strong>Table of Video Content：TOC</strong></p><p><a href="https://link.springer.com/article/10.1007/s005300050138" target="_blank" rel="noopener">https://link.springer.com/article/10.1007/s005300050138</a></p><p>（需要校网认证）</p><p>可以直接读第三页的<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127211301271.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127211301271" style="zoom:67%;">，下面是关键部分的翻译。</p><p>能读原文还是读原文吧。</p><p>为了向用户提供对视频的更好访问，需要在语义级别上构建视频ToC。现有的场景级视频ToC构建方法可以分为基于模型和通用两大类。</p><h2 id="基于模型"><a href="#基于模型" class="headerlink" title="基于模型"></a>基于模型</h2><p>在基于模型的方法中，首先构建特定应用程序或域的先验模型。这样的模型指定了场景边界特征，基于该特征可以将非结构化视频流抽象为结构化表示。 Swangberg等人提出了这种方法的理论框架。在[14]中，它已经成功实现了许多有趣的应用，包括新闻视频解析[20]和电视足球节目解析[7]。由于此方法基于特定的应用程序模型，因此通常可以实现较高的准确性。但是，此方法的缺点之一是，对于每个应用程序，都需要先构建模型，然后才能进行解析过程。建模过程很耗时，并且需要良好的领域知识和经验。</p><h2 id="基于场景（通用）"><a href="#基于场景（通用）" class="headerlink" title="基于场景（通用）"></a>基于场景（通用）</h2><p>用于基于场景的视频ToC构造的另一种方法不需要这种显式的域模型。这种方法的三项开创性著作来自法国的IRIT [1]，普林斯顿大学和IBM [4，16-18]和东芝公司[2]。在[1]中，Aigrain等。提出一种基于多峰规则的方法。他们首先确定由媒体内容给出的本地（及时）规则；在[4，17]中，首先将视频流分割为镜头。然后，使用时间约束聚类将视觉上和时间上相邻的镜头构造为聚类。最后，基于聚类建立了场景过渡图（STG），并确定了切割边缘以构建场景结构。在[2]中，代替使用STG，辅助工具将交替模式的镜头分组为场景（它们称为脚本）。然后创建视频结构的2D表示，垂直显示场景，水平显示关键帧。基于场景的视频ToC相对于其他方法的优点总结如下：–其他方法产生的条目太多，无法有效地呈现镜头，关键帧甚至组仅传达物理上的不连续性，而场景传达语义上的不连续性，例如场景在时间和/或位置上的变化。</p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><p>它具有四个主要模块：镜头边界检测和关键帧提取，时空特征提取，时间自适应分组以及场景结构构建。我们在下面依次讨论每个模块。</p><h3 id="镜头检测和关键帧提取"><a href="#镜头检测和关键帧提取" class="headerlink" title="镜头检测和关键帧提取"></a>镜头检测和关键帧提取</h3><p>采用特征突变的地方作为边缘；为了速度，选择镜头的开始和结束作为2个关键帧。</p><h3 id="时空特征提取"><a href="#时空特征提取" class="headerlink" title="时空特征提取"></a>时空特征提取</h3><p>提取镜头的特征来表征时间信息：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127211617748.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127211617748"></p><p>其中Acti和Ni是第i个镜头的活动性度量和帧数； Diffk,k-1是帧k和k-1之间的颜色直方图差异； Hist（k）和Hist（k-1）是帧kandk-1的颜色直方图； Dist（）是直方图之间的距离算法<strong>（这里用的是直方图求交）</strong>。在本文中，我们采用区间内距离。所使用的颜色直方图是沿HSV颜色空间中的H和S的二维直方图。我们忽略了V分量，因为它对光照条件的鲁棒性较弱。在关键帧级别，提取了视觉特征以表征空间信息。在当前算法中，开始和结束帧的颜色直方图用作镜头的视觉特征：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127211905365.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127211905365"></p><p>到这里，一个镜头就可以被表示成：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127211955881.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127211955881"></p><p>即：开始帧，结束帧，活动值（时间特征），开始直方图，结束直方图</p><h3 id="时间自适应分组"><a href="#时间自适应分组" class="headerlink" title="时间自适应分组"></a>时间自适应分组</h3><p>在构造场景结构之前，先创建一个中间实体组是很方便的，以利于后续过程。分组的目的是将相似的镜头归为一组，因为相似的镜头很有可能进入同一场景。若要使镜头相似，应满足以下属性。</p><p>–视觉相似度相似的镜头应在视觉上相似。也就是说，它们应该具有相似的空间（Hist（bi）和Hist（ei））和时间（Acti）特征。</p><p>–时间局部性相似的镜头在时间上应该彼此接近。例如，视觉上相似的镜头，如果时间上彼此相距甚远，则很少属于同一场景，因此<strong>不属于同一组</strong>。</p><p>Yeung等人提出了一种用于时间限制的聚类方法来对镜头进行分组，其中如果两个镜头的时间差<strong>大于预定义的阈值</strong>，则将两个镜头之间的相似度设置为0。我们基于上述相似镜头的两个属性<strong>（视觉相似、时间相近）</strong>，提出了一种更通用的<strong>时间自适应分组</strong>方法。在我们提出的方法中，<strong>两个镜头的相似性是视觉相似性的增加函数和帧差异的减小函数。</strong>规定 i 和 j 是要确定相似性的两个镜头的索引，其中镜头j&gt;镜头i。镜头相似度的计算描述如下。</p><h4 id="色彩相似度"><a href="#色彩相似度" class="headerlink" title="色彩相似度"></a>色彩相似度</h4><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127212525042.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127212525042"><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127213528812.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127213528812"></p><ol><li>色彩相似度（空间特征）：对任意两个镜头的开始结尾做4个计算，相似度是1-$Diff_{x,y}$,其中x&gt;y。</li><li>时间引力：baseLength是所有镜头的平均长度乘以一个常数MULTIPLE，用来控制时间吸引力下降的速度。实验中常数=10最好。这里就能知道两个帧之间越近，attr越大；离得越远就越小；如果比平均镜头长度还长，那么直接就是负的了。取了max之后就是0.</li><li>将原始相似性转换为适应时间的相似性，从而捕获视觉相似性和时间局部性。其实就是混合，四个组合的时间吸引力和色彩相似度相乘，然后取最大值作为两帧之间的时间自适应颜色度。</li></ol><h4 id="运动相似度"><a href="#运动相似度" class="headerlink" title="运动相似度"></a>运动相似度</h4><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127213835805.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127213835805"></p><p>$Attr_{center}$是I,J两个镜头中间帧之间的时间引力。乘以两个镜头的活动值的差。</p><h4 id="加权和"><a href="#加权和" class="headerlink" title="加权和"></a>加权和</h4><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127215025162.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127215025162"></p><h3 id="场景结构构建"><a href="#场景结构构建" class="headerlink" title="场景结构构建"></a>场景结构构建</h3><p>相似的镜头会被分组，但是如果非相似的镜头之间存在密切的关联，即使是非相似的镜头也可以被分组为一个场景。视频是一种顺序媒体。因此，即使两个或多个过程同时在视频中进行，它们也必须顺序显示，一个接一个地显示。这在电影中很常见。例如，当两个人互相交谈时，即使两个人都参与了对话，电影也会在这两个人之间来回切换。在此示例中，显然存在两个组，一个组对应于人A，另一组对应于人B。尽管这两个组是非相似组，但它们在语义上相关并且构成一个场景。</p><p>我们建议使用一种智能的无监督聚类技术来执行场景结构构建。这可以通过两步过程来实现：</p><p>–使用时间自适应分组将相似的镜头收集到组中</p><p>–将语义相关的组合并到一个统一的场景中。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127215805567.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127215805567"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127220108842.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127220108842"></p><h5 id="cnm，老子看不懂了"><a href="#cnm，老子看不懂了" class="headerlink" title="cnm，老子看不懂了"></a>cnm，老子看不懂了</h5><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127220720115.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127220720115"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127220340917.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127220340917"></p><h1 id="视频时序结构图构造"><a href="#视频时序结构图构造" class="headerlink" title="视频时序结构图构造"></a>视频时序结构图构造</h1><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127221500810.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127221500810"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127221958438.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127221958438"></p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>video</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字视音频-音乐</title>
    <link href="/silmont2000.github.io/2021/01/26/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91-%E9%9F%B3%E4%B9%90/"/>
    <url>/silmont2000.github.io/2021/01/26/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91-%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h1><h2 id="数字音乐处理"><a href="#数字音乐处理" class="headerlink" title="数字音乐处理"></a>数字音乐处理</h2><p>数字音乐处理是指以数字化方式进行音乐合成、分析、检索等一系列处理过程的统称，它主要依靠计算机为中心进行操作处理，所以又称它为“计算机音乐”。</p><p>音乐艺术与信息科学、软件工程的结合。</p><h2 id="产业链和发展趋势"><a href="#产业链和发展趋势" class="headerlink" title="产业链和发展趋势"></a>产业链和发展趋势</h2><p>生产：大众化创作：编曲、合成、混音</p><p>消费：在线收听、互动娱乐：节奏控制、音准评分</p><p>流通：互联网、移动网传播：音乐搜索与推送(音乐社区，last.fm)</p><h1 id="乱七八糟概念"><a href="#乱七八糟概念" class="headerlink" title="乱七八糟概念"></a>乱七八糟概念</h1><p>音乐基本要素：音高、音色、音强、音长</p><p>音高：发音物体的振动频率</p><p>音色：发音物体产生的谐波所决定的，性质、形状不同，谐波也不同，音色也不同。</p><p>音长：振动时间的长短</p><p>音强：振幅的大小</p><p>mutex：乐谱排版语言</p><p>数字乐器接口（Music Instrument Digital Interface，MIDI）：用于电子设备，它是发声指令而不是具体音频信号，不同的设备对MIDI指令的解释有很大差异。</p><h2 id="音乐合成"><a href="#音乐合成" class="headerlink" title="音乐合成"></a>音乐合成</h2><p>软件：Overture，SONAR,AU</p><p>语言：Niquist，OpenAL，Matlab，Flash Action Script</p><p>overture：打谱软件，边听边改</p><p>SONAR：创作声音和音乐的专业工具软件</p><p>Niquist：Nyquist是一个基于LISP用于声音合成的语言，由CMU的Roger B. Dannenberg 教授带领开发。官方URL：<a href="http://www.cs.cmu.edu/~music/music.software.html" target="_blank" rel="noopener">http://www.cs.cmu.edu/~music/music.software.html</a><br>适用平台：Windows、Unix、Linux、Mac OS</p><p>Nyquist是一种声音合成和合成语言，提供Lisp语法，命令式语言语法（SAL）和强大的集成开发环境。Nyquist是基于函数式编程的优雅而强大的系统。</p><pre><code>(play (osc 69))                        播放单音节(play (scale 0.1 (osc 69)))            调节音量(play (stretch 0.1 (osc 69)))        调节播放时间(play (seq (osc 50) (osc 69)))        连续播放(play (sim (osc 69) (osc 50)))        声音叠加(play (sim (at 0.0 (note c4 0.2))   声音分时叠加            (at 0.5 (note c1 0.2))            (at 1.0 (note c4 0.2))    ))    </code></pre><p>OpenAL:介绍：自由软件界的跨平台音效API，面向多通道三维位置音效制作， API 风格模仿自 OpenGL。功能：在来源物体、音效缓冲和收听者中编码；应用：音乐制作、大型的3D游戏、大型电影</p><p>更倾向于音乐艺术与软件工程的结合<br>创意<br>协作<br>软件/语言的使用</p><h2 id="音乐分析"><a href="#音乐分析" class="headerlink" title="音乐分析"></a>音乐分析</h2><p>旋律、节奏、和声</p><p>旋律：是指长短、强弱、高低不同的一组乐音有组织的进行。旋律又是曲调，它是音乐的基础和灵魂。</p><p>节奏：节奏是指组织起来的乐音的长短关系，它是音乐的骨架。</p><p>节拍：时长相等的强拍和弱拍有规律的交替出现</p><p>和声：包括和弦和和弦进行。</p><p>和弦：三个或三个以上按一定法则在纵向重叠形成的音响组合</p><p>和弦进行：和弦的横向组织</p><p>节奏识别：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127225944540.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127225944540"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230012844.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230012844"></p><p>旋律识别-音准评分：</p><p>旋律评分模块：求取演唱者演唱旋律，并与歌曲原旋律对比，匹配越好给分越高<br>抢拍与慢拍分析模块：分析演唱者抢拍与慢拍情况，并酌情给予减分<br>节奏分析模块：分析演唱者的节奏感是否与歌曲的节奏一致，节奏感越好给分越多<br>演唱情绪分析模块：分析演唱者演唱的情绪，如果演唱者演唱的情绪与歌曲的意境相符，会有相应的加分<br>声音圆润饱满度分析模块：分析演唱者演唱的声音是否圆润，是否饱满，越圆润越饱满给分越多<br>语音识别模块：分析演唱者演唱的歌词是否与歌曲的歌词相符，错误率越少给分赵多</p><h2 id="音乐检索"><a href="#音乐检索" class="headerlink" title="音乐检索"></a>音乐检索</h2><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230404471.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230404471"></p><p>乐纹：</p><p>乐纹的概念：可以代表一段音乐重要声学特征的基于内容的紧致数字签名</p><p>乐纹的主要特性</p><p>鲁棒性：指未知音频能在经受比较严重的音频信号处理后仍然能够被识别出来</p><p>区分性：即不同歌曲之间的指纹应该具有较大的差异，而同一音乐不同版本之间的指纹应该具有很小的差异．</p><p>乐纹索引：通过特征点对索引技术构建乐纹库</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230723560.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230723560"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230759609.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230759609"></p><p>哼唱检索：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230820923.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230820923"></p><p>中科院框架：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230836072.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230836072"></p><p>旋律表示：三层表示<br>在最低的声学层上，哼唱的旋律经过基频提取，被表示为基于帧的音高序列；<br>在较高的符号层（或音符层）上，系统综合基频曲线、谐波和能量等信息，将基频序列切分成格式化的音符序列；<br>最后，系统将在乐句的层次上寻找旋律中的轮廓点，并试图确定数据库中的旋律乐句边界。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230907479.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230907479"></p><p>旋律特征提取：基频提取、音符切分、轮廓点提取等各级旋律提取结果</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127230933710.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127230933710"></p><p>旋律查询：基于轮廓因子索引的快速检索</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127231009312.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127231009312"></p>]]></content>
    
    
    <categories>
      
      <category>试题整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字视音频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字视音频-语音</title>
    <link href="/silmont2000.github.io/2020/12/29/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91-%E8%AF%AD%E9%9F%B3/"/>
    <url>/silmont2000.github.io/2020/12/29/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91-%E8%AF%AD%E9%9F%B3/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229150327603.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229150327603"></p><ol><li>基础</li><li>1 语音链<br>  解码编码，说话人和听话人，fig1.2，对频率的分析，机器人和人对话的例子，构建预言理解系统需要knowledge库/知识池，声学语音学等等(PPT</li><li>语音信号<br> 音素的表示，语音产生模型，元滤波器模型，akbk是声道参数，全极点模型/线性预测模型。</li><li>语音处理<br> 耳蜗，阻抗匹配，转换成频域，响度的刻画，能量的刻画：幅值，短时平稳假设，切分成小段。lti，线性时不变，10-30ms之间一个frame，它对应的akbk就是共振峰的参数。<br>加窗，汉明窗，得出特征值。z变换30分钟，变换到频域。等响度曲线掌握。人耳的响度感受也受频率影响。<br> 能量/过零率，和信号频率成比例。纯音：过零率可以等同频率，复音不行。公式。<br> 端点检测算法掌握～PPT。双门限，先检测浊音，再去找轻音的刷脸.相关函数。提出的周期有可能是答案。<br>雨图’y有傅立叶 说话认识别(离散傅立叶变换<br>灰度图  关联频带  mfcc<br>转换mail语句，滤波器  低频滤波  log操作<br>dct解相关</li></ol><p><a href="https://www.cnblogs.com/mengnan/p/9465402.html" target="_blank" rel="noopener">https://www.cnblogs.com/mengnan/p/9465402.html</a></p><h1 id="PPT"><a href="#PPT" class="headerlink" title="PPT"></a>PPT</h1><h2 id="语音链-语音模型"><a href="#语音链-语音模型" class="headerlink" title="语音链 语音模型"></a>语音链 语音模型</h2><ol><li><p>語音處理涉及语音学、音系学、形态学、句法、词汇语义学、语用学、话语规约</p></li><li><p>语音链：发音传递感知</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229150711989.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229150711989"></p></li><li><p>呼吸器官：<strong>动力源</strong>  <strong>发音体</strong>包括声带 声门-声门振动快慢决定f  共鸣器  口腔鼻腔咽腔</p></li><li><p>语音模型：<a href="https://blog.csdn.net/jojozhangju/article/details/25219503![image-20201229151527426](https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229151527426.png)" target="_blank" rel="noopener">https://blog.csdn.net/jojozhangju/article/details/25219503![image-20201229151527426](https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229151527426.png)</a></p></li><li><p>辐射模型：    从声道模型输出的是速度波，而语音信号是声压波。二者的倒比称为辐射阻抗，它表征口唇的辐射效应。</p></li><li><p>声道的两种模型 <a href="https://www.cnblogs.com/tanglei-young/archive/2013/03/18/speech.html" target="_blank" rel="noopener">https://www.cnblogs.com/tanglei-young/archive/2013/03/18/speech.html</a></p><p>声管模型</p><p>将声道视作是由多个不同截面积的声管串联而成的系统。</p><p>共振峰模型</p><p>将声道视作谐振腔，腔体的谐振频率为共振峰。</p><p>元音：激励顺利的通过声道，产生元音；</p><p>辅音：激励通过声道时，声道发生变化发出的声音为辅音。</p><p>声道可以看成是一个谐振腔，声道模型可以看成是一个共振峰模型，共振峰就是谐振腔中的谐振频率。谐振腔可以改变原本语音的频谱特性，在谐振频率上能量加强，其他频率上能量衰弱，有一定的滤波作用。能够决定元音的音质，也反映了声腔的频率特性。</p><p>一般元音，可以用前三个共振峰去表示；而对于辅音、鼻音等则需要至少5个共振峰去表示。下图为辅音和元音，可以看出其共振峰的特性。</p></li><li><p>激励模型：</p><p>Z变换理解为时遇到频遇的变换。</p><p>1） 浊音激励模型</p><p>   声带不断的张开与关闭，产生了间歇的脉冲波，也就是浊音的激励信号。其数学表达式为：</p><p>   <img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/18225811-26f5708c216d461b8fbd26074bce4597.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229153434518.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229153434518"></p><p>   其时域的波形为以基因周期为周期的斜三角脉冲波。斜三角形脉冲可以视作单位脉冲通过上述低通滤波器的输出。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229153651074.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229153651074"></p><p>2）清音的激励模型</p><p>  发清音时，声道发生形状变化形成的声音，可以用白噪声作为激励。</p><p>  单独的将语音激励分为清音和浊音两种是不全面的，很多时候是清音与浊音混起来之后的混合激励。</p></li><li><p>语音信号产生的完整模型为<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229154350347.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229154350347"></p></li></ol><h2 id="语音信号处理"><a href="#语音信号处理" class="headerlink" title="语音信号处理"></a>语音信号处理</h2><ol><li>信号处理：香农采样，量化，重建</li><li>短时平稳：语音信号特性是随时间而变化的，本质上是一个非平稳过程。但不同的语音是由人的口腔肌肉运动构成声道的某种形状而产生的响应，而这种肌肉运动频率相对于语音频率来说是缓慢的，因而在一个短时间范围内，其特性基本保持不变，即相对稳定，可以视作一个准稳态过程。基于这样的考虑，对语音信号进行分段考虑，每一段称为一帧（frame）.一般假设为10-30ms的短时间隔。</li></ol><h3 id="时域："><a href="#时域：" class="headerlink" title="时域："></a>时域：</h3><ol><li><p>时域分析：音量（Volume ）过零率（Zero Crossing Rate ）音高/基音周期（Pitch ）</p><h4 id="预加重：800Hz，-6db倍频程-，U为0-94-0-97"><a href="#预加重：800Hz，-6db倍频程-，U为0-94-0-97" class="headerlink" title="预加重：800Hz，-6db倍频程 ，U为0.94-0.97  "></a>预加重：800Hz，-6db倍频程 ，U为0.94-0.97  <img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229155259192.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229155259192"></h4><h4 id="音量：代表声音的强度，又称力度，强度或能量，可由一帧内的语音采样点振幅大小来类比。有两种计算方式："><a href="#音量：代表声音的强度，又称力度，强度或能量，可由一帧内的语音采样点振幅大小来类比。有两种计算方式：" class="headerlink" title="音量：代表声音的强度，又称力度，强度或能量，可由一帧内的语音采样点振幅大小来类比。有两种计算方式："></a>音量<strong>：</strong>代表声音的强度，又称力度，强度或能量，可由一帧内的语音采样点振幅大小来类比。有两种计算方式：</h4><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229155600567.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229155600567"></p><p>短时平均能量：叠加率50%，相当于一维卷积。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229155833480.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229155833480"></p><p>等主观音量曲线：100db-6k敏感，而且主观音量除了和频率有关外，也和语音的內容（音色）有关。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229160452333.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229160452333"></p><p>过零率：短时帧内的过零次数，反映信号平均频率，但是有可能受采样频率影响。下图：绿色为能量，红色为过零率，黑色为窗的大小。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229220612444.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229220612444"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229160938286.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229160938286"></p></li><li><p>频域：共振峰（Formant ）音高/基音周期（Pitch ）<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229155141060.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229155141060"></p><p>分析方法包括：</p><p>滤波器组法</p><p>傅里叶变化法</p><p>线性预测分析法</p></li><li><p>听觉系统</p><p>人耳感知范围：</p><ol><li><p>能够感知20hz与20khz的频率范围；幅度能够感知在-5db-130db。</p></li><li><p>可闻阈值（安静阈值），与频率有关，就是可以听到最低的声音幅度。</p></li><li><p>隐蔽效应：在强信号附近，听不到弱的信号。</p></li><li><p>掩蔽阈值：可以掩蔽的最大声压阈值。</p></li><li><p>如图是频域掩蔽，低频掩盖高频（耳蜗对于低频信号的处理面积更大，对低频更敏感）。时域掩蔽不对称，向前掩蔽5-20ms，向后掩蔽50-300ms</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/18231418-6bd9e414303d49afa0cdf8bbc6ea8b1b.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p></li><li><p>临界带宽：一个纯音可以被以它为中心频率并且具有一定频带宽度的连续噪声所掩蔽，如果在这一频带宽度内的噪声功率等于该纯音的功率，则该纯音刚好处于可以被听到的临界状态，就称这一频带宽度为临界带宽。人耳对低频信号的分辨率较高，而对高频信号的分辨率相对低。因为临界带宽可以更好地反映人耳对信号频率的感知特性，所以对人耳的听觉特性的研究都是建立在临界带宽的基础上的。这也就是为何很多语音信号处理时，对数据进行分子带处理。</p></li></ol></li><li><p>短时分析：基本都是加汉明窗+卷积</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229184124821.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229184124821"></p><p>帧能量：公式是方差公式。。应用时可以是：和均值差的绝对值平均，或者方差的ln。</p><p>帧之间静态参数：倒谱，帧能量</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127095927613.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127095927613"></p></li></ol><h3 id="频域分析"><a href="#频域分析" class="headerlink" title="频域分析"></a>频域分析</h3><ol><li><p>端点检测失败-rejection和acceptance两种错误</p></li><li><p>端点检测流程：首先注意到浊音的能量大，过零率约为0，轻音过零率骤增</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229163900607.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229163900607"></p><p><strong>算法流程：</strong></p><ol><li>计算信号前100毫秒的能量与过零率的均值与方差（假设这段时间里没有语音）</li><li>寻找整段录音中最大的能量值</li><li>根据步骤1和2确定能量阈值，如选取整个语音区间的一些百分比的峰值，基于清音的过零率分布确定过零率的阈值</li><li>寻找一个超过高阈值ITU的能量区间En</li><li>在En从下穿过ITL的地方找到一个假定存在的起始点N1，在En从上穿过ITL的地方找到一个假定存在的终止点N2</li><li>通过比较Zn和IZCT往回移动N1，找到Zn超过IZCT的第一个点，相似地，往后移动N2，找到Zn超过IZCT的最后一个点<br><strong>简易理解版本：</strong><br>先通过能量找到浊音（一般的发声规律是清音 - 浊音 - 清音），从浊音向外扩展找到清音边缘（清音通过过零率检测）。发清音时，会出现过零率递增，结束后会出现过零率递减</li></ol></li><li><p>自相关计算的是信号延迟后于原信号的相似程度。自相关计算的结果自己就是周期性的。缺陷在于，当两组峰很近时分组会出问题。偏移一个周期以后二者之间的相似度最大，所以就用这个数字（最低最强）作为基音周期，那么基频就是其倒数。</p></li></ol><h2 id="短时分析"><a href="#短时分析" class="headerlink" title="短时分析"></a>短时分析</h2><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229184806150.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229184806150"></p><p>这个其实还比较好理解，相乘表示效果的叠加，无非重复了一下轻音浊音的区别。</p><ol><li><p>语图   横坐标是时间，纵坐标是频率，点的数值是能量大小。出现横线说明某频率的声音集中有高能量出现，也称为声纹。</p></li><li><p>窄带语谱图可以清晰的显示谐波的结构，反映基频的时变过程；宽带语谱图能清晰的显示共振峰结构，和语谱包络，能反映频谱的快速时变过程。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229191428108.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229191428108"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229191512406.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229191512406"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229191715045.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229191715045"></p></li><li><p>MFCC倒谱分析：MFCC是除了基频之外之和声道有关的参数</p><p><em>算法：</em></p><p>预处理：预加重/分帧/加窗</p><p>依次fft</p><p>求mel能量</p><p>对mel结果倒谱分析（DCT）</p><p> <a href="https://www.cnblogs.com/wsine/p/4635518.html" target="_blank" rel="noopener">https://www.cnblogs.com/wsine/p/4635518.html</a></p><p><a href="https://www.shuzhiduo.com/A/nAJv0AM8dr/" target="_blank" rel="noopener">https://www.shuzhiduo.com/A/nAJv0AM8dr/</a></p><p><a href="https://zhuanlan.zhihu.com/p/139867698" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/139867698</a></p><p>感知实验表明，人耳对于声音信号的感知聚焦于某一特定频率区域内，而非在整个频谱包络中。语音的MFCC特征是基于人耳感知实验得到，将人耳当成特定的滤波器，只考虑某些特定频率成分。这些滤波器是在频域上不均匀分布的。更多的滤波器聚集于低频部分，高频部分的滤波器较少。采样率16Khz时，下图实例：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229192037803.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229192037803"></p><p>这之后为了消除声道的影响（有点类似消除光线的影响）需要对结果进行一个标准化。假设我对一帧F做mfcc变换，得到t个特征帧，这些特征帧的值求一个标准差（方差开方），然后标准化的算法就是当前值—平均值再除以方差。<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229222912707.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229222912707"></p></li></ol><h2 id="说话人识别"><a href="#说话人识别" class="headerlink" title="说话人识别"></a>说话人识别</h2><ol><li><p>识别性能评价：D删除错误  I插入错误  S替换错误<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229193202515.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229193202515" style="zoom:25%;"></p></li><li><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229193310831.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229193310831" style="zoom: 25%;"> <img src="/silmont2000.github.io/2020/12/29/%E6%95%B0%E5%AD%97%E8%A7%86%E9%9F%B3%E9%A2%91-%E8%AF%AD%E9%9F%B3/D:%5CProgram%20Files%20(x86)%5CGit%5Cblog%5Csource%5C_posts%5Cupload%5Cimage-20201229193706582.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229193706582" style="zoom:25%;"></p></li><li><p>技术结构：<br><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229193952641.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229193952641"></p></li><li><p>mel频率：模拟人耳对不同频率语音的感知。人类对不同频率语音有不同的感知能力：1kHz以下，与频率成线性关系，1kHz以上，与频率成对数关系。1mel频率为人类对1kHz音调感知程度的1/1000。B表示mel频率。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229194430018.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229194430018"></p></li><li><p>对数能量对噪音和谱估计误差有鲁棒性。</p></li></ol><h3 id="动态规整DTM-Dynamic-Time-Warping"><a href="#动态规整DTM-Dynamic-Time-Warping" class="headerlink" title="动态规整DTM Dynamic Time Warping"></a>动态规整DTM Dynamic Time Warping</h3><p><a href="https://zhuanlan.zhihu.com/p/43247215" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43247215</a></p><p>构建一个矩阵，矩阵中i,j处的值为模板Ci与等待对齐的Qj之间的欧氏距离。这样得到一张map，在map中贪心求最短路径。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20210127100052141.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20210127100052141"></p><p>DTW适合于特定人、基元较少的场合，多用于孤立词识别。缺点：运算量较大；识别性能过分依赖于端点检测；太依赖于说话人的原来发音；不能对样本作动态训练；没有充分利用语音信号的时序动态特性；</p><h3 id="矢量量化VQ-Vector-Quantization"><a href="#矢量量化VQ-Vector-Quantization" class="headerlink" title="矢量量化VQ  Vector Quantization"></a>矢量量化VQ  Vector Quantization</h3><p><a href="https://www.cnblogs.com/xingshansi/p/6925955.html" target="_blank" rel="noopener">https://www.cnblogs.com/xingshansi/p/6925955.html</a></p><p><a href="https://www.cnblogs.com/pinard/p/6164214.html" target="_blank" rel="noopener">https://www.cnblogs.com/pinard/p/6164214.html</a></p><p>VQ 是将一个向量空间中的点用其中的一个有限子集来进行编码的过程。这过程中用到K-means方法。可以参见链接。下图中的Vi称为码字矢量，表征第i类向量，集合{Vi}称为码本。</p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229230135946.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229230135946" style="zoom:50%;"><h3 id="隐式马尔可夫模型HMM"><a href="#隐式马尔可夫模型HMM" class="headerlink" title="隐式马尔可夫模型HMM"></a>隐式马尔可夫模型HMM</h3><p><a href="https://www.cnblogs.com/liuwu265/p/4732797.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuwu265/p/4732797.html</a></p><p><a href="https://www.cnblogs.com/pinard/p/6945257.html" target="_blank" rel="noopener">https://www.cnblogs.com/pinard/p/6945257.html</a></p><p>观测状态就是能被我们看到的，对应的隐藏状态就是不可见的。先来看MM模型，MM意味着所有状态均可见。MM的2个重要假设：1阶马尔科夫链假设，观测独立性假设–任意时刻的观测只依赖于该时刻的状态，与其他状态无关。，参数不变性假设–上面介绍的三大要素不随时间的变化而改变，即在整个训练过程中一直保持不变。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229233936717.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229233936717"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229234147931.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229234147931"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201229234254440.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201229234254440"></p><p>然后来看HMM：HMM–状态不可见，但状态之间的转移仍然是概率的–观测/输出结果是状态的概率函数。</p><p>比如从缸里摸球，缸的状态由转移概率决定但是不可见，每次取的球有概率分布。根据观察输出函数的依据，HMM又分为：</p><p>–离散HMM (DHMM, Discrete HMM)，基于VQ</p><p>–连续密度HMM (CDHMM, Continuous Density HMM, 简称CHMM)基于连续密度 </p><p>–半连续HMM (SCHMM, Semi-Continuous HMM)</p><h1 id="历年题整理"><a href="#历年题整理" class="headerlink" title="历年题整理"></a>历年题整理</h1><ol><li><p>语音信号处理方法：频域 时域 实频域 复频域</p></li><li><p>预处理目的：</p><p>在对语音信号进行分析和处理之前，必须对其进行预加重、分帧、加窗等预处理操作。这些操作的目的是消除因为人类发声器官本身和由于采集语音信号的设备所带来的混叠、高次谐波失真、高频等等因素，对语音信号质量的影响。尽可能保证后续语音处理得到的信号更均匀、平滑，为信号参数提取提供优质的参数，提高语音处理质量</p></li><li><p>pitch提取：ACF自相关法，最低且最强的频率。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/20170112164351822" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p></li><li><p>端点检测算法：</p><p>在语音信号中确定起始点，并把语音和非语音时段区分开来。</p><p>​    1.基于短时能量和短时过零率的端点检测：语音段能量比噪声段能量大，可以很好区分；过零率粗略描述频率，判别清音和浊音，有声和无声；过零率检测清音，短时能量检测浊音，两者配合。开始出在静音段，两者之一超过最低门限，进入过渡段，都降到门限之下，回到静音段。两者之一超过高门限，进入语音段，这时若两者都降到门限下，则为噪声段。</p><p>​    2.倒谱特征端点检测。倒谱距离代替短时能量。</p></li><li><p>说话人识别图</p><p><a href="https://cread.jd.com/read/startRead.action?bookId=30036572&amp;readType=1" target="_blank" rel="noopener">https://cread.jd.com/read/startRead.action?bookId=30036572&amp;readType=1</a></p><p>流程：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201230092803303.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201230092803303"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201230092831442.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201230092831442"></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>试题整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数字音视频</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>post计网读书笔记-物理层</title>
    <link href="/silmont2000.github.io/2020/12/03/%E8%AE%A1%E7%BD%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <url>/silmont2000.github.io/2020/12/03/%E8%AE%A1%E7%BD%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%89%A9%E7%90%86%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="2-1-数据通信理论基础"><a href="#2-1-数据通信理论基础" class="headerlink" title="2.1 数据通信理论基础"></a>2.1 数据通信理论基础</h1><p>所有传输设施，对不同傅里叶分量的衰减程度不同。具体表现为在0到$f_c$的范围里不衰减，在$f_c$以上就会发生衰减。然而$f_c$也并不是一个尖锐的边界。</p><p><strong>带宽：</strong>所以我们把0到接受能量是原来信号一半的这个范围称为带宽，用电压表示。</p><p>模拟带宽指Hz，数字带宽指bps</p><h2 id="香农定理-尼奎斯特定理"><a href="#香农定理-尼奎斯特定理" class="headerlink" title="香农定理/尼奎斯特定理"></a>香农定理/尼奎斯特定理</h2><p><strong>尼奎斯特</strong>：如果带宽（滤波器）为B，那么高于2B的采样毫无意义。如果信号有V个离散等级，一个有限带宽无噪声信道的最大数据速率=$2Blog_2V$ bps。例如带宽为3k赫兹，传输二值信号（离散等级有2个）就不可能用6k以上bps的速度传输。</p><p>但是这是理想的无噪声情况。实际上信号总是有噪声的，我们用信噪比来衡量。</p><p>信噪比（dB）= $10 * log_10(S/N) (dB)$<br>例如：当S/N=10时，信噪比为10dB；当S/N=1000时，信噪比为30dB.</p><p><img src="/silmont2000.github.io/2020/12/03/%E8%AE%A1%E7%BD%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%89%A9%E7%90%86%E5%B1%82/D:%5CProgram%20Files%20(x86)%5CGit%5Cblog%5Csource%5C_posts%5Cupload%5Cimage-20201203115203705.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201203115203705"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网交换机实验的一些问题</title>
    <link href="/silmont2000.github.io/2020/11/03/%E8%AE%A1%E7%BD%91%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%AE%9E%E9%AA%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <url>/silmont2000.github.io/2020/11/03/%E8%AE%A1%E7%BD%91%E4%BA%A4%E6%8D%A2%E6%9C%BA%E5%AE%9E%E9%AA%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol><li><p>在思科模拟器上建立虚拟网络：首先将需要的交换机、PC拖入界面，然后使用直连网络线连接交换机和PC，交换机之间使用交叉网络线连接交换机。双击之后可以进入交换机的CLI命令和PC的模拟桌面，桌面上第一个应用设置IP。</p></li><li><p><strong>关于IP、掩码、网络号、网关：我们在这里没搞清楚浪费了大量时间：</strong></p><p>A. IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，用来掩盖物理地址，在本地局域网上是唯一的。</p><p>B. 掩码：互联网是由许多小型网络构成的，每个网络上都有许多主机，这样便构成了一个有层次的结构。IP地址在设计时就考虑到地址分配的层次特点，将每个IP地址都分割成网络号和主机号两部分，以便于IP地址的寻址操作。<strong><em>\</em>子网掩码作用就是标记如何分割。**</strong>与IP地址相同，子网掩码的长度也是32位，左边是网络位，用二进制数字“1”表示；右边是主机位，用二进制数字“0”表示。假设IP地址为“192.168.1.1”子网掩码为“255.255.255.0”。其中，“1”有24个，代表与此相对应的IP地址左边24位是网络号；“0”有8个，代表与此相对应的IP地址右边8位是主机号。通过子网掩码能表明一台主机所在的子网与其他子网的关系。</p><p>C. 如何判断是不是在一个子网：把ip和掩码进行一个按位或的操作，得到的结果是网络号，网络号相同则在同一个子网。</p><p>D. 网关：Windows下叫默认网关，<strong>网关就是路由，路由就是网关</strong>。网关实质上是一个网络通向其他网络的IP地址。比如有网络A和网络B，网络A的IP地址范围为“192.168.1.1<del>192.168.1.254”，子网掩码为255.255.255.0；网络B的IP地址范围为“192.168.2.1</del>192.168.2.254”，子网掩码为255.255.255.0。在没有路由器的情况下，两个网络之间是不能进行TCP/IP通信的，即使是两个网络连接在同一台交换机（或集线器）上，TCP/IP协议也会根据子网掩码（255.255.255.0）判定两个网络中的主机处在不同的网络里。而要实现这两个网络之间的通信，则必须通过网关。</p></li><li><p>Ping不通的几种可能：防火墙没关或者禁用了某个ip；网关错误；以及线没连好。无法访问目标主机的时候检查一下双网卡的机器和其他两个有没有在一个局域网下。</p></li></ol><p>昨天研究了半天GNS3，有时间再写一篇（。</p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>post关于python读写图片像素值跳变的问题</title>
    <link href="/silmont2000.github.io/2020/10/27/post%E5%85%B3%E4%BA%8Epython%E8%AF%BB%E5%86%99%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0%E5%80%BC%E8%B7%B3%E5%8F%98%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/silmont2000.github.io/2020/10/27/post%E5%85%B3%E4%BA%8Epython%E8%AF%BB%E5%86%99%E5%9B%BE%E7%89%87%E5%83%8F%E7%B4%A0%E5%80%BC%E8%B7%B3%E5%8F%98%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>今天做数字水印的时候发现水印总是这种花里胡哨的</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/mark20201027114525301443.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="mark20201027114525301443"></p><h1 id="排除二进制算法问题"><a href="#排除二进制算法问题" class="headerlink" title="排除二进制算法问题"></a>排除二进制算法问题</h1><p>首先确定RBG通道的确是占8位，我要取后两位直接%4，应该是没有问题的</p><p>其他的方法：</p><pre><code class="python">decrypt_array[row, col, c] - ((decrypt_array[row, col, c] &gt;&gt; 2) &lt;&lt; 2)</code></pre><h1 id="激情打log"><a href="#激情打log" class="headerlink" title="激情打log"></a>激情打log</h1><p>不得不说虽然dip这门课给我留下了无穷的阴影，但是也教会了我耐心读log= =</p><p>输出写的时候和读的时候的rgb信息</p><p>（因为我已经改了所以没图哈哈）</p><p>大概就是原图写进去是255，读出来是254等等这种，其实差的不多，肉眼是看不出来的</p><p>原来是因为我的存储格式是jpg，有损压缩，导致了rgb跳变，可能对阅读没有什么影响，但是在数据处理的时候就会出现意想不到的结果。<strong>所以把存储格式换成无损压缩的png就好了！</strong></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201027132534053.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201027132534053"></p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记录一次python改写txt的代码</title>
    <link href="/silmont2000.github.io/2020/10/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1python%E6%94%B9%E5%86%99txt%E4%B8%BAjson%E6%A0%BC%E5%BC%8F%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
    <url>/silmont2000.github.io/2020/10/14/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1python%E6%94%B9%E5%86%99txt%E4%B8%BAjson%E6%A0%BC%E5%BC%8F%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<pre><code class="python">import osimport jsonimport timeimport numpy as np# 这个暂时没用class MyEncoder(json.JSONEncoder):    def default(self, obj):        if isinstance(obj, np.ndarray):            return obj.tolist()        elif isinstance(obj, bytes):            return str(obj, encoding=&#39;utf-8&#39;);        return json.JSONEncoder.default(self, obj)dir = &quot;C:\\Users\\Administrator\\PycharmProjects\\DAM1\\static\\15s\\txt\\&quot;file_num = len([lists for lists in os.listdir(dir) if os.path.isfile(os.path.join(dir, lists))])# 获取目录下文件数for i in range(1, file_num):    f = open(dir + str(i).zfill(3) + &quot;.txt&quot;, &quot;rb&quot;)    lines = f.read()    # Unicode-escape是对unicode编码的字节流，两个字节两个字节转义，并对每两个字节一起以16进制输出    # 为啥呢，因为歌名有中文。如果不这样做，24行就有可能定位到错的位置    point = lines.decode(&quot;unicode-escape&quot;).index(&#39; - &#39;)    result = {        &quot;title&quot;: lines[:point].decode(&quot;UTF-8-sig&quot;, &quot;ignore&quot;),        # sig去除\ufeff、\xa0、\u3000        &quot;creator&quot;: lines[point + 3:].decode(&quot;UTF-8-sig&quot;, &quot;ignore&quot;),        &quot;format&quot;: &quot;mp3&quot;,        &quot;date&quot;: time.strftime(&quot;%Y-%m-%d&quot;, time.localtime(time.time()))    }    print(result)    newf = open(&quot;C:\\Users\\Administrator\\PycharmProjects\\DAM1\\static\\15s\\txt2\\&quot; + str(i - 1).zfill(3) + &quot;.txt&quot;,                &quot;w&quot;, encoding=&#39;utf-8&#39;)    # json.dump(result, newf, cls=MyEncoder, indent=4)    json.dump(result, newf)</code></pre>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网-socket编程 TCP协议实现聊天室</title>
    <link href="/silmont2000.github.io/2020/09/17/%E8%AE%A1%E7%BD%91-socket%E7%BC%96%E7%A8%8B-TCP%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
    <url>/silmont2000.github.io/2020/09/17/%E8%AE%A1%E7%BD%91-socket%E7%BC%96%E7%A8%8B-TCP%E5%8D%8F%E8%AE%AE%E5%AE%9E%E7%8E%B0%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdn.net/20130602151600953" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><p>等有空来补一下这篇</p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
      <tag>socket</tag>
      
      <tag>TCP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计网读书笔记-第一章</title>
    <link href="/silmont2000.github.io/2020/09/15/%E8%AE%A1%E7%BD%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/"/>
    <url>/silmont2000.github.io/2020/09/15/%E8%AE%A1%E7%BD%91%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-2-网络硬件"><a href="#1-2-网络硬件" class="headerlink" title="1.2 网络硬件"></a>1.2 网络硬件</h1><p>传输技术和网络尺度是在对计算机网络分类时比较重要的两个维度。</p><h2 id="传输技术"><a href="#传输技术" class="headerlink" title="传输技术"></a>传输技术</h2><h3 id="广播式链路-broadcast"><a href="#广播式链路-broadcast" class="headerlink" title="广播式链路 broadcast"></a>广播式链路 broadcast</h3><p>数据包能被共享，通过检查数据包的地址字段来筛选需要处理的数据。有点像一个人在办公室大喊“沃森，我需要你”。通过对地址字段使用特殊编码，可以让所有机器都处理这个数据（广播，broadcasting），也可以只让一个组处理这一数据（组播，multicasting）</p><h3 id="点到点链路-point-2-point"><a href="#点到点链路-point-2-point" class="headerlink" title="点到点链路 point 2 point"></a>点到点链路 point 2 point</h3><p>也称为单播（unicasting），只有一个发送方和接收方。因为网络中存在长度不同的路由，所以找到一个好的路由是关键。</p><h2 id="网络尺度"><a href="#网络尺度" class="headerlink" title="网络尺度"></a>网络尺度</h2><p>可以简单地理解为是作用范围。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200915103252345.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200915103252345"></p><h3 id="个域网（PAN）"><a href="#个域网（PAN）" class="headerlink" title="个域网（PAN）"></a>个域网（PAN）</h3><p>一般采用蓝牙，蓝牙采用主-从模式，由系统单元（PC）决定这一套设备使用什么地址、传输多长时间、用什么频率通信。如个人电脑和蓝牙键盘、鼠标；嵌入型医疗设备如起搏器、胰岛素泵等。</p><h3 id="局域网（LAN）"><a href="#局域网（LAN）" class="headerlink" title="局域网（LAN）"></a>局域网（LAN）</h3><p>也是私有网络，能够共享资源和交换信息。用于公司时称为企业网络（enterprise network）。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200915104056749.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200915104056749"></p><p>其中接入点就是我们说的无线路由器（router）或者基站（base station），用来中继各种数据包。和其他设备离的很近的时候可以使用点对点通讯。IEEE 802.11标准实际上就是WIFI，而IEEE 802.3实际上是以太网（迄今最常见的有线局域网）。相对地，有限LAN使用各种不同的传输技术：大多是铜线，也有光纤，在各种方面有线的性能都优于无线。有线局域网的拓扑结构以点到点链路为基础。交换机（switch）上有多个端口（port），每个链接一个计算机。交换机的工作是中继数据包并决定分发给谁。协议就用来梳理数据包的路径。</p><p>这其中，因为网络的结构和实际的架构可能存在偏差，提出了虚拟局域网（VLAN）的概念。例如，VLAN1和VLAN2虽然都接在同一个交换机上，但发给VLAN1的消息不会被VLAN2接受，就仿佛他们本来就存在于不同的LAN中。</p><p>继续说这个拓扑结构。经典以太网（classic Ethernet）中只有一条电缆，用分布式仲裁机制解决冲突。现代的信道分配可以分为静态和动态设计两种。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200915110055483.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200915110055483"></p><p>动态分配又分为集中式和分散式。集中式的有一个中心实体用算法决定分配顺序，分散式由每一个机器自行决定。</p><h3 id="城域网-MAN-metropolitan"><a href="#城域网-MAN-metropolitan" class="headerlink" title="城域网 MAN metropolitan"></a>城域网 MAN metropolitan</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200915110852098.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200915110852098"></p><p>最有名的例子是许多城市都有的有限电视网。开始它们只是单向的分发电视节目信号，之后运营商意识到是要把系统稍作改动就可以使用原来尚未使用的频谱来提供双向internet服务。另一种城域网是IEEE 802.16,俗称WiMAX。</p><h3 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200915111408189.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200915111408189"></p><p>每个城市的办事处都有专门运行应用的计算机，称为主机（host），其余的部分称为通信子网（communication subnet）。子网最初的含义就是一组路由器和通信线路的集合，负责在host之间传递信息，包括传输线路和交换元素（即路由器）两个部分。 交换元素（switching element）也叫交换机（switch），现在称为路由器（router）。用来分配出境线路。</p><h4 id="广域网和局域网的区别"><a href="#广域网和局域网的区别" class="headerlink" title="广域网和局域网的区别"></a>广域网和局域网的区别</h4><p>一是广域网的线路更长，通常host和子网是不同的人来拥有和运营，简化了整个网络的设计。</p><p>二是路由器通常链接不同类型的网络技术，这种链接不同技术的广域网实际上是互联网（或者叫复合网络）。</p><p>三是广域网的子网可以连接单个计算机，也可以链接局域网。</p><h4 id="VPN-virtual-private-network"><a href="#VPN-virtual-private-network" class="headerlink" title="VPN  virtual private network"></a>VPN  virtual private network</h4><p>不租用专用网络，直接连接Internet，办事处之间使用虚拟链路相互连接，使用底层Internet的容量。好处是重用资源、灵活，不好是无法确定容量，Internet服务的变化会影响里程数。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200916105107297.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200916105107297"></p><h4 id="ISP-Internet-service-provider"><a href="#ISP-Internet-service-provider" class="headerlink" title="ISP Internet service provider"></a>ISP Internet service provider</h4><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200916105518950.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200916105518950"></p><p>蜂窝移动电话网络是采用无线技术的广域网例子。</p><h1 id="1-3-网络软件"><a href="#1-3-网络软件" class="headerlink" title="1.3 网络软件"></a>1.3 网络软件</h1><h2 id="协议层次结构"><a href="#协议层次结构" class="headerlink" title="协议层次结构"></a>协议层次结构</h2><p>每一层都是一种虚拟机，它向上一层提供特定的服务。一个机器的第n层同另一个机器的第n层（对等体）对话时适用的规则和约定统称为第n层协议，事实上的协议是可以改变的，而无需通知上下层。但实际上，对等体之间并不是直接沟通，而是由一层将数据传递给她的下一层直到最底层（物理介质）进行实际的通讯。层和协议的集合称为网络体系结构，每层一个协议称为协议栈（protocol stack）。</p><p>相邻层次之间存在接口（interface），定义了下层向上层提供哪些原语操作和服务。</p><p>（未上传）</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200916140309786.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200916140309786"></p><h1 id="1-4-参考模型"><a href="#1-4-参考模型" class="headerlink" title="1.4 参考模型"></a>1.4 参考模型</h1><h2 id="OSI模型"><a href="#OSI模型" class="headerlink" title="OSI模型"></a>OSI模型</h2><p>international standard organization</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200923104140344.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200923104140344"></p><p>它的设计思想是将不同的功能完全分开。</p><p>物理层用来进行实际的比特传输。</p><p>数据链路层掩盖错误，使网络层看不到。同时还要设置流量调节机制，避免信息发的太快把接收方“淹没”，同时调整共享信道的使用。</p><p>网络层控制子网运行，处理拥堵、解决异构网络之间的互联。</p><p>传输层接收上层数据并发给网络层。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201121110335036.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201121110335036"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201121112058933.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201121112058933"></p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a><a href="https://hit-alibaba.github.io/interview/basic/network/UDP.html" target="_blank" rel="noopener">协议</a></h3><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>域名系统（Domain Name System，缩写：DNS）对于人来说，对于IP地址的记忆能力远不及一串有含义的字符串，因此DNS做的就是这件事——将IP地址和我们熟悉的主机名称对应起来的一种服务。</p><p><a href="https://zhuanlan.zhihu.com/p/65076033" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/65076033</a> </p><p><strong>DNS域名系统的划分</strong>（想象一颗倒立的树，从顶级域名到二级域名，到三级域名…注意：越顶级的域名放在后面。比如<a href="https://link.zhihu.com/?target=http%3A//www.baidu.com">http://www.baidu.com</a>中，com是顶级域名，baidu是二级域名，www是三级域名）</p><p><strong>域名解析过程</strong></p><blockquote><p>当一个应用进程需要把主机名解析为ip地址时，该应用进程就调用解析程序，并成为dns的一个客户，把待解析的域名在dns请求报文中，以<strong>udp用户数据报</strong>方式发送给本地域名服务器。<strong>本地域名服务器</strong>在查找域名后，把对应的ip地址放在回答报文中返回。应用进程获得目的主机的ip地址后即可进行通信。<br>若本地域名服务器不能回答该请求，则此域名服务器就暂时成为了dns中的另一个客户，并向其它域名服务器发送查询请求。这种过程直至找到能够回答该请求的域名服务器为止。</p></blockquote><p>首先，主机想要解析<a href="https://link.zhihu.com/?target=http%3A//www.baidu.com">http://www.baidu.com</a>的IP地址，会先查看自己的DNS缓存记录里是否有该域名记录，如果有，就不用这么麻烦按照这个图来查询了。假如没有就会按如下方式来查询：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/v2-8dbf7af2d0f2cfa4f20b95550c310cdf_720w.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><p>本地域名服务器与根服务器之一联系，根服务器根据顶级域名com，会响应命名空间为com的顶级域服务器的ip；于是该应用接着向com顶级域服务器发出请求，com顶级域服务器会响应命名空间为baidu.com的权威DNS服务器的ip地址；最后该应用将请求命名空间为baidu.com的权威DNS服务器，该权威DNS服务器会响应主机名为baidu.com的ip。</p><p>nslookup 的实用程序手动查询域名服务器，来解析给定的主机名。该实用程序也可以用于检修域名解析的故障，以及验证域名服务器的当前状态。</p><p><strong>域名服务解析的两种方式：</strong></p><blockquote><p><strong>客户端发出的查询都是递归查询，DNS服务器向外发出的查询一般都是迭代查询</strong></p></blockquote><p><a href="https://blog.51cto.com/hbgslz/2074068" target="_blank" rel="noopener">https://blog.51cto.com/hbgslz/2074068</a></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201121113700613.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201121113700613"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201121113713740.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201121113713740"></p><h4 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h4><p>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。<strong>URL是一种特殊类型的URI</strong>，包含了用于查找某个资源的足够的信息.URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。</p><h4 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h4><p>1、SMTP协议简介</p><p>SMTP称为简单邮件传输协议（Simple Mail Transfer Protocal），目标是向用户提供高效、可靠的邮件传输。它的一个重要特点是它能够在传送中接力传送邮件，即邮件可以通过不同网络上的主机接力式传送。通常它工作在两种情况下：一是邮件从客户机传输到服务器；二是从某一个服务器传输到另一个服务器。SMTP是一个请求/响应协议，它监听25号端口，用于接收用户的Mail请求，并与远端Mail服务器建立SMTP连接。</p><p>2、SMTP协议工作机制</p><p>SMTP通常有两种工作模式。发送SMTP和接收SMTP。具体工作方式为：发送SMTP在接收到用户的邮件请求后，判断此邮件是否为本地邮件，若是直接投送到用户的邮箱，否则向DNS查询远端邮件服务器的MX记录，并建立与远端接收SMTP之间的一个双向传送通道，此后SMTP命令由发送SMTP发出，由接收SMTP接收，而应答则反方向传送。一旦传送通道建立，SMTP发送者发送MAIL命令指明邮件发送者。如果SMTP接收者可以接收邮件则返回OK应答。SMTP发送者再发出RCPT命令确认邮件是否接收到。如果SMTP接收者接收，则返回OK应答；如果不能接收到，则发出拒绝接收应答（但不中止整个邮件操作），双方将如此反复多次。当接收者收到全部邮件后会接收到特别的序列，入伏哦接收者成功处理了邮件，则返回OK应答。</p><p>3、SMTP的连接和发送过程</p><p>（a）建立TCP连接</p><p>（b）客户端发送HELO命令以标识发件人自己的身份，然后客户端发送MAIL命令；</p><p>​     服务器端正希望以OK作为响应，表明准备接收</p><p>（c）客户端发送RCPT命令，以标识该电子邮件的计划接收人，可以有多个RCPT行；</p><p>​     服务器端则表示是否愿意为收件人接收邮件</p><p>（d）协商结束，发送邮件，用命令DATA发送</p><p>（e）以.表示结束输入内容一起发送出去</p><p>（f）结束此次发送，用QUIT命令退出</p><p>示例如下：</p><pre><code class="C">C: telent SMTP.163.com 25  //以telenet方式连接163邮件服务器S: 220 163.com Anti-spam GT for Coremail System //220为响应数字，其后的为欢迎信息C: HELO SMTP.163.com //除了HELO所具有的功能外，EHLO主要用来查询服务器支持的扩充功能 S: 250-mailS: 250-AUTH LOGIN PLAINS: 250-AUTH=LOGIN PLAINS: 250 8BITMIME //最后一个响应数字应答码之后跟的是一个空格，而不是&#39;-&#39; C: AUTH LOGIN   //请求认证S: 334 dxNlcm5hbWU6  //服务器的响应——经过base64编码了的“Username”=C: Y29zdGFAYW1heGl0Lm5ldA==  //发送经过BASE64编码了的用户名S: 334 UGFzc3dvcmQ6  //经过BASE64编码了的&quot;Password:&quot;=C: MTk4MjIxNA==  //客户端发送的经过BASE64编码了的密码S: 235 auth successfully  //认证成功 C: MAIL FROM: bripengandre@163.com  //发送者邮箱S: 250 … .  //“…”代表省略了一些可读信息C: RCPT TO: bripengandre@smail.hust.edu.cn　//接收者邮箱S: 250 … .    // “…”代表省略了一些可读信息C: DATA //请求发送数据S: 354 Enter mail, end with &quot;.&quot; on a line by itselfC: Enjoy Protocol StudingC: .S: 250 Message sentC: QUIT //退出连接 S: 221 Bye</code></pre><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><p>在很多情况下，它只是利用 IP 进行通信时所必须用到的协议群的统称。具体来说，IP 或 ICMP、TCP 或 UDP、TELNET 或 FTP、以及 HTTP 等都属于 TCP/IP 协议(也就是图上的那些)。</p><p>TCP协议的几个特性是可靠、面向连接。可靠是因为使用校验和，确认-重传机制，接受数据的顺序不变，使用滑动窗口控制流量。经典的三次握手：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/tcp-connection-made-three-way-handshake.png" srcset="/silmont2000.github.io/img/loading.gif" alt="three-way-handshake"></p><h2 id="调制和解调"><a href="#调制和解调" class="headerlink" title="调制和解调"></a>调制和解调</h2><p>308</p><p>幅度调制</p><p>0和1对应不同波形，0是直线（f=0），即用有没有区分，基本没有误码</p><p>频率调制</p><p>用不同f的正弦波调制 基本没有误码</p><p>相位调制</p><ol><li>绝对调相  用正弦波的正反区分01（初始相位是0°还是180°） 误码率低</li><li>相对–  波形a和波形b之间没有相位差：波形b代表的是0，否则是1.即通过是否有相位差来区分01</li></ol><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>可以通过减少一个信号（0/1）对应的波形来加快速度（f下降）</p><p>也可以用不用的幅度（针对用f区分的）来代表多个bit，如给010101010一个幅度为4的波，给00001111一个幅度为5的波，传播效率提高；针对用相位区分的方法可以改变初始相位，现在只有0和180，可以把什么45啦 90啦加进来。二者可以结合，不同地相位+幅度组合。</p><p>星座图用来通过半径大小+角度进行检索（正交幅度调制）  </p><p>BPSK：有两个点，只能有两种情况0/1，只能传输一个bit</p><p>QPSK：四个点，2的2次方是4，说明可以表示01/00/11/10这四种，所以可以传输2个bit</p><p>64QAM: 2的6次方，传递6个bit</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/v2-09b5d1a7b229cbe9f8fc6437313f63f1_hd.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="通信里星座图到底是什么意思啊? - 知乎"></p><p>以此（指有几个point）来制定标准</p><p>点数增加，效率增加。但因为信噪比的限制，并不能一直增加</p><h3 id="波特率-比利率"><a href="#波特率-比利率" class="headerlink" title="波特率/比利率"></a>波特率/比利率</h3><p>单位时间内<a href="https://baike.baidu.com/item/载波/3441949" target="_blank" rel="noopener">载波</a>调制状态改变的次数来表示，1波特即指每秒传输1个符号，用来衡量一秒传递几个码元每秒钟通过<a href="https://baike.baidu.com/item/信道" target="_blank" rel="noopener">信道</a>传输的码元数称为码元传输速率，简称波特率，其单位是波特（Baud,symbol/s），波特率是传输通道<a href="https://baike.baidu.com/item/频宽" target="_blank" rel="noopener">频宽</a>的指标。</p><p>比特率：波特率*一个码元表达几个bit</p><h2 id="香农定理-信噪比-尼奎斯特定理"><a href="#香农定理-信噪比-尼奎斯特定理" class="headerlink" title="香农定理/信噪比/尼奎斯特定理"></a>香农定理/信噪比/尼奎斯特定理</h2><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200921115733156.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200921115733156"></p><p>这里的带宽指最高频率-最低频率，工作环境是有噪声的电话线传递，波随便</p><p>信噪比（dB）= 10 * log10(S/N) (dB)<br>例如：当S/N=10时，信噪比为10dB；当S/N=1000时，信噪比为30dB</p><p>尼奎斯特定理 用在方波、低通信道条件下，需要注意低通信道和带通信道都不是理想的</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200921120449288.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200921120449288"></p><h2 id="2-2-传输介质"><a href="#2-2-传输介质" class="headerlink" title="2.2 传输介质"></a>2.2 传输介质</h2><p>主要的评价标准是带宽、延迟、成本的维护难度。</p><p>引导性介质，也即有限介质，如铜线和光纤；非引导性介质，也即无线介质，如地面无线电、卫星、激光。</p><h3 id="引导性介质"><a href="#引导性介质" class="headerlink" title="引导性介质"></a>引导性介质</h3><h4 id="磁介质"><a href="#磁介质" class="headerlink" title="磁介质"></a>磁介质</h4><p>磁介质比较简单，一方把数据写到磁带或其他可擦写介质上（DVD等）然后运输这些介质。永远不要低估一辆满载着磁带在高速公路上飞驰的旅行车的带宽。缺点是延迟特性很差，传输时间很长。</p><h4 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h4><p>两根相互绝缘的铜线，螺旋搅在一起，产生的干扰波互相抵消，显著降低辐射。信号用两根线的电压差来承载，因为这样就可以免疫噪声的影响（对两根线都影响，差不变）。</p><p>既可以传播模拟信号，也可以传播数字信号。带宽取决于直径和传输距离。</p><p>优点是足够的传输性能和较低的成本、</p><h4 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h4><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20201010113440283.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20201010113440283"></p><p>​    </p><h1 id="傅里叶复习"><a href="#傅里叶复习" class="headerlink" title="傅里叶复习"></a>傅里叶复习</h1><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200921114245546.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200921114245546"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200921114301623.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200921114301623"></p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java理论查漏</title>
    <link href="/silmont2000.github.io/2020/08/31/Java%E7%90%86%E8%AE%BA%E6%9F%A5%E6%BC%8F%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/"/>
    <url>/silmont2000.github.io/2020/08/31/Java%E7%90%86%E8%AE%BA%E6%9F%A5%E6%BC%8F%EF%BC%88%E5%88%9D%E7%BA%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="Java理论查漏（初级）"><a href="#Java理论查漏（初级）" class="headerlink" title="Java理论查漏（初级）"></a>Java理论查漏（初级）</h1><h2 id="JAVA基础"><a href="#JAVA基础" class="headerlink" title="JAVA基础"></a>JAVA基础</h2><ol><li><p>JAVA图形界面组件层次关系（SWING）：</p><p>主要是window、canvas、button、checkbox、labe、levent、dialog</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/20190223221456236.jpg?token=ANRR26L4OXD3DKUIT6QJSMC7JSXI2" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><p>图源<a href="https://blog.csdn.net/zengxiantao1994/article/details/87898107" target="_blank" rel="noopener">https://blog.csdn.net/zengxiantao1994/article/details/87898107</a></p></li><li><p>JAVA程序运行不受系统限制。原本.class字节码文件需要java虚拟机解释称机器码才能执行，速度较慢，随着JVM（java虚拟机）的发展，执行速度直逼C++。结构：.java-&gt;编译器-&gt;字节码文件.class-&gt;解释器（JVM）</p></li><li><p><strong>JDK Java Development Kit</strong> 是Sun公司推出的Java开发工具包，包括<strong>Java类库、 Java编译器、 Java解释器、 Java运行环境和Java命令行工具</strong>。JDK主要有3种版本<br>J2SE：standard edition,  Java标准版或Java标准平台。可以开发Java桌面应用程序和低端服务器应用程序，也可开发Java Applet程序<br>J2EE：enterpsise edtion, Java企业版或Java企业平台,它包含J2SE平台，并增加了附加类库，支持目录管理，交易管理等功能。<br>J2ME：micro edtion,Java微型版或Java小型平台,用于嵌入式的消费产品中，如移动电话，掌上电脑等</p><p>普通用户只需要安装 JRE来运行 Java 程序。而程序开发者必须安装JDK来编译、调试程序</p><p>javac.exe是编译器</p></li><li><p><strong>JRE</strong>   Java runtime environment 是运行基于Java语言编写的程序所不可缺少的运行环境，用于解释执行Java的字节码文件。bin里的就是JVM，lib中则是JVM工作所需要的类库，<strong>而JVM和 lib和起来就称为JRE</strong></p></li><li><p><strong>JVM</strong>：Java Virtual Machine 是Java的虚拟机，是JRE的一部分。它是整个java实现跨平台的最核心的部分，负责解释执行字节码文件，是可运行java字节码文件的虚拟计算机。</p><p>所有平台的上的JVM向编译器提供相同的接口，而编译器只需要面向虚拟机，生成虚拟机能识别的代码，然后由虚拟机来解释执行。</p></li><li><p><strong>编译执行和解释执行：</strong>编译过程只进行一次，所以，编译过程的速度并不是关键，目标代码的运行速度是关键。因此，编译器一般都集成尽可能多的优化技术，使生成的目标代码具备更好的执行效率。解释则在每次程序运行时都需要解释器和源代码，不能集成太多优化技术，因为代码优化技术会消耗运行时间，使整个程序的执行速度受到影响。区别有点像笔译和同声传译的区别。</p></li><li><p><strong>java没有头文件、指针、结构体、运算符重载、多重继承、无符号常量。</strong></p></li><li><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200827142041106.png?token=ANRR26PUSDXUDJHKQGBHHI27JSXJM" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200827142041106"></p></li><li><p><strong>一个程序必须至少有一个输出</strong>。System是Java类库中的一个类，out是System类中的一个对象，println(或print)是out对象的一个方法。</p></li></ol><h2 id="变量和数据"><a href="#变量和数据" class="headerlink" title="变量和数据"></a>变量和数据</h2><ol><li><p><strong>变量名可以是$开头</strong>：Java 的标识符由字母、数字、_和$组成，长度不限，但实际命名不宜过长。<br>标识符的第一个字符必须为字母、 “_”或 “$” 。标识符区分大小写。<strong>不能数字开头。</strong></p></li><li><p><strong>Java严格区分大小写。</strong>变量名、对象名、方法名、包名等标识符全部采用小写字母；若标识符由多个单词构成，则首单词小写，其后单词的首字母大写，其余字母小写。如getAge。<br>类名首字母大写，常量名全部字母大写，关键字全部小写。</p></li><li><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200827142930953.png?token=ANRR26I7OMDJXI57VDIXFMC7JSXJ2" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200827142930953"></p><p>注意数组、接口和类叫做“引用类型“，<strong>没有一种类型叫“实型”</strong></p><p>其实String可以骑墙，在这里先视作引用类型。</p></li><li><p>Java的long型占8个字节，表示方式为数字后加L或者l。float也只占4个字节，double8个。</p></li><li><p>八进制：开头是0；十六进制：0X或0x为前缀。</p></li><li><p><strong>关于“float精度”</strong>：<a href="https://blog.csdn.net/albertsh/article/details/92385277" target="_blank" rel="noopener">https://blog.csdn.net/albertsh/article/details/92385277</a></p><p>(±)a.b x 10^c</p><p><code>float</code>的存储正是将4字节32位划分为了3部分来分别存储正负号，小数部分和指数部分的：</p><ol><li>Sign（1位）：用来表示浮点数是正数还是负数，0表示正数，1表示负数。</li><li>Exponent（8位）：指数部分。即上文提到数字c，但是这里不是直接存储c，为了同时表示正负指数以及他们的大小顺序，这里实际存储的是c+127。</li><li>Mantissa（23位）：尾数部分。也就是上文中提到的数字b。</li><li>通常意义上float精度在6-7，double在16-17</li></ol></li><li><p><strong>科学计数法</strong>   2.5E4:  2.5称为尾数，4称为阶码</p></li><li><p>char类型：<strong>占两个字节</strong>，16位。表示方式：’a’，’\u0043’</p></li><li><p>boolean类型：占一个字节，和C++不同，不能与数值0或1等同</p></li></ol><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><ol><li><p>单目运算符的优先级高于双目运算符，而在双目运算符中，先*、/、%运算，再+、-运算。但是当x=y–时，y先传递值，后–。n++：取n值作为表达式 n++ 的值；n = n + 1</p></li><li><p><strong>字符类型操作数的比较依据是其Ascii码值</strong>，如’a’&lt;‘d ‘。字符串只能用==或者！=，不能比大小；boolean类的也是。Ascii码的顺序：数字-大写-小写；==和！=优先级低</p></li><li><p>运算有优先级（后面贴了表格），括号-单目-乘除余加减-不相等相等比较-赋值</p><p>算术关系没逻辑，给了条件才赋值</p></li><li><pre><code>System.out.println(&#39;A&#39;+1);//65System.out.println(&#39;A&#39;);//A</code></pre></li><li><p>关于数据类型转化级别：<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200827150535730.png?token=ANRR26JSRN733ZMG5KJRBGS7JSXKQ" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200827150535730"></p><p>Char类型可自动转换成int类型，其值为字符的Ascii码值（隐式）<br>而int类型到Char类型需要经过强制类型转换（强制）</p></li><li><p>java.lang.Math类提供方法来执行基本数学函数的运算。round()方法:返回最接近操作数的整数<br>对于正数而言就是四舍五入取整，对负数时&gt;0.6的小数向绝对值更大的方向舍。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200827151117847.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200827151117847"></p><p>random()方法:返回一个double型随机数，此方法不带参数<br>随机数范围：<strong>大于等于</strong>0.0且小于1.0<br>产生固定范围内的随机整数：<br>(Int)((上界-下界+1)<em>Math.random()+下界)<br>int a=(int)(Math.random()</em>10);    //大于等于0小于10的随机整数<br>int b= (int)(89*Math.random()+10);//大于等于10小于99的随机整数（如果是要两位数应该写到90）</p><p>Math.exp(int n)返回e的n次幂</p><p>重要常量：Math.PI 和 Math.E</p></li><li><p>和System类似，Scanner也是一个类（在import java.util.Scanner ; 或 import java.util.<em>; ），需要先创建实例化对象Scanner in=new Scanner(System.in); 然后用in.next来读取键盘输入，需要注意，*</em>并没有in.nextString，也没有nextChar，只有nextline(),nextInt(),nextDouble(),nextFloat() 。光一个next到空格就停止。**</p></li><li><p><code>;</code>也是一个语句，是空语句。</p></li></ol><h2 id="三大基本结构和部分简单算法"><a href="#三大基本结构和部分简单算法" class="headerlink" title="三大基本结构和部分简单算法"></a>三大基本结构和部分简单算法</h2><ol><li><p>任何程序有三种基本的结构：顺序、分支、选择。这是基本的结构。</p></li><li><p>java分支：if：二选一（不是多选一）  if扩展、嵌套、switch：多选一</p></li><li><p>闰年判断：<code>year%4==0 &amp;&amp; year%100!=0 || year%400==0</code></p></li><li><p><strong>else总与离他最近的if配对。</strong></p></li><li><p><strong>switch语句判断数据类型可以是short，int，char，byte，不可以是浮点数和long</strong>。如果没有break，执行后续所有case语句中的语句块，default也执行。default的位置不影响。</p><pre><code class="java">public class Pass {    public static void main(String[] args) {        char i = &#39;2&#39;;        switch (i) {            default:                System.out.println(&quot;default&quot;);            case &#39;2&#39;:                System.out.println(&quot;2&quot;);            case &#39;3&#39;:                System.out.println(&quot;3&quot;);            case &#39;4&#39;:                System.out.println(&quot;4&quot;);                break;//这句有无不影响结果        }    }}//输出234public class Pass {    public static void main(String[] args) {        char i = &#39;2&#39;;        switch (i) {            case &#39;2&#39;:                System.out.println(&quot;2&quot;);            case &#39;3&#39;:                System.out.println(&quot;3&quot;);            case &#39;4&#39;:                System.out.println(&quot;4&quot;);            default:                System.out.println(&quot;default&quot;);        }    }}//输出234default</code></pre></li></ol><ol start="6"><li><p>循环的两种类型：计数控制和事态控制。</p></li><li><p>continue：是跳过当前这轮循环，剩下的语句全部跳过，不是只跳一个</p><pre><code class="java">public class Pass {    public static void main(String[] args) {        int i = 0;        int s = 0;        while (i &lt; 5) {            i++;            System.out.print(&quot;\nthis is &quot; + i+&quot;:  &quot;);            System.out.print(&quot;1&quot;);            if (i == 3) continue;            System.out.print(&quot;2&quot;);            System.out.print(&quot;3&quot;);        }    }}//this is 1:  123//this is 2:  123//this is 3:  1//this is 4:  123//this is 5:  123</code></pre></li></ol><ol start="8"><li><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200829090024682.png?token=ANRR26KLCH7NX3OWBNQAVZK7JSXLC" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200829090024682"></p></li><li><p>水仙花数：三位数各位数字立方和等于它本身。</p><p>完数：因子的和与它本身相等。</p><pre><code class="java">public class PerfectNumber {    public static void PerfectN(){        for(int a=2;a&lt;=1000;a++){            int s=a;            for(int i=1;i&lt;a;i++){                if(a%i==0){                    s=s-i;                }            }            if(s==0){                System.out.println(&quot;输出完数：&quot;+a);            }        }    }    public static void main(String[] args){        PerfectN();   }}</code></pre></li><li><p>Java叫方法，只能在类class中声明</p></li><li><p>void的标准含义：<strong>方法没有返回值</strong>。里面包含变量声明，语句，返回语句</p></li><li><p>在JAVA中只有值传递</p></li><li><p>递归，关键的是递归公式和递归出口</p></li><li><p>汉诺塔：</p><p>若用A、B和C表示3根针，将n个金片由A针移动到C针，步骤如下：<br>将A上的n-1个金片借助C针移动到B针上。<br>将A针上剩下的一个金片由A针移动到C针上。<br>将最后剩下的n-1个金片借助A针由B针移动到C针上。</p><pre><code class="java">static void  hanoi( int n , char  a ,  char b  ,  char c ) { if (n = = 1)      moves(a, c);//如果只剩一片，直接移动 else//还剩很多片     hanoi(n - 1, a, c, b);//先把n-1片移动好，从a借助c放到b上     moves(a, c);//然后把最后一片移动     hanoi(n - 1, b, a, c);//再把n-1片移动到这最后一片上去，从b借助a放到c上。 }</code></pre></li><li><p>保留2位小数：<code>(int)(a*100+0.5)/100.0</code></p><pre><code class="java">    import java.math.BigDecimal;    import java.text.DecimalFormat;    import java.text.NumberFormat;    public class format {        double f = 111231.5585;        public void m1() {            BigDecimal bg = new BigDecimal(f);            double f1 = bg.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();            System.out.println(f1);        }        /**         * DecimalFormat转换最简便         */        public void m2() {            DecimalFormat df = new DecimalFormat(&quot;#.00&quot;);            System.out.println(df.format(f));        }        /**         * String.format打印最简便         */        public void m3() {            System.out.println(String.format(&quot;%.2f&quot;, f));//会四舍五入        }        public static void main(String[] args) {//这个博主写的实际上是错的，仅供参考方法。            //他的方法没有写static，main是无法调用的。            format f = new format();            f.m1();            f.m2();            f.m3();        }    }</code></pre></li><li><p>关于length和length():<a href="http://www.itwanger.com/java/2019/12/08/java-array-string-length.html" target="_blank" rel="noopener">http://www.itwanger.com/java/2019/12/08/java-array-string-length.html</a></p><p>数组的长度是可以确定的，直接用一个属性length去表示就可以了。但对于String来说，length的源码是</p><pre><code class="java">    /**     * Returns the length of this string.     * The length is equal to the number of Unicode     * code units in the string.     */    public int length() {        return value.length;//因为value是一个private值，所以需要一个方法作为接口。    }</code></pre></li><li><p>计算单词个数：要注意abandon       （多个空格）after这种情况。因为结尾没有空格，那么就计算空+有的结构，不要计算有+空的结构。</p><pre><code class="java">import java.io.IOException;import java.util.Scanner;public class Pass {    public static void main(String[] args) {        int ri, repeat,count, word,i;        String line;        char c;        Scanner in=new Scanner(System.in);        repeat=(in.nextLine()).charAt(0)-&#39;0&#39;;        for(ri=1; ri&lt;=repeat; ri++){            line=in.nextLine();            word=0;count=0;            for(i=0;i&lt;line.length();i++)            {                if(line.charAt(i)!=&#39; &#39;)                { if(word==0)                    count++;                    word=word+1;                }                else word=0;//用来标记是不是已经没单词了            }            System.out.println( count);        }    }}</code></pre></li></ol><pre><code>public class Pass {    public static void main(String[] args) {        String a[] = &quot;111 22   33 4  5&quot;.split(&quot;\\s+&quot;);        System.out.println(a.length);    }}//\s表示空的字符，换行、tab。space等，+表示一个或多个```</code></pre><ol start="18"><li><p>nextint和nextline在一起用会出问题，<strong>因为nextint之后光标不略过回车</strong>。参考<code>repeat = in.nextLine().charAt(0)-&#39;0&#39;;</code></p></li><li><p>java数组数据类型要相同。数组必须进过申明和初始化，确定数组名、维数和元素数据类型才能使用。各元素的存数空间是连续的。</p><p><strong>二维数组初始化时，可以每行单独进行，允许各行元素数目不同。</strong></p><p>数组的复制：可以用循环语句，<strong>也可以直接a=b。</strong></p><pre><code class="java">public class Pass {    public static void main(String[] args) {        int a[] = {1, 2, 3};        int b[] = {1, 2, 3, 4, 5};        System.out.println(&quot;before:&quot;);        for (int i = 0; i &lt; a.length; i++) {            System.out.print(a[i]);//123        }        System.out.println();        for (int i = 0; i &lt; b.length; i++) {            System.out.print(b[i]);//12345        }        System.out.println();        b = a;        System.out.println(&quot;after:&quot;);        for (int i = 0; i &lt; b.length; i++) {            System.out.print(b[i]);//123        }        System.out.println();        a[2] = 100;        System.out.println(&quot;after2:&quot;);        for (int i = 0; i &lt; b.length; i++) {            System.out.print(b[i]);            //12100,说明直接a=b传递的是地址，且b的大小也会和a一样。        }    }}</code></pre></li><li><p>选择法：每次都选当前数组最小的数，然后交换一次，用一个pos变量来记录现在这个“最小数”的位置。 </p></li><li><p>杨辉三角：a[i][j]=a[i-1][j-1]+a[i-1][j];</p></li><li><p>数组作为参数，形参必须有[ ]，实参可以没有。数组名传递地址，数组元素做参数传递的是值。</p></li><li><pre><code class="java">char a[]={&#39;C&#39;,&#39;h&#39;,&#39;i&#39;,&#39;n&#39;,&#39;a&#39;};System.out.println(a);//可以输出China</code></pre></li><li><pre><code class="java">import java.io.IOException;import java.util.Scanner;public class Pass {    public static void main(String[] args) {        String a = &quot;hello&quot;;        String b = a;        String c = &quot;&quot;;        c = a;        System.out.println(a);        System.out.println(b);        System.out.println(c);        System.out.println();        a = &quot;Hello&quot;;        System.out.println(a);//Hello        System.out.println(b);//hello,是浅拷贝        System.out.println(c);//hello    }}//https://www.cnblogs.com/genggeng/p/10065885.html</code></pre><p>浅拷贝只进行值的传递，本质上还是两份不同的数据。</p><p>对于数组、某个类的实例化对象，这都属于引用数据类型，进行引用传递，也就是地址。这时它们是指向同一块内存的。</p></li><li><p>String的函数： indexOf返回的index是从0开始数的。indexOf（str，in）返回从第in个开始，str首次出现的位置。</p><pre><code class="java">public class Pass {    public static void main(String[] args) {        String a = &quot;abababababab&quot;;        System.out.println(a.indexOf(&quot;ab&quot;, 2));//2,是从整个字符串算的下标。    }}</code></pre><p>substring（in1，in2）返回两个in之间的子字符串，in2可以省略。</p><pre><code class="java">public class Pass {    public static void main(String[] args) {        String a = &quot;abcdefg&quot;;        System.out.println(a.substring(0, 2));//ab,包括0不包括2    }}</code></pre><p>equalsIgnoreCase（str）忽略大小写的比较。</p><p>compareTo(str) 与str进行比较。大正小负，返回第一个不相等的差值，<strong>不是下标</strong>。</p><p>String.valueOf(数据)，把数据<strong>变成</strong>string类型。变成其他类型：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200830101458679.png?token=ANRR26P5DLTT5MJNWE5ABRS7JSXLY" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200830101458679"></p></li></ol><h2 id="OOP部分"><a href="#OOP部分" class="headerlink" title="OOP部分"></a>OOP部分</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol><li><p>面向对象的程序设计认为：程序由类（对象）组成。</p></li><li><p>类属于引用数据类型，因此在声明时系统不会分配空间，需要手动new一个空间。当使用new运算符实例化一个对象时，Java做两件事：系统为对象创建内存区域，自动调用构造方法初始化成员变量。程序不能直接调用构造方法。New实例化一个对象时，自动调用；无构造方法，生成一个无参的默认构造方法，使用默认值初始化对象的成员变量：数值型-0；布尔型-false ;字符型’\0’,字符串型null。参数个数和参数类型都能用来区分构造方法的重载。</p></li><li><p><strong>一个类就有一个.class文件，能被运行的是有main方法的类（主类）。</strong></p></li><li><p><strong>new运算符实例化对象</strong><br>过程：系统为对象分配所需的存储空间<br>但内存空间有限，不能存放无限多的对象<br>为此，Java提供了资源回收机制，自动销毁无用对象，回收其所占用的存储空间<br>如需主动释放对象，或在释放时执行特定操作，则在类中可以定义 finalize() 方法：</p><pre><code class="java">    public void finalize()    {      方法体；     }  </code></pre></li><li><p>封装性是面向对象的核心特征之一<br>类的封装（对设计者而言）包含2层含义<br><strong>将数据和对数据的操作组合起来构成类，类是一个不可分割的独立单位，类是Java程序的构成。</strong>类中包括：<br>数据、成员变量 、对象的属性<br>对数据的操作、成员方法 、对象所能完成的功能<br><strong>类中既要提供与外部联系的接口，同时又要尽可能隐藏类的实现细节。</strong><br>具体方法就是为类及成员变量和成员方法设置合理的访问权限<br>对于设计者而言,封装使模块之间的耦合和交差大大减少,降低了程序开发的复杂性<br>对于使用者，不需要关心类内部的细节，只要知道：<br>哪些类可以选择，类的功能,即提供了哪些方法可使用</p></li></ol><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><ol><li><table><thead><tr><th><strong>访问控制</strong></th><th><strong>本类</strong></th><th><strong>同一包中的类</strong></th><th><strong>其他包中子类</strong></th><th><strong>其他包中的类</strong></th></tr></thead><tbody><tr><td><strong>public</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>private</strong></td><td></td><td>×</td><td>×</td><td>×</td></tr><tr><td><strong>protected</strong></td><td></td><td></td><td></td><td>×</td></tr><tr><td><strong>缺省</strong></td><td></td><td></td><td>×</td><td>×</td></tr></tbody></table><p>缺省就是这个包里面都能访问；proteted是其他包的其他类不能访问。真事儿多。</p></li><li><p>声明一个类可使用的权限修饰符：public、缺省，<strong>不能使用：private、protected</strong></p></li><li><p><strong>Java的类中可以包含两种成员：实例成员和类成员</strong><br><strong>实例成员属于对象</strong><br>包括实例成员变量和实例成员方法<br>必须通过对象访问实例成员变量，调用实例成员方法<br>实例方法使用变量是不是static都行</p><p><strong>类成员属于类</strong><br>包括类成员变量和类成员方法，<strong>申明时用static修饰</strong><br>通过对象可以引用类成员变量和类方法<br>也可以通过类名可直接访问类成员变量，调用类成员方法<br>没有创建对象，也可以引用类成员<br>类成员变量在该类被加载到内存时就分配了存储空间，是共享的。<br>类成员方法使用变量只能访问同为static的变量，要调用实例成员方法时也必须通过创建对象才行。</p></li><li><p>逆序数：</p><pre><code class="java">while(number&gt;0){            digit=number%10; //分离出个位数字            a=a*10+digit;    //形成当前的逆序数            number=number/10;      }</code></pre></li><li><p>10转2</p><pre><code class="JAVA">      String t=&quot;&quot;; //保存二进制数      do {          t=n%2+t;  //n除2后的余数拼接到t的前面          n=n/2;  //获得除2后的商      }while(n&gt;0);</code></pre></li></ol><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li><p>继承关键字：extend<strong>s</strong>  <strong>注意有s</strong>。被继承的叫做superclass或baseclass或parentclass，新的类称为derived class，或者subclass，childclass。</p></li><li><p><strong>所有类都直接或间接的继承自object。</strong>所以如果没有指定，就默认继承它；object类有许多成员和方法，比如hashcode（）获取hash码，equal<strong>s</strong>（）检测相等。</p></li><li><p><strong>子类不继承父类构造方法。</strong>保护和私有的成员也都继承，但是私有的变量不能直接访问。</p></li><li><pre><code class="java">public Ctor(){    this(6);//是可以用this指代构造函数的}public Ctor(int a){    this.a=a;}</code></pre></li><li><p>多态性：指同一名字的方法有多种实现。他们根据参数或调用对象进行区分。<strong>在oop中表现为，重载类的方法、子类覆盖父类方法。</strong>重载表现为形参的<strong>个数、类型和顺序</strong>不同。方法的<strong>返回值和参数名称</strong>不是判断依据；覆盖是指子类定义了父类中的同名方法。表现为父类与子类之间方法的多态性。寻找对应的执行方法时，先从当前类开始，如果没有符合的再看上一级。</p></li><li><p><strong>注意，用final修饰的类不能被继承（固定作用|已经完美）<br>用final修饰的成员方法不能被覆盖<br>用final修饰的成员变量不能被修改（编译错误）。</strong></p></li></ol><p>   final关键字：当用final修饰一个类时，表明这个类不能被继承（extend）。也就是说，如果一个类你永远不会让他被继承，就可以用final进行修饰。final类中的成员变量可以根据需要设为final，但是要注意final类中的所有成员方法都会被隐式地指定为final方法。</p><p>   <a href="https://www.cnblogs.com/dolphin0520/p/3736238.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3736238.html</a></p><p>   下面这段话摘自《Java编程思想》第四版第143页：</p><p>   　　“使用final方法的原因有两个。第一个原因是把方法锁定，以防任何继承类修改它的含义；第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。“</p><p>   　　因此，如果只有在<strong>想明确禁止 该方法在子类中被覆盖</strong>的情况下才将方法设置为final的。</p><p>   　　注：<strong>类的private方法会隐式地被指定为final方法。</strong></p><p>   修饰变量是final用得最多的地方.对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改,<strong>但是它指向的对象的内容(如一个对象的成员变量）是可变的</strong>；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p><pre><code class="java">   public class Pass {       public static void main(String[] args) {           final String a = &quot;hello&quot;;           String b = &quot;hello&quot;;           String c=&quot;hello2&quot;;           System.out.println(&quot;a+2=&quot; + (a + 2));//hello2           System.out.println(&quot;b+2=&quot; + (b + 2));//hello2           System.out.println(&quot;a==c is &quot;+(a+2==c));//true           System.out.println(&quot;b==c is &quot;+(b+2==c));//false       }   }   //当final变量是基本数据类型以及String类型时，如果在编译期间能知道它的确切值，则编译器会把它当做编译期常量使用</code></pre><h3 id="抽象类和接口"><a href="#抽象类和接口" class="headerlink" title="抽象类和接口"></a>抽象类和接口</h3><ol><li><p><strong>接口是一组常量+抽象方法，包是一组类和接口。包&gt;接口。</strong></p></li><li><p>抽象类是供子类继承、但不能创建实例的类。关键字是abstract:</p><pre><code class="java">[权限修饰符] abstract class   类名{    成员变量声明    [权限修饰符] abstract  返回类型  方法名(参数表);} </code></pre></li><li><p>抽象类可以有不抽象的方法，反之不行。<br>即使抽象类不包含抽象方法也不能被继承。<br>子类必须给出所有具体实现。</p></li><li><p>相比之下<strong>接口的要求更严格，只能定义public的抽象方法和静态的、公有常量</strong>。接口提供了方法声明与实现相分离的机制，实现相同接口的多个类表现出相同的行为模式，每个实现接口的类可以根据各自要求，给出抽象方法的具体实现。</p><pre><code class="java">[访问权限] interface  接口名 [extends  父接口名] {    成员变量表(常量) 成员方法列表（抽象）}</code></pre></li><li><p>接口的权限只能是public和缺省，方法必须是<strong>public abstract</strong>所以可以省略，常量必须是<strong>public static final</strong>所以也可以省略，接口<strong>允许没有父接口</strong>，也就是没有最高层（类有最高层、必须有父接口Object）</p><pre><code class="java">class 类名 [extends 父类名] implements 接口名列表{     类体}说明一个类可以实现多个接口，各个接口之间用逗号分开该类必须要实现接口中所有的抽象方法，即使本类中不使用的抽象方法也要实现对不使用的抽象方法如何实现:不需要返回值的方法:空方法实现,即方法中没有语句有返回值的方法:在方法中使用默认值返回，如0实现抽象方法，需指定访问权限为public</code></pre></li><li><p>接口和抽象类比较：</p><p><strong>相同点</strong><br>都不能被实例化<br><strong>不同点</strong><br>一个类只能继承一个抽象类，是单继承；一类可以实现多个接口,具有多重继承功能<br>抽象类是类,类中可以包含成员变量、构造方法、抽象方法和方法；而接口是<strong>一组抽象方法和常量的组合</strong>。<br>抽象类中的成员具有和普通类中的成员一样的访问权限，而接口中成员访问权限只能是public。</p></li></ol><h3 id="import-package"><a href="#import-package" class="headerlink" title="import/package"></a>import/package</h3><ol><li><p>一个源程序导入包中的类或接口后，引用该类和接口时，包名可省略，Import语句在源程序中必须位于其他类或接口申明之前。</p></li><li><p>一个Java的源程序文件（.java文件）中可包含：</p><pre><code class="java">[package  包名 ]                 // 声明所在包 [import 包名.类名 |包名.接口名]  //导入其它包中的类或接口，                                               “|”表示2者选1[ public ] class | interface     //声明类或接口</code></pre><p>一个源程序文件中，最多只能有<strong>一条package</strong>语句，并且必须是第一条语句。一个源程序文件中，可以有<strong>多条import</strong>语句，并且必须位于其它类或接口声明之前。一个源程序文件中，可定义多个类或接口，但只能定义一个<strong>public类或public接口，并且该类或接口名与文件名相同</strong>。</p></li></ol><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><ol><li><p><strong>异常：程序运行过程中出现的非正常现象。</strong>Java提供了异常处理机制：异常类，用来<strong>描述和处理</strong>异常，每个异常类只反映一类运行错误。异常情况分为Exception和Error两大类，Error是内部系统错误，只能关闭程序，Exception可在程序中捕获和处理。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200831105153693.png?token=ANRR26J33HULFCPC5M422D27JSXMS" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200831105153693"></p></li><li><p>Exception的处理方法：</p><ol><li><p>try…catch…finally来对异常进行捕获和处理。</p><pre><code class="java">public class Exception1 {  public static void main(String args[])      {      try {          int a[]={1,2,3,4,5}, sum=0;          for (int i=0; i&lt;=5; i++)         sum=sum+a[i];          System.out.println(&quot;sum=&quot;+sum);          System.out.println(&quot;Successfully! &quot;);       }//异常类名1对应的异常处理代码, 若干条catch捕获各类异常，一旦出现，终止try代码块运行，自动跳转到异常所对应的catah块中，执行其中的代码     catch (ArrayIndexOutOfBoundsException e){//catch (异常类名2   异常对象名2)          System.out.println(&quot;ArrayIndexOutOfBoundsException  detected&quot;);      }     finally    {         System.out.println(&quot; Programm Finished! &quot;);      }//Finally代码块是个可选项，如果有，无论异常是否发生， Finally块中的代码最终必定执行 }} </code></pre></li><li><p>throw语句和throws选项抛出异常。通常异常是系统自动捕获的，也可以通过throw语句自己抛出而不捕获。<code>throw  new 异常类名（信息）</code>异常类名为系统异常类名或用户自定义的异常类名，“信息”是可选信息。若有该信息，toString()方法的中将增加该信息内容,toString()方法用于返回系统给出的异常信息.</p><pre><code class="java">//捕获多个异常public class Exception2{  public static int Sum(int n) {    int s = 0;    int x[ ]=new int[n];    for (int i=0; i&lt;=n; i++) {             if(i==n)  throw new ArrayIndexOutOfBoundsException(&quot;下标越界&quot;);           x[i]=i;           s = s +x[i];}      return s;      }</code></pre><p>为了明确一个方法不捕获异常，也可在声明该方法时，使用throws选项，抛出该类异常。格式为：</p><pre><code class="java">[修饰符] 返回值类型 方法名[（参数表）] throws 异常类名{……}</code></pre></li></ol></li><li><p>自定义异常类，可以继承Exception。</p></li></ol><h3 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h3><ol><li><p>Java的输入输出，以流的方式处理。如字节流、字符流等。特点是都按照数据序列的顺序。InputStream和OutStream是java处理字节流的基本类，Reader和Writer是处理字符流的基本类。<strong>都包含在io包中。</strong></p></li><li><p>Java系统预先定义2个流对象分别<strong>表示标准输入、输出设备：</strong></p><ol><li><p>System.in   标准输入设备：键盘</p><p>它是InputStream类的一个对象<strong>（不是类）</strong></p><pre><code class="java">import java.io.*;// 声明导入IO包public class StandardIn1 {       public static void main(String[] args) throws IOException{      //使用read()时，应对IOException类异常进行捕获或抛出      char c;      System.out.println(&quot; 输入一个字符&quot;);      c=(char)System.in.read();   //使用read()方法从键盘读入1个字符      System.out.print( &quot;输入的字符是：&quot;+c);     }}</code></pre><p>使用bufferedReader（Reader类的子类）的readLine（）可以从键盘键入字符串，一次读一行。</p><pre><code class="java">import java.io.*;public class StandardIn3 {  public static void main(String[] args)    throws IOException {    InputStreamReader iin=new InputStreamReader(System.in);    BufferedReader bin =new BufferedReader(iin);    String s;      int i;     s=bin.readLine();              //输入一个字符串    i=Integer.parseInt(bin.readLine());    //输入一个整数           System.out.println(&quot;输入的字符串:&quot;+s);                     System.out.println(&quot;输入的整数:&quot;+i);            }}</code></pre><p>Scanner类是SDK1.5新增的一个类，使用该类创建的对象可扫描键盘的输入 ，即程序直接读取键盘输入的数据.</p><pre><code class="java">Scanner in=new Scanner(System.in);</code></pre><p>命令行输入字符串数据。</p></li><li><p>System.out  标准输出设备：显示器，属于PrintStream类。使用print和println方法来输出各类数据。printf（）是JDK1.5才开始支持。格式说明的形式：</p><pre><code>%  -   m.n  格式字符 </code></pre><p>%：表示格式说明的起始符号，不可缺<br>-：有”-”号表示左对齐输出，如省略表示右对齐输出。<br>m.n：m指域宽，即对应的输出项在输出设备上所占的宽度（列数）。n指精度，用于说明输出的实型数的小数位数。</p><pre><code class="java">目前printf支持以下格式： %c       单个字符 %d       十进制整数 %f        十进制浮点数 %o        八进制数 %s        字符串 %u        无符号十进制数 %x        十六进制数 %%       输出百分号%public class Pass {    public static void main(String[] args) {        int [ ][ ] a=new int[4][4];        int i,j,s=0;        for(i=0;i&lt;4;i++){            for(j=0;j&lt;4;j++){                a[i][j]=(int)(Math.random()*9+1);                s+=a[i][j];                System.out.printf(&quot;%-4d&quot;,a[i][j] ); }            System.out.println();        }        System.out.printf(&quot;%6.2f&quot;, s/16.0);    }}</code></pre><p>输出：<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200831131350058.png?token=ANRR26OTVQQBIM4KA7WXYQS7JSXNE" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200831131350058"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/wps1.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p></li></ol></li><li><p>Java进阶：</p><ol><li><p>Java应用程序要分为Application和Applet两种。Application可以直接独立运行，Applet必须借助浏览器。它集成java.applet.Applet类，嵌入HTML，通常置于服务器端，客户端下载之后通过浏览器运行。<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200831131634655.png?token=ANRR26LGT6UK2MO6U7WRK227JSXNS" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200831131634655"></p><pre><code class="java">import java.awt.*;      //一个Applet程序的例子import java.applet.*;public class Drawing extends Applet{    public void paint(Graphics g){        g.setColor(Color.red);        g.drawString(&quot;我一边喝咖啡，一边学Java&quot;, 5, 60);        g.setColor(Color.blue);        g.drawString(&quot;我学得很认真&quot;, 5, 100);    }}//可以在Eclipse中直接运行//可以嵌入到HTML文件中，在浏览器中运行&lt;html&gt;&lt;applet code=Drawing.class height=100 width=300&gt;&lt;/applet&gt;&lt;/html&gt;//在命令行窗口，用appletviewer.exe程序运行，格式：//appletviewer  HTML文件名.html</code></pre></li><li><p>多线程机制：可以同时运行多个执行体。</p><p>主线程是main对应的线程。要实现多线程要在主线程中创建新的线程（Thread类和它的子类来表示）每个线程要经历由“新生就绪运行阻塞死亡”五种状态，线程从新生到死亡的状态变化过程称为生命周期。 <img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200831132017018.png?token=ANRR26KC24SNB3BIIQREK2S7JSXOO" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200831132017018"></p><ol><li><p>通过Tread类继承实现：</p><pre><code class="java">class Thread1 extends Thread{//是一个类     String s;      int m, count=0;      Thread1(String ss, int mm) { //构造函数          s=ss;          m=mm;        }    public void run() {//运行时方法的覆盖        try{              while (true){                   System.out.print(s);                 sleep(m);                    count++;                if (count &gt;= 20) break;                  }              System.out.println(s+&quot;finished !&quot;);          }        catch(InterruptedException e)   {return;}    }}public static void main(String args[]) {    Thread1 threadA = new Thread1(&quot;A  &quot;, 50);    Thread1 threadB = new Thread1(&quot;B  &quot;, 100);    threadA.start();    threadB.start();}    </code></pre></li><li><p>也可以通过实现Runnable接口的类来实现。（没有例子）</p></li></ol></li></ol></li></ol><h1 id="彩蛋-知识点表和提示"><a href="#彩蛋-知识点表和提示" class="headerlink" title="彩蛋-知识点表和提示"></a>彩蛋-知识点表和提示</h1><table><thead><tr><th>A</th><th>数据的定义</th><th>01</th><th>基本数据类型：整型、实型和字符型、布尔型常量各种表示形式的整数、实数、字符、布尔(true,false)常量和字符串常量，符号常量（final）的定义和使用。包括整数的十进制、八进制和十六进制的表示形式、长整型常量和无符号型常量的表示形式，实数的浮点表示法和科学记数法，字符的转义序列等</th><th>Final定义的数据不能修改十进制正常的数，八进制是0开头，十六进制是0X或0x浮点表示法：float，4字节，32位，精度是7到8位Double，8字节，64位，精度是16到17位。<a href="https://blog.csdn.net/a327369238/article/details/52354811科学计数法：4E3表示4*10^3不是e^3。1e-49，如果是float打印，会变成1.0E-49而且E之前的数字可以不是只有一位整数位的。100l，表示long" target="_blank" rel="noopener">https://blog.csdn.net/a327369238/article/details/52354811科学计数法：4E3表示4*10^3不是e^3。1e-49，如果是float打印，会变成1.0E-49而且E之前的数字可以不是只有一位整数位的。100l，表示long</a> 类型，</th></tr></thead><tbody><tr><td>02</td><td>变量的概念、定义和初始化；</td><td>java变量包含静态变量(static Variable)、成员变量()和局部(local Variable )变量三种。其实，也可以说两种，静态变量和成员变量都是全局变量(Global Variable)，只是成员变量是动态的,还有就是，静态变量的生存周期是由类决定的，是在加载类文件时初始化的；而成员变量则是在类中没有用static修饰的变量，它的生存周期是由对象决定的，是在new 一个对象时初始化的。</td><td></td><td></td></tr><tr><td>03</td><td>基本运算和表达式：（含对应的表达式语句）包括算术运算（含自增、自减操作）、关系运算、逻辑运算、<strong>*\</strong>位运算、****条件运算、赋值运算等。熟练掌握运算符的功能熟练掌握运算符的优先级和结合方向熟练掌握隐式类型转换和强制类型转换</td><td><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/wps2.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="img"> <strong><em>\</em>括号 -&gt; 单目（非、正负、自增自减） -&gt; 乘除取余加减 -&gt; 位移 -&gt;比较相等**</strong>异或运算符是用符号“^”表示的，其运算规律是： 两个操作数的位中，相同则结果为0，不同则结果为1。低级变量可以直接转换为高级变量（隐式）。String-&gt;其他： Integer.parseInt(（str）;其他 -&gt;string：String.valueOf( ).</td><td></td><td></td></tr><tr><td>04</td><td>系统提供的方法（函数）及包含方法的表达式。（含对应的表达式语句）Math类：PI、abs、sin、cos、sqrt、pow、exp、log、log10、random、round等</td><td>Random()返回[0,1)的随机double值。Exp：e的多少次方返回二位数：（int）（random（）<em>90）+10；返回m，n之间的数（包括m不包括n）（int）（random()</em>(n-m)）+m round()方法:返回最接近操作数的整数 对于正数而言就是四舍五入取整，对负数时&gt;0.6的小数向绝对值更大的方向舍。</td><td></td><td></td></tr><tr><td>B</td><td>编程基础</td><td>01</td><td>第1章中的其它Java概念结构化程序设计方法（如逐步求精法）良好的程序设计风格（如程序模块化、加注释、缩进的书写格式）文件扩展名等概念</td><td></td></tr><tr><td>02</td><td>输入：<strong>*\</strong>命令行参数；*<strong><em>Scanner类：nextInt()、nextShort()、nextLong()、nextDouble()、nextFloat()、next()、nextLine()等；BufferedReader类：read()、readLine()；</em></strong>*<em>JoptionPane类中的showInputDialog方法***</em>输出：System.out.print()/println()/<strong>*\</strong>printf()*<strong><em>等</em></strong>*<em>JoptionPane类中的showMessageDialog方法***</em>数据类型转换：Integer.parseInt()、Long.parseLong()、Short.parseShort()、Float.valueOf()、Double.valueOf()、String.valueOf()等</td><td><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/wps3.jpg" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></td><td></td><td></td></tr><tr><td>03</td><td>选择控制语句(if、switch，含break)，复合语句</td><td>无break的时候执行的是case语句，default也要执行。Default放的位置是无所谓的</td><td></td><td></td></tr><tr><td>04</td><td>循环控制语句(for、while、do—while，含break和continue)，空语句</td><td>Continue是跳过当前循环</td><td></td><td></td></tr><tr><td>C</td><td>方法（函数）</td><td>01</td><td>空类型的声明（定义）和使用；main方法与其他方法之间的关系；方法定义的格式；return语句；方法的参数（形式参数和实在参数）及参数传递；方法的返回值；方法调用；嵌套调用和递归调用的概念；</td><td></td></tr><tr><td>D</td><td>数组和字符串</td><td>01</td><td>一维数组。一维数组的定义和初始化及赋初值，数组元素的引用（含数组的length）。</td><td></td></tr><tr><td>02</td><td>二维数组。二维数组的定义和初始化及赋初值，数组元素的引用（含数组的length）。</td><td>必须类型相同</td><td></td><td></td></tr><tr><td>03</td><td>数组和数组元素作为方法的参数传递</td><td>数组名直接传递地址，数组元素是值传递</td><td></td><td></td></tr><tr><td>04</td><td>字符数组；字符串：String类(常用方法：length()，charAt()，subString()，equals(),compareTo()……);<strong>*\</strong>字符串数组****</td><td><strong><em>\</em>见blog**</strong></td><td></td><td></td></tr><tr><td>E</td><td>类和对象</td><td>01</td><td>掌握类的概念，特点，对象的概念，对象域运算符；掌握类的声明：类名（形式，修饰符），方法（构造方法）；掌握对象的创建，类的封装，类的继承和多态（方法的重载、方法覆盖）；</td><td></td></tr><tr><td>F</td><td>接口与包、图形界面程序与其它</td><td>01</td><td>掌握接口的基本概念、接口的声明及包的概念；<strong>*\</strong>了解接口的实现、抽象类与方法、图形界面程序；****</td><td><strong><em>\</em>接口是一组常量+抽象方法*****</strong>*包是类和接口（比较宏观）****</td></tr><tr><td>02</td><td><strong>*\</strong>了解异常处理，多线程;****</td><td></td><td></td><td></td></tr><tr><td>G</td><td><strong><em>\</em>常用算法程序设计*****</strong>*（可包括函数）此类题目是程序阅读和程序填空题****</td><td>01</td><td>顺序、分支简单程序设计；</td><td></td></tr><tr><td>02</td><td>累加、累乘、多项式计算；</td><td></td><td></td><td></td></tr><tr><td>03</td><td>统计个数（计数）、最值、平均值、公倍数、公约数</td><td></td><td></td><td></td></tr><tr><td>04</td><td>穷举法（含素数等）、迭代法（Fib、数列）</td><td></td><td></td><td></td></tr><tr><td>05</td><td>分类（排序）（包括数值或字符串）（包括数组元素插入）；检索（查找）（包括数值或字符串）；一维数组其它处理</td><td></td><td></td><td></td></tr><tr><td>06</td><td>数组矩阵的相加、相减和相乘，二维数组的处理</td><td></td><td></td><td></td></tr><tr><td>07</td><td>字符串处理</td><td></td><td></td><td></td></tr><tr><td>08</td><td>方法（函数），不包含<strong><em>\</em>排序、检索相关题（放G05）**</strong></td><td></td><td></td><td></td></tr><tr><td>09</td><td>其它（面向对象部分）：构造方法、访问权限、类的继承、super、this、方法重载、方法覆盖</td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: 语句处理</title>
    <link href="/silmont2000.github.io/2020/05/20/Database-System-%E8%AF%AD%E5%8F%A5%E5%A4%84%E7%90%86/"/>
    <url>/silmont2000.github.io/2020/05/20/Database-System-%E8%AF%AD%E5%8F%A5%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>本章主要是讲语句的执行。</p><p>语法分析与翻译 parsing and translation</p><p>执行 evolution</p><h1 id="优化-optimization"><a href="#优化-optimization" class="headerlink" title="优化 optimization"></a>优化 optimization</h1><p>因为不同的语句可能得到相同的结果，我们要执行当中代价最小、效率最高的那种；同一个语句还可以有很多种不同的实现算法（重点）。</p><p>查询执行计划：不仅要标注关系代数关系，还要标注算法。</p><p>优化器的功能：选出代价最小的等价语句。代价小指需要的时间，需要估算。</p><p>时间包括：disk accesses + CPU（计算时间） + network communication，我们主要估算磁盘IO时间。IO时间包括寻道时间、读时间、写时间。（一般来说，写的时间比读的时间要长，因为要读回来检查）为了简便，我们不区分读写，统一成传输时间。Tt表示传输单位时间（4ms），Ts表示寻道单位时间（0.1ms）。这样IO时间只需要计算传输时间和寻道时间。</p><p>缓存很大程度上会影响IO时间，因为如果缓存里面有就没必要请求磁盘了，但这个是动态的，我们只考虑最小缓存情况和最好缓存情况。</p><h1 id="选择算法"><a href="#选择算法" class="headerlink" title="选择算法"></a>选择算法</h1><h2 id="等值"><a href="#等值" class="headerlink" title="等值"></a>等值</h2><ol><li><h3 id="File-scan-，A1-顺序"><a href="#File-scan-，A1-顺序" class="headerlink" title="File scan ，A1   顺序"></a>File scan ，A1   顺序</h3><p>只要一次寻道，从头到尾，线性搜索。</p><ol><li>当按条件查询时，需要全部判断：设br是数据所占的块数，最坏的一共的时间是一次寻道时间+br次IO时间（传输时间）。</li><li>当查询特定一条记录时，因为是唯一的所以不必全部读，需要一次寻道+br/2次传输。</li></ol><p>好处是不管什么情况下都可能用，无论条件、顺序、索引。但因为原来的数据不一定排序了寻道时间迅速增加，所以二分法搜索不太常用；如果排序了还可以用。另外二分法会导致寻道次数增加。</p></li></ol><ol start="2"><li><h3 id="index-scan"><a href="#index-scan" class="headerlink" title="index scan"></a>index scan</h3><h4 id="A2-索引在主键上的相等条件的扫描，默认是B-树，返回一条记录（不重复）"><a href="#A2-索引在主键上的相等条件的扫描，默认是B-树，返回一条记录（不重复）" class="headerlink" title="A2  索引在主键上的相等条件的扫描，默认是B+树，返回一条记录（不重复）"></a>A2  索引在主键上的相等条件的扫描，默认是B+树，返回一条记录（不重复）<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200520160856264.png?token=ANRR26MQM3OKEXWZ2FXVFZS7JSXEO" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200520160856264"></h4><p>Hi：根节点到叶子结点的过程，然后根据这个地址把所在block取回（+1），因为位置不连续，所以每一个节点都要一次寻道+一次传输。</p></li></ol><h4 id="A3-索引不在主键上的相等条件-scan。可能返回多条记录。"><a href="#A3-索引不在主键上的相等条件-scan。可能返回多条记录。" class="headerlink" title="A3 索引不在主键上的相等条件 scan。可能返回多条记录。"></a>A3 索引不在主键上的相等条件 scan。可能返回多条记录。<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200520165710513.png?token=ANRR26MVUIHMV5D5RUWDSP27JSXFI" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200520165710513"></h4><p>   前面Hi还是寻找的过程，后面因为是索引的顺序所以只需要一次寻道定位，之后要读所有符合要求的块（按照索引排在一起）。b是大约所有符合条件的记录占的块数。</p><h4 id="A4-二级索引的等值比较。"><a href="#A4-二级索引的等值比较。" class="headerlink" title="A4 二级索引的等值比较。"></a>A4 二级索引的等值比较。</h4><p>   第一种这个二级索引也是key，不会重复所以只返回一条记录，这时开销和A2是一样的。</p><p>   但假如不是一个key，就涉及到多次的寻道，找到第一个符合条件的节点之后不光只读第一个，后面的也要读，但这些只是逻辑上连续，空间上是不连续的，那么每个都要寻道+传输一次，开销非常大。</p><p>   <img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200520170208026.png?token=ANRR26I3M3OAQO5NSOFIBQS7JSXF4" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200520170208026"></p><h2 id="涉及比较的"><a href="#涉及比较的" class="headerlink" title="涉及比较的"></a>涉及比较的</h2><h3 id="大于等于、小于等于的查询"><a href="#大于等于、小于等于的查询" class="headerlink" title="大于等于、小于等于的查询"></a>大于等于、小于等于的查询</h3><h4 id="A1-遍历（任何）"><a href="#A1-遍历（任何）" class="headerlink" title="A1 遍历（任何）"></a>A1 遍历（任何）</h4><h4 id="A5-基于主索引的比较"><a href="#A5-基于主索引的比较" class="headerlink" title="A5 基于主索引的比较"></a>A5 基于主索引的比较</h4><p>假设是按照索引来排序和选择的，如果是&gt;=，就定位到第一条符合的，然后一直扫描下去；如果是&lt;=，就从开头一直读到不符合，甚至不用索引。</p><h4 id="A6-基于辅助索引的比较"><a href="#A6-基于辅助索引的比较" class="headerlink" title="A6 基于辅助索引的比较"></a>A6 基于辅助索引的比较</h4><p>先在B+树找到，类似A3。</p><h2 id="涉及逻辑操作的"><a href="#涉及逻辑操作的" class="headerlink" title="涉及逻辑操作的"></a>涉及逻辑操作的</h2><h3 id="and："><a href="#and：" class="headerlink" title="and："></a>and：</h3><ol><li><h4 id="A7-主键排除："><a href="#A7-主键排除：" class="headerlink" title="A7 主键排除："></a>A7 主键排除：</h4><p>在所有单个条件里面选一个条件最小的来计算读到内存，然后在内存里再验证是否符合其他条件（and）。</p></li><li><h4 id="A8-用组合索引（composite-index-multiple-key-index）："><a href="#A8-用组合索引（composite-index-multiple-key-index）：" class="headerlink" title="A8 用组合索引（composite index / multiple-key index）："></a>A8 用组合索引（composite index / multiple-key index）：</h4><p>建立在我所需要的属性上，可以用A3-A5算法。</p></li><li><h4 id="A9取交集"><a href="#A9取交集" class="headerlink" title="A9取交集"></a>A9取交集</h4><p> 先把所有的条件中涉及到的元组，用对应的索引地址取回来，然后取交集，在用这些地址稍微排个序在取本体。</p></li></ol><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><ol><li>A10 在A9的情况下取交集。</li></ol><h3 id="not"><a href="#not" class="headerlink" title="not"></a>not</h3><p>顺序扫描</p><p>转换，如非&gt;=变成&lt;等。</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>我们的重点是，内存不够大时的外部归并排序。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200520171718321.png?token=ANRR26LPV6PSI2ORAMD43SK7JSXGQ" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200520171718321"></p><p>M:只有三块内存，一块内存只能放一条元组。第一步先三个三个读进来排序（Pass0），然后马上写成文件放出去。因为只能同时最多打开三个文件来读写，读两个run file，写一个。写的时候是分别读一条进来，写一个小的，然后再从小的原来所在的文件读一条，直到结束。</p><p>产生的文件数=本轮文件数 /（最多打开文件数-1）取上整。实际上是一个M-1路归并。如果内存很大（大于m-1）一次归并就够了。<img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200520173004006.png?token=ANRR26N6ENRLQYATVTFJAUK7JSXHE" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200520173004006"></p><p>代价分析：</p><ol><li>传输开销</li></ol><p>$$<br>总共轮数是 \lceil log_{M-1} (b_r/M)\rceil,不包括Pass0；\<br>也就是\lceil log_{M-1}(N_0)\rceil。N_0就是Pass0产生的文件数。\<br>块传输的话，我们不计算最后一次的写的时间。因为有可能是不写回磁盘而是传给上一步操作。\<br>其他每一pass块传输的次数都是2b_r（整个读进来+整个写回去，注意b_r是整个数据占用的块数）\<br>整个外部排序的block\quad transfer数目是轮数\times每轮的传输数-最后一次，也就是\<br>BTcost =  (\lceil log_{M-1}(b_r/M)\rceil+1)\times 2b_r - b_r.<br>$$</p><ol start="2"><li>寻道开销<br>$$<br>第一次run的时候，要产生一个run\quad file，\就需要先定位到原来的M-1个文件开始，再定位到接收答案的文件开始，所以需要两次寻道。\这样Pass0一共的寻道次数就是2\lceil b_r/M\rceil次。\那在排序过程中不可能内存真的小到每次只能放一块，所以引入一个b_b的概念\表示一次可以读b_b个块。一共是b_r块，就需要b_r/b_b次读块。\每一个块在前一个Pass中被写，后一个Pass中被读，\所以是2\lceil b_r/b_b \rceil 次的寻道（因为他们就不像最开始的记录那样挨着）\但最后一次不用算，所以一共的次数是\第一次寻道的数目+中间run过程的读写-最后一次\2\lceil b_r/M\rceil+2\lceil b_r/b_b\rceil(\lceil log_{M-1}(b_r/M)\rceil)-b_r/b_b.<br>$$</li></ol><h1 id="Join操作"><a href="#Join操作" class="headerlink" title="Join操作"></a>Join操作</h1><h2 id="nested-loop-join嵌套循环连接"><a href="#nested-loop-join嵌套循环连接" class="headerlink" title="nested-loop   join嵌套循环连接"></a>nested-loop   join嵌套循环连接</h2><ol><li>选定outer relation和inner relation，假设outer有2块，一共6条记录，inner有3块，一共9条记录。</li><li>拿出一块outer，一块inner，一块放结果，然后用outer第一块遍历inner第一块，接着inner第二块…以此类推。</li><li>然后这块outer上的所有记录 把 所有inner 都遍历完了，回到第一块，换outer第二块，重复2直到结束。</li></ol><p>最坏情况下的传输次数：6*3+2，6条outer记录，每条都要读3块，加上自己要读两块</p><p>寻道次数：6+2，6条每一条都要寻道到inner的第一条读一遍，加上自己要寻道2块</p><p>好处：不需要索引，啥情况都能用。</p><p>坏处：开销巨大</p><pre><code>给出一组数据：Num of records of customer: n = 10,000, depositor: n=5000Num of blocks of customer: b = 400, depositor: b=100传输块数：10000*100+400或者5000*400+100寻道次数：10000+400或者5000+100</code></pre><h2 id="block-nested-loop-join"><a href="#block-nested-loop-join" class="headerlink" title="block nested-loop join"></a>block nested-loop join</h2><p>与前者相比，inner的交换更加不频繁。</p><ol><li>选定outer relation和inner relation，假设outer有2块，一共6条记录，inner有3块，一共9条记录。</li><li>拿出一块outer，一块inner，一块放结果，然后用outer[0]遍历inner，接着outer[1]…以此类推。</li><li>然后这块outer把第一块inner都遍历完了，回到outer[0]，换下一块inner，重复2直到inner完全没有了。然后换一块outer，继续。</li></ol><p><em>Each block in the inner relation s is read once for each block in the outer relation (instead of once for each tuple in the outer relation)</em></p><p>最坏情况传输次数：2*3+2，每一块outer要读3块inner，加上自己</p><p>寻道次数：2+2，outer自己要读2次，每个outer都只要读一次inner，所以就是2倍的outer块数。</p><pre><code>给出一组数据：Num of records of customer: n = 10,000, depositor: n=5000Num of blocks of customer: b = 400, depositor: b=100传输块数：400*100+400或者100*400+100寻道次数：400+400或者100+100一般让少的作为外循环。最好的情况是内存足够大，外循环一下子全读进来，那么传输块数：1*100+400（相当于在内存是一大块）寻道次数：1+1（所以不是outer的数目二倍，而是在内存中这个“块”数的2倍）</code></pre><h4 id="improvements"><a href="#improvements" class="headerlink" title="improvements"></a>improvements</h4><ol><li><p>顺承上面例子的想法，假如有很多内存，一块给output buffer，一块给inner剩下的全部给outer。</p><p>最后的传输块数=（outer块数 / 分配给outer的buffer块数）* inner块数+outer块数</p><p>最后的寻道次数=（outer块数 / 分配给outer的buufer块数）* 2</p></li><li><p>如果join的等值条件落在inner的key上，也就是不会重复，那么一旦找到我们就停止本次内循环。</p></li><li><p>S型扫描inner</p></li><li><p>见下面</p></li></ol><h2 id="indexed-nested-loop-join"><a href="#indexed-nested-loop-join" class="headerlink" title="indexed nested-loop join"></a>indexed nested-loop join</h2><p>要求是natural join或者就是equi-join，在inner对应的属性上有一个索引。优化就是用索引直接找对应的inner元组。那我们定义 Disk access cost = 1 Tt + 1 Ts;</p><p>对于每一个outer的元组，都要有一次用索引在inner中找的过程，这个次数我们记做c，所以一共找的就是  outer元组总数*c ，加上outer需要的寻道数br。</p><p>Disk access cost ＝  $$n_r  \times  c + b_r$$</p><p>那么C就会影响整个cost。<strong>最坏情况下，</strong>要有Hi+1，那么一共花费的时间就是$$Cost= [ n_r \times (H_i +1 ) + b_r ] \times (t_T + t_S)$$, 很有可能是一个不小的花费。那么要把比较小的放在outer。$$n_r$$和$$b_r$$都小一些。<strong>最好情况下</strong>，内存的buffer很大，seek只需要outer、inner、inner-index三次就够了。</p><pre><code>给出一组数据：Num of records of customer: n = 10,000, depositor: n=5000Num of blocks of customer: b = 400, depositor: b=100customer存储在n=50的B+树里面，假设半满。所以高度是log50（10000）=3，c是4最坏开销：（5000*4+100）（t_T*t_s）一般让少的作为外循环。最好的情况是内存足够大，外循环一下子全读进来，那么传输块数：1*100+400（相当于在内存是一大块）寻道次数：1+1（所以不是outer的数目二倍，而是在内存中这个“块”数的2倍）</code></pre><h2 id="merge-join"><a href="#merge-join" class="headerlink" title="merge-join"></a>merge-join</h2><p>输入的两个relation是排好序的。join就是一个归并过程。</p><p>每块都是只读了一次，所以块传输消耗是$$b_r+b_s$$, 寻道开销就是$$(b_r+b_s)/b_b$$，$$b_b$$是空余的buffer块数。如果没有排序，就还需要加上排序的开销。</p><h2 id="hash-join"><a href="#hash-join" class="headerlink" title="hash-join"></a>hash-join</h2><h3 id="partition分区"><a href="#partition分区" class="headerlink" title="partition分区"></a>partition分区</h3><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200901163209958.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200901163209958"></p><p>需要全部读进来再全部写出去，BTcost是2*$$b_r$$。处理过程是先读一大堆进来，再一个个处理写出去，所以每个“一大堆”都需要2次寻道（一次读进来，一次写出去）。总共的seek就是$$2\times(b_r/b_b)$$.</p><p>两个relation都要进行分区。好处就是这样一来需要join的元组都在相同编号的区里面了。</p><p> BTcost就是$b_r+b_s（还是要全读一次）,seeks数目就是，2\times n_h$，nh是一共分好区之后区的数量。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200901164527691.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200901164527691"></p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200901164543428.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200901164543428"></p><ol><li>Partition the relation s using hashing function h.  Partition r similarly.</li><li>For each i:<br>(a)    Load Hsi into memory and build an in-memory hash index on it using the join attribute.  This hash index uses a different hash function than the earlier one h. (将Hsi 读入内存，并建索引)<br>(b)    Read the tuples in Hri from the disk one by one.  For each tuple tr locate each matching tuple ts in Hsi using the in-memory hash index. Output the concatenation of their attributes.</li></ol><p>这里提到，作为build input的relation，每次读入都是完整的一块partition，那么就要求每一块partition的大小不能超过M(内存总共块数)-1（输出）-1（probe input）。然而在分配时，每一个partition都要对应一块输出缓存，也就是总的partition不能超过M-1(放读进来的relation)。这里出现了矛盾：内存小时，限制partition数目少、容量大，会导致后续build input读不进来，那么就需要递归分解，直到可以放下。</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200901170342103.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200901170342103"></p><p>但是实际上还是有可能溢出的，<strong>最坏的情况下，</strong>每个分区都溢出了也就是要多一块出来，相当于读写多了$$2\times n_h$$，那么总共需要的BTcost就是$$3\times(b_r+b_s)+4\times n_h$$，3是排序时候各自两次，join匹配1次，r和s都多$$2\times n_h$$的读写。Seeks就是$$2(\lceil b_r / b_b\rceil + \lceil b_s / b_b \rceil)+2n_h$$次，前面是排序时的seek，后面是连接时的seek。</p><p>假如是需要循环分区的话，需要循环$$2\lceil log_{M-1} (b_s)-1\rceil$$，减一是因为第一次不在循环里面。注意！！！这他妈只是partition的开销！！！</p><p>我草打公式太麻烦了</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200901194518163.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200901194518163"></p><p>其实就是乘上一个系数。那么现在全部的cost就是：</p><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200901194738388.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200901194738388"></p><p>所以还是要小的做那个build input。</p><p>最好的情况下，全都直接加载进来，BTcost只有一次性的$$b_r+b_s$$就没了。</p><pre><code>给出一组数据：Num of records of customer: n = 10,000, depositor: n=5000Num of blocks of customer: b = 400, depositor: b=100M=20块，depositer比较少，拿来做build input，然后加载了6块partition，每个分区大小是18块。对应的customer也加载6个分区，那么每个分区就有400/6约为67。最坏的情况下BTcost：3*（100+400）Seeks：2*（100/3+400/3）+2*6（因为现在20块内存分给6个partition，每个都有3块内存了）</code></pre><h2 id="Complex-joins"><a href="#Complex-joins" class="headerlink" title="Complex  joins"></a>Complex  joins</h2><p><img src="https://raw.githubusercontent.com/silmont2000/BlogPic/master/img/image-20200901203431544.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200901203431544"></p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System：索引等</title>
    <link href="/silmont2000.github.io/2020/05/20/Database-System%EF%BC%9A%E7%B4%A2%E5%BC%95%E7%AD%89/"/>
    <url>/silmont2000.github.io/2020/05/20/Database-System%EF%BC%9A%E7%B4%A2%E5%BC%95%E7%AD%89/</url>
    
    <content type="html"><![CDATA[<h1 id="本篇不是总结"><a href="#本篇不是总结" class="headerlink" title="本篇不是总结"></a>本篇不是总结</h1><ol><li><p>索引分为顺序(ordered)和散列（hash indices)索引。</p></li><li><p>评价因素：ACCESS TYPES 支持相等/范围查找？哈希索引就不擅长范围查找；access/insertion/deletion time ,space overhead(空间开销)。</p></li><li><p>主索引（primary index / clustering index）/二级索引(non-clustering index / secondary index)的区别：索引的search key是否是记录顺序排序的依据。但不一定是主码。</p></li><li><p>二级索引一定是稠密索引(dense index)，而不能是稀疏索引 (sparse index)，因为二级索引不具备遍历的条件，记录不是按照二级索引排列的。</p></li><li><p>多级索引的好处是索引占的空间小，节约磁盘访问开销，缺点是维护成本高，插入删除时可能每一层都需要更新.</p></li><li><p>稀疏索引的好处：索引少，占空间少，维护的开销相对来说小，缺点是有点慢。解决办法是每块一个稀疏索引项，然后定位到块，读进内存，内存的遍历就会快很多。</p></li><li><p>在搜索时使用的是二分法（Binary search），所以如果索引项占据了n个块，搜索时间复杂度是<br>$$<br>\lceil log_2N \rceil<br>$$<br>那么假如二级索引有10个，一共需要的时间就是（4+1+1）*15 ms(一个block read的时间)=90 ms。</p></li></ol><p><img src="/silmont2000.github.io/2020/05/20/Database-System%EF%BC%9A%E7%B4%A2%E5%BC%95%E7%AD%89/image-20200520101033334.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200520101033334"></p><ol start="8"><li>无论是主索引还是二级索引都可以应用多级索引，因为索引本身是有顺序的。</li><li>按主索引的遍历也是比较快的，但按照二级索引就会很麻烦</li></ol><h1 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h1><p>优点是调整的开销比较小，缺点是维护开销比较大（局部的小调整），空间上存在浪费</p><ol><li><p>B+树是平衡树，从root到叶子结点的步长相等</p><p><img src="/silmont2000.github.io/2020/05/20/Database-System%EF%BC%9A%E7%B4%A2%E5%BC%95%E7%AD%89/image-20200520102644452.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200520102644452"></p></li><li><p>只有叶子节点之间才有连续的指针-&gt;，是为了遍历方便</p></li><li><p>通常一个节点对应一个block</p></li><li><p>非叶节点构成了多层的稀疏索引</p></li><li><p>假如每个节点都达到刚好半满，一共有M个search key，那么树的高度最大是<br>$$<br>log_{\lceil n/2 \rceil} (M)<br>$$</p></li></ol><p>   n为最大扇出数。每层有n/2个key，每个key下一层还有n/2个key。</p><h1 id="用B-树的文件组织"><a href="#用B-树的文件组织" class="headerlink" title="用B+树的文件组织"></a>用B+树的文件组织</h1><p>直接把数据记录放到叶节点上。提高空间利用率可以提高下限，但是同时维护的代价会上升。</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: 数据存储、硬件</title>
    <link href="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/"/>
    <url>/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>本文基本来源数据库系统概念第六版英文版</p><h1 id="物理储存介质总览"><a href="#物理储存介质总览" class="headerlink" title="物理储存介质总览"></a>物理储存介质总览</h1><h2 id="高速缓存Cache"><a href="#高速缓存Cache" class="headerlink" title="高速缓存Cache"></a>高速缓存Cache</h2><p>速度：最快</p><p>价格：最贵</p><p>大小：相对来说比较小</p><p>可靠性：易失的volatile</p><h2 id="主存main-memory"><a href="#主存main-memory" class="headerlink" title="主存main memory"></a>主存main memory</h2><p>主存上执行通用命令</p><p>速度：很快</p><p>价格：对于存储数据库来说较昂贵</p><p>大小：对于数据库来说不够</p><p>可靠性：易失的</p><h2 id="闪存flash-memeory"><a href="#闪存flash-memeory" class="headerlink" title="闪存flash memeory"></a>闪存flash memeory</h2><p>分为NAND和NOR两种，相同成本下NAND的储存能力更好，它也被广泛应用在笔记本电脑、相机等。闪存在越来越多的替代磁盘，一方面它的存储总量不断变大，已经大于主存，另一方面它取得信息的速度也快于磁盘。</p><p>价格：比主存低一些</p><p>可靠性：不易失的 nonvolatile</p><h2 id="磁盘-magnetic-disk"><a href="#磁盘-magnetic-disk" class="headerlink" title="磁盘 magnetic-disk"></a>磁盘 magnetic-disk</h2><p>通常整个数据库是存储在磁盘上的，然后系统将这些数据转移到主存来操作，然后把改写好的数据写回磁盘。是不易失的。</p><h2 id="总体上来说"><a href="#总体上来说" class="headerlink" title="总体上来说"></a>总体上来说</h2><p>价格越低，读写数据越慢，越不易失，反之就越快、越易失。</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200507112949377.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200507112949377"></p><h1 id="磁盘和闪存"><a href="#磁盘和闪存" class="headerlink" title="磁盘和闪存"></a>磁盘和闪存</h1><p>磁盘是以块的形式来储存数据的。对于一个数据库来说，可能需要几百个磁盘。闪存的容量飞速的扩大，逐渐成为可以与磁盘相匹敌的存在。</p><h2 id="物理特征"><a href="#物理特征" class="headerlink" title="物理特征"></a>物理特征</h2><p>一个磁盘-》多个“盘”-》多个磁道-》多个扇区，扇区是储存的最小单位。通常我们认为一个磁盘有一到五个盘（platter），一个盘有5万到10万个磁道（track），一个磁道有500-1000个扇区（sector），一个扇区有512 byte。磁道是环形排列的，所以最里面的长度最短。在旋转时他们是高度同步的，所以上下所有盘的第i个磁道被称为第i个cylinder。</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200507114019603.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200507114019603"></p><p><strong>磁盘管理器（disk controller）</strong>实现了从系统到硬件之间的接口。磁盘管理器是放置在磁盘驱动中的，它接受IO命令，然后驱动arm移动到第几个磁道；在向磁盘写入数据时，他还负责向每个sector中写入校验和；读出（read back）数据时重新计算校验和（checksums）并和取出时候的比较。如果出现问题就会重新进行一次read操作，如果多次读数据之后还是错误就会发出一个warning；当发现有扇区损坏时，它会在物理上将数据换到其他的扇区（remapping of bad sectors）。出于这个目的，磁盘在设计之初也会留有一些空余的扇区。这些分配信息可能储存在磁盘自己身上，也有可能储存在其他不易失的介质上。</p><h2 id="表现衡量（主要涉及到计算）"><a href="#表现衡量（主要涉及到计算）" class="headerlink" title="表现衡量（主要涉及到计算）"></a>表现衡量（主要涉及到计算）</h2><p>The main measures of the qualities of a disk are capacity, access time, data-transfer </p><p>rate, and reliability. 磁盘质量的主要衡量指标是容量，访问时间，数据传输速率和可靠性。</p><h3 id="ACCESS-TIME-seek-time-rotational-latency-time"><a href="#ACCESS-TIME-seek-time-rotational-latency-time" class="headerlink" title="ACCESS TIME = seek time + rotational latency time"></a>ACCESS TIME = seek time + rotational latency time</h3><p>指系统发出IO命令后到数据开始传输的时间。物理上，这个过程包括：ARM先移动到正确的track上（<strong>对应seek time</strong>），然后等待磁盘旋转到需要的扇区位置（<strong>对应rotational latency time</strong>）。</p><p>seek time可能一般有2-30毫秒（milliseconds），理所当然地，更近的轨道位置、小的platter相对来说寻道时间就更短。所以这是没有实际意义的。对此提出了 average seek time的概念：用一系列均匀的命令去测试。</p><pre><code>如果所有磁道具有相同的扇区数，并且我们忽略磁头开始移动和停止移动所需的时间，我们可以证明平均寻道时间是最坏情况下寻道时间的三分之一。考虑到这些因素，平均寻道时间约为最大寻道时间的一半。当前，平均搜索时间在4到10毫秒之间，具体取决于磁盘型号。</code></pre><p>现在磁盘的旋转速度大约是每分钟5400到15000转。我们认为平均需要转半圈来找到对应的扇区，所以rotational latency time也就是转一圈的一半时间。</p><p>总结下来access time 大约是8-20毫秒之间。一旦所需扇区到达磁头，数据传输立即开始。</p><h3 id="data-transfer-rate"><a href="#data-transfer-rate" class="headerlink" title="data-transfer rate"></a>data-transfer rate</h3><p>The data-transfer rate is the rate at which data can be retrieved from or stored to the disk。这指读取和写入数据的rate。当下的磁盘能支持的最大传输rate是每秒25-100兆字节。但对于靠内的磁道来说他们的传输速率明显小于最大值，因为他们的扇区太少了。</p><h3 id="MTTF"><a href="#MTTF" class="headerlink" title="MTTF"></a>MTTF</h3><p>mean time to failure 这是一个衡量可靠性（reliability）的指标。这是一个磁盘能够不间断正常运行的时间。根据vendor的理论现在这个数值在57到136年。当然这是模拟计算出来的。</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>严格的来说这是仅仅针对access的优化。</p><p>一系列的请求也分为两种，顺序访问和随机访问。在顺序访问中，第一次需要寻道，那之后就可以连续的访问，或者有短暂的寻找相邻扇区的seek time。但在随机的访问中每一块都要重新寻道，每秒大约能做100-200次，慢了很多。</p><p>所以人们做了很多的优化：</p><h3 id="buffering缓冲"><a href="#buffering缓冲" class="headerlink" title="buffering缓冲"></a>buffering缓冲</h3><p>读出来的数据放入内存的缓冲区，数据库系统和操作系统都会做这件事。</p><h3 id="read-ahead"><a href="#read-ahead" class="headerlink" title="read-ahead"></a>read-ahead</h3><p>即使暂时没有请求，也先读入一些后面一个扇区的内容到内存缓冲区，这样对顺序访问来说就快了很多。操作系统自己也会有一些提前读的常规操作，但这对于随机访问用处不大。</p><h3 id="scheduling"><a href="#scheduling" class="headerlink" title="scheduling"></a>scheduling</h3><p>这有点像坐电梯，即经典的升降机算法，以此来调度arm的行为。在升降机算法的控制下，对于有访问请求的每个轨道，手臂将停止在该轨道上，为该轨道提供服务，然后继续向外移动，直到没有等待更远的轨道的请求为止。在这一点上，手臂改变方向，并向内移动，再次停在有要求的每个轨道上，直到到达没有要求向中心更远的轨道的轨道为止。然后，它反转方向并开始新的循环。磁盘控制器通常执行重新排序读取请求以提高性能的任务，因为它们密切了解磁盘上块的组织，磁盘盘的旋转位置以及磁盘臂的位置。（以上为机翻）</p><h3 id="file-organization"><a href="#file-organization" class="headerlink" title="file organization"></a>file organization</h3><p>我们可以把磁盘上的数据按照希望的顺序来放。例如，如果我们希望文件被顺序访问，那么理想情况下，我们应该将文件的所有块顺序保留在相邻柱面上。较早的操作系统（例如IBM大型机操作系统）为程序员提供了对文件放置的精细控制，从而使程序设计人员或管理员可以轻松地对文件进行处理。但是，这种控制给程序员带来了负担。或由系统管理员决定要为一个文件分配多少个柱面，并且如果将数据插入文件或从文件中删除数据，则可能需要进行昂贵的重组。</p><p>这之后的系统就不再向用户展示这部分功能了，转而自动的给一个文件分配相邻的空间（extent）。但长此以往，一个多次被追加的文件还是会变得支离破碎的，对此操作系统会进行重写（restore），先备份一下数据，然后整理写回。</p><p>这极大地提高了access的效率。</p><h3 id="nonvolatile-write-buffers"><a href="#nonvolatile-write-buffers" class="headerlink" title="nonvolatile write buffers"></a>nonvolatile write buffers</h3><p>平常使用非易失性随机存取存储器（nonvolatile random-access memory）来存一些主存的东西（因为主存易失）。这可以用来极大地提高性能。当一个file要被写入disk，磁盘管理器把它写进NRAM,然后转头告诉数据库系统已经写完了。之后没事儿了或者存满了它再慢慢地写到磁盘里面去。</p><p>系统崩溃后的恢复时，NRAM中所有还没写到disk的数据都会写到disk去。</p><h3 id="log-disk"><a href="#log-disk" class="headerlink" title="log disk"></a>log disk</h3><p>和上面的方法很像的是拿一个盘来专门写顺序存储的数据，这之后在写到应该写的位置。这就比随机的写又快了很多。</p><p>此外，日志磁盘可以对写入进行重新排序，以最大程度地减少磁盘臂移动。如果系统在完成对实际磁盘位置的写入之前崩溃了，则在系统恢复备份时，它将读取日志磁盘以查找尚未完成的写入，然后执行这些写入。</p><p>支持这个操作的系统被称之为日记文件系统。日志文件系统也可以没有这个日志盘，就在一个磁盘上操作。这样做可以降低金钱成本，但会降低性能。</p><h2 id="闪存"><a href="#闪存" class="headerlink" title="闪存"></a>闪存</h2><p>NOR闪存允许随机访问存储器的各个字，并且读取时间与主存相当。但是，与NOR闪存不同，从NAND闪存读取数据需要从NAND闪存中提取<strong>整页数据</strong>，通常包括512到4096字节之间的数据，并将其从主存储器中取出。因此，NAND闪存中的页面类似于磁盘中的扇区。但是NAND闪存比NOR闪存便宜得多，并且具有更高的存储容量，并且到目前为止使用更为广泛。</p><p>使用NAND闪存构建的存储系统提供与磁盘存储相同的面向块的接口。与磁盘相比，闪存可以提供更快的随机访问：一页数据可以从闪存中检索大约1或2微秒，而对磁盘的随机访问则需要5到10毫秒。<strong>闪存的传输速率比磁盘低</strong>，常见的是每秒20兆字节。最近的一些闪存将传输速率提高了每秒100至200兆字节。但是，固态驱动器并行使用多个闪存芯片，以将传输速率提高到每秒200兆字节，这比大多数磁盘的传输速率快。写入闪存要复杂一些。写入闪存页面通常需要几微秒。但是，一旦写入，则<strong>不能直接覆盖闪存的页面</strong>。相反，必须先擦除它，然后再<strong>重写</strong>。可以一次在多个页面上执行擦除操作，称为擦除块（erase block），大约需要1到2毫秒。擦除块的大小（在闪存文献中通常称为“块”）通常明显大于存储系统的块大小。此外，对闪存页的擦除次数有限制，通常约为100,000至1,000,000次。一旦达到此限制，则可能会发生存储位错误。</p><p>闪存系统通过将逻辑页码映射到物理页码来限制慢速擦除速度和更新限制的影响。当您对所有用户都进行了更改时，可以删除原来的位置。每个物理页都有一小部分内存用于存储其逻辑地址。如果逻辑地址重新映射到另一个物理页面，则原始物理页面被标记为已删除。因此，通过扫描物理页面，我们可以找到每个逻辑页面所在的位置。</p><p>逻辑到物理的页面映射被复制到内存中的转换表中，以便快速访问。定期擦除包含多个已删除页面的块，请务必先将这些块中未删除的页面复制到另一个块中（为这些未删除的页面更新翻译表）。由于每个物理页面只能更新固定次数，因此，已多次擦除的物理页面被分配为“冷数据”，即很少更新的数据，而未擦除多次的页面则被用于存储“热数据”，即经常更新的数据。这种在物理块上均匀分配擦除操作的原理称为损耗均衡（wear leveling），并由闪存控制器透明地进行分配。如果物理页由于过多的更新而损坏，则可以将其从使用中删除，而不会影响整个闪存。</p><p>以上所有操作均由称为闪存翻译层（flash translation layer）的软件层执行。</p><h1 id="文件组织"><a href="#文件组织" class="headerlink" title="文件组织"></a>文件组织</h1><p>文件是操作系统的基底。</p><p>每一个文件在逻辑上被分成一些定长的block，这些block也是分配储存空间和数据传输的单元。通常默认的block大小是4-8 k 字节，但对特定的数据库实例来说block大小也允许被指定。至于一个block能储存多少信息，要看所用的数据组织形式。、</p><p>以下默认没有一条储存记录比一个block还大（大部分情况是成立的，除了一些图片什么的），并且能够完整的储存在一个block里面，不存在截断。</p><h2 id="定长fixed-length-records"><a href="#定长fixed-length-records" class="headerlink" title="定长fixed-length records"></a>定长fixed-length records</h2><pre><code class="sql">type instructor = record     ID varchar (5);     name varchar(20);     dept name varchar (20);     salary numeric (8,2); end </code></pre><p>这个记录的长度为5+20+20+8=53 bytes。也就是每53个字节分配一个元组。缺点：</p><ol><li><p>一个block很有可能不是53字节的倍数大小，所以就会造成结尾的元组跨块，访问时需要访问两个block。</p></li><li><p>维护困难。删除中间的某一个记录时需要其他记录的填充。</p></li></ol><p>解决：</p><ol><li>对于那些需要跨块的记录直接换到下一块。剩下的就不用了。</li><li>把删除记录后面的所有记录都往前移动一个，或者把最后一条记录移动到这里，更好的做法是让这块空间等待下一次插入，因为插入比删除来说操作更简单、频繁，而且移动记录还需要额外的access。但如果只是标记一下这个位置空了，在插入时就不容易找到它。所以引入了新的组织形式：</li></ol><p>在文件开头，分配一个file header，现在就只需要mark第一个内容被删除了的记录的地址。这个第一条记录就用来储存下一个被删除的records的地址，有点像指针。这些链表式的记录被称为free list。</p><p>On insertion of a new record, we use the record pointed to by the header. We change the header pointer to point to the next available record. If no space is available, we add the new record to the end of the file. </p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200513140036551.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200513140036551"></p><h2 id="变长-variable-length-records"><a href="#变长-variable-length-records" class="headerlink" title="变长 variable-length records"></a>变长 variable-length records</h2><p>在同一个文件里面存储不同类型的记录，或允许一个或多个内存单元可变长度的，或者允许重复字段的（例如数组或多集）。在存储变长数据时需要考虑的问题是，怎样保证单独的属性能够便捷地取出和怎样在一个block中便捷地取出一条完整的记录。</p><p>一般来说变长记录的展示方式一般有两个部分，定长部分+变长部分（好像是废话）。变长部分在前面先以pair的形式出现（offset，length），offset是开始的位置，length是属性长度。这些属性的值在记录的初始固定长度部分之后连续存储。因此，<strong>记录的初始部分存储有关每个属性的固定大小的信息，无论它是固定长度还是可变长度。</strong>不变长度的属性通常是数字、日期、定长字符串等，变长的则一般是varchar。</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200513193356581.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200513193356581"></p><p>在这个instructor的元组里，只有salary是定长属性（65000）。分析一下结构：前面几个是（offset，length）的标记，每一个占2字节，共12字节；之后是定长的salary，因为是numeric (8,2)所以占8字节，后面接null bitmap，后面接变长部分，就是简单的一个字符一个字节啦。</p><p>这里要提一嘴null bitmap，它用来记录哪个属性是空值，长度是1字节（0000）。如果工资是空值，工资是表中第四个属性，这个null bitmap会变成0001. 在12-19上的信息就会被忽略，但空间还是保留。在另一种情况下， bitmap被放在记录的最前面，并且空值是不被留空间的。这样的表示将节省一些存储空间，但要付出额外的工作来提取记录的属性。在那种，有很多很多空属性的表里会选择这样的方法。</p><p>接下来，我们解决将可变长度记录存储在块中的问题。分页页面（slotted-page structure）结构通常用于组织块内的记录，如图10.9所示。3每个块的开头都有一个标头，其中包含以下信息：</p><ol><li>The number of record entries in the header. </li><li>The end of free space in the block. </li><li>An array whose entries contain the location and size of each record. </li></ol><ol><li>标题中的记录条目数。</li><li>块中的可用空间的末尾。</li><li>一个数组，其条目包含每个记录的位置和大小。</li></ol><p>向block写入时是从结尾处开始写的，所以结束条目（entry）-&gt;block开头这段空间是连续的空白。</p><p>在删除记录时，占用空间释放，条目状态变为删除，比如大小用-1表示。然后后面所有的记录都向前移动，保证空余空间连续。同时指向空余空间末尾的指针也会更新，记录的扩展和缩小也是类似的，只要剩余空间还足够就可以。因为空间是固定的，所以移动记录的代价不是非常大。</p><p>值得注意的是，指针不会指向真正的记录，而是指向entries。Entries中存储的是数据的真正地址。</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517181844381.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517181844381"></p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517171442087.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517171442087"></p><p>但一个数据库的信息总量往往不是一页（一个block）就能储存的。一些图片或者音频，会用sql所支持的blob或clob来存储。</p><h1 id="文件中的记录存储组织"><a href="#文件中的记录存储组织" class="headerlink" title="文件中的记录存储组织"></a>文件中的记录存储组织</h1><ol><li>堆存储。也叫流水存储。在文件中可以随便放，只要放的下就可以。也没什么顺序，每一个relation对应一个单独的文件。</li><li>顺序。根据search key来排列。</li><li>哈希表。给每一个record计算出对应的哈希值，然后得到应该存放的位置。</li></ol><p>以上都是一个relation就对应一个文件的。还有一种多表集群文件组织（multi-table clustering file organization），可能同一个file里面存着不同relation的record。</p><h2 id="重点：顺序存储"><a href="#重点：顺序存储" class="headerlink" title="重点：顺序存储"></a>重点：顺序存储</h2><p>search key不一定非要是主键，随便什么属性都可以。排列时理论上为了最快的取用，我们用指针来链接相邻的record，为了最少的block access，我们尽可能的按照search key来排列。</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517173025413.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517173025413"></p><p>但为了维护这个顺序关系，移动record的代价是非常大的。所以我们通常用指针来解决这个问题。比如一次插入之后：</p><ol><li>在要按搜索键顺序插入记录之前的文件中放一下该记录。</li><li>如果在与此记录相同的块中有空闲记录（即删除后剩余的空间），则在其中插入新记录。否则，请将新记录插入溢出块中。但无论是哪一种，指针（链表）都需要更新。</li></ol><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517180759337.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517180759337"></p><p>在溢出的记录很少的时候，这种方法非常奏效。但久而久之物理上就往往不是按照search key顺序排列的了（lost the correspondence) 。这时候顺序存储就不再那么高效了。这时候可能需要重整（reorganized），但重整的代价将是巨大的，而且必须在系统占用少的时候完成。重整的频率基本和插入数据的频率成正相关。</p><h2 id="多表群集文件组织"><a href="#多表群集文件组织" class="headerlink" title="多表群集文件组织"></a>多表群集文件组织</h2><h2 id="Multitable-Clustering-File-Organization"><a href="#Multitable-Clustering-File-Organization" class="headerlink" title="Multitable Clustering File Organization"></a>Multitable Clustering File Organization</h2><p>一个relation一个file的组织形式很适合低成本的，比如嵌入式的系统、便携设备数据库等的实现。这些情况下数据库总量小，复杂的文件组织优势不明显。另外，在这种情况下，目标代码（object code）也要，简单的文件组织缩减了代码量。</p><p>但是当文件变大时，他就不那么有效了。即使我们保留一个relation一个file，更为复杂的文件组织也可以为我们提供一些优势。</p><p>但是，许多大型数据库系统并不直接依赖底层操作系统进行文件管理。而是将一个较大的操作系统文件分配给数据库系统。然后数据库系统把所有的relation都存在这里面自己管理。但是同时，虽然一个relation不能独自占有一个file了，他们大部分时间还是会放在同一个block里面。其他的时候呢，把多个relation放在一起存储，也有一些好处。比如：</p><pre><code class="sql">select dept name, building, budget, ID, name, salary from department natural join instructor; </code></pre><p>最坏的情况下每个需要取的元组都在不同的block上，但也可以像下面这样混起来存储：</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517213920465.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517213920465"></p><p>在上面，每个学院之后跟随相应老师的信息。老师的学院信息因为重复而被省略了。这对于上面那条指令来说就非常高效。但对于其他的指令来说就不一定了。比如：</p><pre><code class="sql">select * from department; </code></pre><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517214350754.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517214350754"></p><p>反而需要更多的block access。为了方便，我们也用指针把同类型的连接起来。</p><p>最终怎么组织，还要取决于这个数据库最频繁的操作是什么。</p><h1 id="数据字典-Data-Dictionary"><a href="#数据字典-Data-Dictionary" class="headerlink" title="数据字典 Data-Dictionary"></a>数据字典 Data-Dictionary</h1><p>元数据，metadata，用来存储数据的数据：比如relation的schema之类的。数据字典（或者system catalog）就是用来存放这些的。存储的信息有：</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517214835344.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517214835344"></p><p>（Integrity constraints (for example, key constraints). ，完整性约束，例如…）</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517214951783.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517214951783"></p><p>这些元数据可以有一个单独的文件，也可以用表去管理，也存在数据库里面。下面这些就是新建数据库时会自动生成的一些元数据表：</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517215857220.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517215857220"></p><h1 id="数据缓冲-buffer"><a href="#数据缓冲-buffer" class="headerlink" title="数据缓冲 buffer"></a>数据缓冲 buffer</h1><p>磁盘和内存之间的读写速度有很大的差别，所以要是什么都从磁盘直接IO就会很慢。所以创建了buffer作为操作的媒介。</p><p>磁盘的信息可以放到buffer里面（buffer在内存），暂时IO。但是buffer的大小肯定不能让它全部吞下数据库，所以就需要一些管理方式。</p><p>从数据库（磁盘）读是以块的形式读的，存到缓存的page里面。一个page和一个block差不多一样大。</p><p><img src="/silmont2000.github.io/2020/05/07/Database-System-%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E3%80%81%E7%A1%AC%E4%BB%B6/image-20200517220346224.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200517220346224"></p><p>pinned：已经被应用程序“盯住”，不允许交换、写回去。</p><p>dirty：某些数据被修改过了</p><p>应用先调用buffer manager，看看缓存，如果缓存里面已经有需要的信息，就返回地址（理想状态）；否则就要分配一块新的空间。但假如空间不够，还需要舍弃（throwing out）旧的page。如果是dirty的，就写回磁盘，加入没改过，就直接扔掉。然后读新的内容到buffer里面，放到新的page。</p><p>至于替换哪一些呢？这几道LRU/MRU策略。</p><p>LRU：替换最少用的；MRU：替换刚用的。</p><p>至于用哪种，就需要缓存管理做一些估计。除了IO信息。还会记录一些某个指令涉及到哪些relation的信息。但是现在更常用的是Heuristic法则，就是把数据字典一直放在内存缓存。</p><h2 id="写回的几种情况："><a href="#写回的几种情况：" class="headerlink" title="写回的几种情况："></a>写回的几种情况：</h2><p>pinned block：当被多个应用使用的时候，pin count会增加，只有==0的时候才能释放或写回去。</p><p>toss-immediate 立即丢弃。最后一个元组处理完了就扔。</p><p>forced output：强制输出。某一时刻需要确定所有的改动都已经写回去了，所有的脏页都被强制写回去。</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
      <tag>硬件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 随机人名生成器</title>
    <link href="/silmont2000.github.io/2020/04/21/Java-%E9%9A%8F%E6%9C%BA%E4%BA%BA%E5%90%8D%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <url>/silmont2000.github.io/2020/04/21/Java-%E9%9A%8F%E6%9C%BA%E4%BA%BA%E5%90%8D%E7%94%9F%E6%88%90%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h1><p>整点啥  我也想整点好玩的（</p><p>不是不是  是因为那个图书管理系统要有大量的图书测试数据，然后我现在词汇过度贫乏，自己编书名人名出版社太难受了，想整个随机生成的玩意</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>我们用到的主要是GB 2312-80规范。先抄一下维基百科：</p><p>编码规则<br>GB 2312-80 是中国国家标准简体中文字符集，全称《信息交换用汉字编码字符集·基本集》。GB2312 中对所收汉字进行了“分区”处理，每区含有 94 个汉字/符号。这种表示方式也称为区位码。</p><p>01 - 09 区为特殊符号。<br>16 - 55 区为一级汉字，按<strong>拼音</strong>排序。<br>56 - 87 区为二级汉字，按<strong>部首/笔画</strong>排序。<br>10 - 15 区及 88 - 94 区则未有编码。举例来说，“啊”字是 GB 2312 之中的第一个汉字，它的区位码就是 1601，16：第一个汉字区，01区位码。</p><p><strong>每个汉字及符号以两个字节来表示</strong>。第一个字节称为“高位字节”，第二个字节称为“低位字节”。“高位字节”使用了 0xA1 - 0xF7（把 01 - 87 区的区号加上 0xA0），“低位字节”使用了 0xA1 - 0xFE（把 01 - 94 位的位号加上 0xA0）。 由于一级汉字从 16 区起始，<strong>汉字区的“高位字节”的范围是 0xB0 - 0xF7，“低位字节”的范围是 0xA1 - 0xFE</strong>，占用的码位是 72 * 94 = 6768。其中有 5 个空位是 D7FA - D7FE。例如“啊”字在大多数程序中，会以两个字节，0xB0（第一个字节）0xA1（第二个字节）储存。（与区位码对比：0xB0 = 0xA0 + 16, 0xA1 = 0xA0 + 1）。</p><p>所以，要随机取汉字，就在合法范围内生成随机数就OK了。</p><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p>一些（别人爬的）字库：</p><h3 id="1-常用3000字，提高结果的日常性"><a href="#1-常用3000字，提高结果的日常性" class="headerlink" title="1. 常用3000字，提高结果的日常性"></a>1. 常用3000字，提高结果的日常性</h3><pre><code class="java"> String[] usual = {                &quot;一&quot;, &quot;乙&quot;, &quot;二&quot;, &quot;十&quot;, &quot;丁&quot;, &quot;厂&quot;, &quot;七&quot;, &quot;卜&quot;, &quot;八&quot;, &quot;人&quot;, &quot;入&quot;, &quot;儿&quot;, &quot;九&quot;, &quot;几&quot;, &quot;了&quot;, &quot;乃&quot;, &quot;刀&quot;, &quot;力&quot;, &quot;又&quot;, &quot;三&quot;, &quot;干&quot;, &quot;于&quot;, &quot;亏&quot;, &quot;士&quot;, &quot;土&quot;                , &quot;工&quot;, &quot;才&quot;, &quot;下&quot;, &quot;寸&quot;, &quot;丈&quot;, &quot;大&quot;, &quot;与&quot;, &quot;万&quot;, &quot;上&quot;, &quot;小&quot;, &quot;口&quot;, &quot;山&quot;, &quot;巾&quot;, &quot;千&quot;, &quot;乞&quot;, &quot;川&quot;, &quot;亿&quot;, &quot;个&quot;, &quot;么&quot;, &quot;久&quot;, &quot;勺&quot;, &quot;丸&quot;, &quot;夕&quot;, &quot;凡&quot;, &quot;及&quot;                , &quot;广&quot;, &quot;亡&quot;, &quot;门&quot;, &quot;义&quot;, &quot;之&quot;, &quot;尸&quot;, &quot;已&quot;, &quot;弓&quot;, &quot;己&quot;, &quot;卫&quot;, &quot;子&quot;, &quot;也&quot;, &quot;女&quot;, &quot;飞&quot;, &quot;刃&quot;, &quot;习&quot;, &quot;叉&quot;, &quot;马&quot;, &quot;乡&quot;, &quot;丰&quot;, &quot;王&quot;, &quot;井&quot;, &quot;开&quot;, &quot;夫&quot;, &quot;天&quot;                , &quot;元&quot;, &quot;无&quot;, &quot;云&quot;, &quot;专&quot;, &quot;扎&quot;, &quot;艺&quot;, &quot;木&quot;, &quot;五&quot;, &quot;支&quot;, &quot;厅&quot;, &quot;不&quot;, &quot;太&quot;, &quot;犬&quot;, &quot;区&quot;, &quot;历&quot;, &quot;友&quot;, &quot;尤&quot;, &quot;匹&quot;, &quot;车&quot;, &quot;巨&quot;, &quot;牙&quot;, &quot;屯&quot;, &quot;比&quot;, &quot;互&quot;, &quot;切&quot;                , &quot;瓦&quot;, &quot;止&quot;, &quot;少&quot;, &quot;日&quot;, &quot;中&quot;, &quot;贝&quot;, &quot;内&quot;, &quot;水&quot;, &quot;冈&quot;, &quot;见&quot;, &quot;手&quot;, &quot;午&quot;, &quot;牛&quot;, &quot;毛&quot;, &quot;气&quot;, &quot;升&quot;, &quot;长&quot;, &quot;仁&quot;, &quot;什&quot;, &quot;片&quot;, &quot;仆&quot;, &quot;化&quot;, &quot;仇&quot;, &quot;币&quot;, &quot;仍&quot;                , &quot;仅&quot;, &quot;斤&quot;, &quot;爪&quot;, &quot;反&quot;, &quot;介&quot;, &quot;父&quot;, &quot;从&quot;, &quot;今&quot;, &quot;凶&quot;, &quot;分&quot;, &quot;乏&quot;, &quot;公&quot;, &quot;仓&quot;, &quot;月&quot;, &quot;氏&quot;, &quot;勿&quot;, &quot;风&quot;, &quot;欠&quot;, &quot;丹&quot;, &quot;匀&quot;, &quot;乌&quot;, &quot;勾&quot;, &quot;凤&quot;, &quot;六&quot;, &quot;文&quot;                , &quot;方&quot;, &quot;火&quot;, &quot;为&quot;, &quot;斗&quot;, &quot;忆&quot;, &quot;计&quot;, &quot;订&quot;, &quot;户&quot;, &quot;认&quot;, &quot;心&quot;, &quot;尺&quot;, &quot;引&quot;, &quot;丑&quot;, &quot;巴&quot;, &quot;孔&quot;, &quot;队&quot;, &quot;办&quot;, &quot;以&quot;, &quot;允&quot;, &quot;予&quot;, &quot;劝&quot;, &quot;双&quot;, &quot;书&quot;, &quot;幻&quot;, &quot;玉&quot;                , &quot;刊&quot;, &quot;末&quot;, &quot;未&quot;, &quot;示&quot;, &quot;击&quot;, &quot;打&quot;, &quot;巧&quot;, &quot;正&quot;, &quot;扑&quot;, &quot;扒&quot;, &quot;功&quot;, &quot;扔&quot;, &quot;去&quot;, &quot;甘&quot;, &quot;世&quot;, &quot;古&quot;, &quot;节&quot;, &quot;本&quot;, &quot;术&quot;, &quot;可&quot;, &quot;丙&quot;, &quot;左&quot;, &quot;厉&quot;, &quot;石&quot;, &quot;右&quot;                , &quot;布&quot;, &quot;龙&quot;, &quot;平&quot;, &quot;灭&quot;, &quot;轧&quot;, &quot;东&quot;, &quot;卡&quot;, &quot;北&quot;, &quot;占&quot;, &quot;业&quot;, &quot;旧&quot;, &quot;帅&quot;, &quot;归&quot;, &quot;目&quot;, &quot;旦&quot;, &quot;且&quot;, &quot;叮&quot;, &quot;叶&quot;, &quot;甲&quot;, &quot;申&quot;, &quot;号&quot;, &quot;电&quot;, &quot;田&quot;, &quot;由&quot;, &quot;只&quot;                , &quot;央&quot;, &quot;史&quot;, &quot;兄&quot;, &quot;叼&quot;, &quot;叫&quot;, &quot;叨&quot;, &quot;另&quot;, &quot;叹&quot;, &quot;四&quot;, &quot;生&quot;, &quot;失&quot;, &quot;禾&quot;, &quot;丘&quot;, &quot;付&quot;, &quot;仗&quot;, &quot;代&quot;, &quot;仙&quot;, &quot;们&quot;, &quot;仪&quot;, &quot;白&quot;, &quot;仔&quot;, &quot;他&quot;, &quot;斥&quot;, &quot;瓜&quot;, &quot;乎&quot;                , &quot;丛&quot;, &quot;令&quot;, &quot;用&quot;, &quot;甩&quot;, &quot;印&quot;, &quot;乐&quot;, &quot;句&quot;, &quot;匆&quot;, &quot;册&quot;, &quot;犯&quot;, &quot;外&quot;, &quot;处&quot;, &quot;冬&quot;, &quot;鸟&quot;, &quot;务&quot;, &quot;包&quot;, &quot;饥&quot;, &quot;主&quot;, &quot;市&quot;, &quot;立&quot;, &quot;闪&quot;, &quot;兰&quot;, &quot;半&quot;, &quot;汁&quot;, &quot;汇&quot;                , &quot;头&quot;, &quot;汉&quot;, &quot;宁&quot;, &quot;穴&quot;, &quot;它&quot;, &quot;讨&quot;, &quot;写&quot;, &quot;让&quot;, &quot;礼&quot;, &quot;训&quot;, &quot;必&quot;, &quot;议&quot;, &quot;讯&quot;, &quot;记&quot;, &quot;永&quot;, &quot;司&quot;, &quot;尼&quot;, &quot;民&quot;, &quot;出&quot;, &quot;辽&quot;, &quot;奶&quot;, &quot;奴&quot;, &quot;加&quot;, &quot;召&quot;, &quot;皮&quot;                , &quot;边&quot;, &quot;孕&quot;, &quot;发&quot;, &quot;圣&quot;, &quot;对&quot;, &quot;台&quot;, &quot;矛&quot;, &quot;纠&quot;, &quot;母&quot;, &quot;幼&quot;, &quot;丝&quot;, &quot;式&quot;, &quot;刑&quot;, &quot;动&quot;, &quot;扛&quot;, &quot;寺&quot;, &quot;吉&quot;, &quot;扣&quot;, &quot;考&quot;, &quot;托&quot;, &quot;老&quot;, &quot;圾&quot;, &quot;巩&quot;, &quot;执&quot;, &quot;扩&quot;                , &quot;扫&quot;, &quot;地&quot;, &quot;扬&quot;, &quot;场&quot;, &quot;耳&quot;, &quot;共&quot;, &quot;芒&quot;, &quot;亚&quot;, &quot;芝&quot;, &quot;朽&quot;, &quot;朴&quot;, &quot;机&quot;, &quot;权&quot;, &quot;过&quot;, &quot;臣&quot;, &quot;再&quot;, &quot;协&quot;, &quot;西&quot;, &quot;压&quot;, &quot;厌&quot;, &quot;在&quot;, &quot;百&quot;, &quot;有&quot;, &quot;存&quot;, &quot;而&quot;                , &quot;页&quot;, &quot;匠&quot;, &quot;夸&quot;, &quot;夺&quot;, &quot;灰&quot;, &quot;达&quot;, &quot;列&quot;, &quot;死&quot;, &quot;成&quot;, &quot;夹&quot;, &quot;轨&quot;, &quot;邪&quot;, &quot;划&quot;, &quot;迈&quot;, &quot;毕&quot;, &quot;至&quot;, &quot;此&quot;, &quot;贞&quot;, &quot;师&quot;, &quot;尘&quot;, &quot;尖&quot;, &quot;劣&quot;, &quot;光&quot;, &quot;当&quot;, &quot;早&quot;                , &quot;吐&quot;, &quot;吓&quot;, &quot;虫&quot;, &quot;曲&quot;, &quot;团&quot;, &quot;同&quot;, &quot;吊&quot;, &quot;吃&quot;, &quot;因&quot;, &quot;吸&quot;, &quot;吗&quot;, &quot;屿&quot;, &quot;帆&quot;, &quot;岁&quot;, &quot;回&quot;, &quot;岂&quot;, &quot;则&quot;, &quot;刚&quot;, &quot;网&quot;, &quot;肉&quot;, &quot;年&quot;, &quot;朱&quot;, &quot;先&quot;, &quot;丢&quot;, &quot;舌&quot;                , &quot;竹&quot;, &quot;迁&quot;, &quot;乔&quot;, &quot;伟&quot;, &quot;传&quot;, &quot;乒&quot;, &quot;乓&quot;, &quot;休&quot;, &quot;伍&quot;, &quot;伏&quot;, &quot;优&quot;, &quot;伐&quot;, &quot;延&quot;, &quot;件&quot;, &quot;任&quot;, &quot;伤&quot;, &quot;价&quot;, &quot;份&quot;, &quot;华&quot;, &quot;仰&quot;, &quot;仿&quot;, &quot;伙&quot;, &quot;伪&quot;, &quot;自&quot;, &quot;血&quot;                , &quot;向&quot;, &quot;似&quot;, &quot;后&quot;, &quot;行&quot;, &quot;舟&quot;, &quot;全&quot;, &quot;会&quot;, &quot;杀&quot;, &quot;合&quot;, &quot;兆&quot;, &quot;企&quot;, &quot;众&quot;, &quot;爷&quot;, &quot;伞&quot;, &quot;创&quot;, &quot;肌&quot;, &quot;朵&quot;, &quot;杂&quot;, &quot;危&quot;, &quot;旬&quot;, &quot;旨&quot;, &quot;负&quot;, &quot;各&quot;, &quot;名&quot;, &quot;多&quot;                , &quot;争&quot;, &quot;色&quot;, &quot;壮&quot;, &quot;冲&quot;, &quot;冰&quot;, &quot;庄&quot;, &quot;庆&quot;, &quot;亦&quot;, &quot;刘&quot;, &quot;齐&quot;, &quot;交&quot;, &quot;次&quot;, &quot;衣&quot;, &quot;产&quot;, &quot;决&quot;, &quot;充&quot;, &quot;妄&quot;, &quot;闭&quot;, &quot;问&quot;, &quot;闯&quot;, &quot;羊&quot;, &quot;并&quot;, &quot;关&quot;, &quot;米&quot;, &quot;灯&quot;                , &quot;州&quot;, &quot;汗&quot;, &quot;污&quot;, &quot;江&quot;, &quot;池&quot;, &quot;汤&quot;, &quot;忙&quot;, &quot;兴&quot;, &quot;宇&quot;, &quot;守&quot;, &quot;宅&quot;, &quot;字&quot;, &quot;安&quot;, &quot;讲&quot;, &quot;军&quot;, &quot;许&quot;, &quot;论&quot;, &quot;农&quot;, &quot;讽&quot;, &quot;设&quot;, &quot;访&quot;, &quot;寻&quot;, &quot;那&quot;, &quot;迅&quot;, &quot;尽&quot;                , &quot;导&quot;, &quot;异&quot;, &quot;孙&quot;, &quot;阵&quot;, &quot;阳&quot;, &quot;收&quot;, &quot;阶&quot;, &quot;阴&quot;, &quot;防&quot;, &quot;奸&quot;, &quot;如&quot;, &quot;妇&quot;, &quot;好&quot;, &quot;她&quot;, &quot;妈&quot;, &quot;戏&quot;, &quot;羽&quot;, &quot;观&quot;, &quot;欢&quot;, &quot;买&quot;, &quot;红&quot;, &quot;纤&quot;, &quot;约&quot;, &quot;级&quot;, &quot;纪&quot;                , &quot;驰&quot;, &quot;巡&quot;, &quot;寿&quot;, &quot;弄&quot;, &quot;麦&quot;, &quot;形&quot;, &quot;进&quot;, &quot;戒&quot;, &quot;吞&quot;, &quot;远&quot;, &quot;违&quot;, &quot;运&quot;, &quot;扶&quot;, &quot;抚&quot;, &quot;坛&quot;, &quot;技&quot;, &quot;坏&quot;, &quot;扰&quot;, &quot;拒&quot;, &quot;找&quot;, &quot;批&quot;, &quot;扯&quot;, &quot;址&quot;, &quot;走&quot;, &quot;抄&quot;                , &quot;坝&quot;, &quot;贡&quot;, &quot;攻&quot;, &quot;赤&quot;, &quot;折&quot;, &quot;抓&quot;, &quot;扮&quot;, &quot;抢&quot;, &quot;孝&quot;, &quot;均&quot;, &quot;抛&quot;, &quot;投&quot;, &quot;坟&quot;, &quot;坑&quot;, &quot;抗&quot;, &quot;坊&quot;, &quot;抖&quot;, &quot;护&quot;, &quot;壳&quot;, &quot;志&quot;, &quot;块&quot;, &quot;扭&quot;, &quot;声&quot;, &quot;把&quot;, &quot;报&quot;                , &quot;却&quot;, &quot;劫&quot;, &quot;芽&quot;, &quot;花&quot;, &quot;芹&quot;, &quot;芬&quot;, &quot;苍&quot;, &quot;芳&quot;, &quot;严&quot;, &quot;芦&quot;, &quot;劳&quot;, &quot;克&quot;, &quot;苏&quot;, &quot;杆&quot;, &quot;杜&quot;, &quot;杠&quot;, &quot;材&quot;, &quot;村&quot;, &quot;杏&quot;, &quot;极&quot;, &quot;李&quot;, &quot;杨&quot;, &quot;求&quot;, &quot;更&quot;, &quot;束&quot;                , &quot;豆&quot;, &quot;两&quot;, &quot;丽&quot;, &quot;医&quot;, &quot;辰&quot;, &quot;励&quot;, &quot;否&quot;, &quot;还&quot;, &quot;歼&quot;, &quot;来&quot;, &quot;连&quot;, &quot;步&quot;, &quot;坚&quot;, &quot;旱&quot;, &quot;盯&quot;, &quot;呈&quot;, &quot;时&quot;, &quot;吴&quot;, &quot;助&quot;, &quot;县&quot;, &quot;里&quot;, &quot;呆&quot;, &quot;园&quot;, &quot;旷&quot;, &quot;围&quot;                , &quot;呀&quot;, &quot;吨&quot;, &quot;足&quot;, &quot;邮&quot;, &quot;男&quot;, &quot;困&quot;, &quot;吵&quot;, &quot;串&quot;, &quot;员&quot;, &quot;听&quot;, &quot;吩&quot;, &quot;吹&quot;, &quot;呜&quot;, &quot;吼&quot;, &quot;吧&quot;, &quot;别&quot;, &quot;岗&quot;, &quot;帐&quot;, &quot;财&quot;, &quot;钉&quot;, &quot;针&quot;, &quot;告&quot;, &quot;我&quot;, &quot;乱&quot;, &quot;利&quot;                , &quot;秃&quot;, &quot;秀&quot;, &quot;私&quot;, &quot;每&quot;, &quot;兵&quot;, &quot;估&quot;, &quot;体&quot;, &quot;何&quot;, &quot;但&quot;, &quot;伸&quot;, &quot;作&quot;, &quot;伯&quot;, &quot;伶&quot;, &quot;佣&quot;, &quot;低&quot;, &quot;你&quot;, &quot;住&quot;, &quot;位&quot;, &quot;伴&quot;, &quot;身&quot;, &quot;皂&quot;, &quot;佛&quot;, &quot;近&quot;, &quot;彻&quot;, &quot;役&quot;                , &quot;返&quot;, &quot;余&quot;, &quot;希&quot;, &quot;坐&quot;, &quot;谷&quot;, &quot;妥&quot;, &quot;含&quot;, &quot;邻&quot;, &quot;岔&quot;, &quot;肝&quot;, &quot;肚&quot;, &quot;肠&quot;, &quot;龟&quot;, &quot;免&quot;, &quot;狂&quot;, &quot;犹&quot;, &quot;角&quot;, &quot;删&quot;, &quot;条&quot;, &quot;卵&quot;, &quot;岛&quot;, &quot;迎&quot;, &quot;饭&quot;, &quot;饮&quot;, &quot;系&quot;                , &quot;言&quot;, &quot;冻&quot;, &quot;状&quot;, &quot;亩&quot;, &quot;况&quot;, &quot;床&quot;, &quot;库&quot;, &quot;疗&quot;, &quot;应&quot;, &quot;冷&quot;, &quot;这&quot;, &quot;序&quot;, &quot;辛&quot;, &quot;弃&quot;, &quot;冶&quot;, &quot;忘&quot;, &quot;闲&quot;, &quot;间&quot;, &quot;闷&quot;, &quot;判&quot;, &quot;灶&quot;, &quot;灿&quot;, &quot;弟&quot;, &quot;汪&quot;, &quot;沙&quot;                , &quot;汽&quot;, &quot;沃&quot;, &quot;泛&quot;, &quot;沟&quot;, &quot;没&quot;, &quot;沈&quot;, &quot;沉&quot;, &quot;怀&quot;, &quot;忧&quot;, &quot;快&quot;, &quot;完&quot;, &quot;宋&quot;, &quot;宏&quot;, &quot;牢&quot;, &quot;究&quot;, &quot;穷&quot;, &quot;灾&quot;, &quot;良&quot;, &quot;证&quot;, &quot;启&quot;, &quot;评&quot;, &quot;补&quot;, &quot;初&quot;, &quot;社&quot;, &quot;识&quot;                , &quot;诉&quot;, &quot;诊&quot;, &quot;词&quot;, &quot;译&quot;, &quot;君&quot;, &quot;灵&quot;, &quot;即&quot;, &quot;层&quot;, &quot;尿&quot;, &quot;尾&quot;, &quot;迟&quot;, &quot;局&quot;, &quot;改&quot;, &quot;张&quot;, &quot;忌&quot;, &quot;际&quot;, &quot;陆&quot;, &quot;阿&quot;, &quot;陈&quot;, &quot;阻&quot;, &quot;附&quot;, &quot;妙&quot;, &quot;妖&quot;, &quot;妨&quot;, &quot;努&quot;                , &quot;忍&quot;, &quot;劲&quot;, &quot;鸡&quot;, &quot;驱&quot;, &quot;纯&quot;, &quot;纱&quot;, &quot;纲&quot;, &quot;纳&quot;, &quot;纵&quot;, &quot;驳&quot;, &quot;纷&quot;, &quot;纸&quot;, &quot;纹&quot;, &quot;纺&quot;, &quot;驴&quot;, &quot;纽&quot;, &quot;奉&quot;, &quot;玩&quot;, &quot;环&quot;, &quot;武&quot;, &quot;青&quot;, &quot;责&quot;, &quot;现&quot;, &quot;表&quot;, &quot;规&quot;                , &quot;抹&quot;, &quot;拢&quot;, &quot;拔&quot;, &quot;拣&quot;, &quot;坦&quot;, &quot;担&quot;, &quot;押&quot;, &quot;抽&quot;, &quot;拐&quot;, &quot;拖&quot;, &quot;者&quot;, &quot;拍&quot;, &quot;顶&quot;, &quot;拆&quot;, &quot;拥&quot;, &quot;抵&quot;, &quot;拘&quot;, &quot;势&quot;, &quot;抱&quot;, &quot;垃&quot;, &quot;拉&quot;, &quot;拦&quot;, &quot;幸&quot;, &quot;拌&quot;, &quot;招&quot;                , &quot;坡&quot;, &quot;披&quot;, &quot;拨&quot;, &quot;择&quot;, &quot;抬&quot;, &quot;其&quot;, &quot;取&quot;, &quot;苦&quot;, &quot;若&quot;, &quot;茂&quot;, &quot;苹&quot;, &quot;苗&quot;, &quot;英&quot;, &quot;范&quot;, &quot;直&quot;, &quot;茄&quot;, &quot;茎&quot;, &quot;茅&quot;, &quot;林&quot;, &quot;枝&quot;, &quot;杯&quot;, &quot;柜&quot;, &quot;析&quot;, &quot;板&quot;, &quot;松&quot;                , &quot;枪&quot;, &quot;构&quot;, &quot;杰&quot;, &quot;述&quot;, &quot;枕&quot;, &quot;丧&quot;, &quot;或&quot;, &quot;画&quot;, &quot;卧&quot;, &quot;事&quot;, &quot;刺&quot;, &quot;枣&quot;, &quot;雨&quot;, &quot;卖&quot;, &quot;矿&quot;, &quot;码&quot;, &quot;厕&quot;, &quot;奔&quot;, &quot;奇&quot;, &quot;奋&quot;, &quot;态&quot;, &quot;欧&quot;, &quot;垄&quot;, &quot;妻&quot;, &quot;轰&quot;                , &quot;顷&quot;, &quot;转&quot;, &quot;斩&quot;, &quot;轮&quot;, &quot;软&quot;, &quot;到&quot;, &quot;非&quot;, &quot;叔&quot;, &quot;肯&quot;, &quot;齿&quot;, &quot;些&quot;, &quot;虎&quot;, &quot;虏&quot;, &quot;肾&quot;, &quot;贤&quot;, &quot;尚&quot;, &quot;旺&quot;, &quot;具&quot;, &quot;果&quot;, &quot;味&quot;, &quot;昆&quot;, &quot;国&quot;, &quot;昌&quot;, &quot;畅&quot;, &quot;明&quot;                , &quot;易&quot;, &quot;昂&quot;, &quot;典&quot;, &quot;固&quot;, &quot;忠&quot;, &quot;咐&quot;, &quot;呼&quot;, &quot;鸣&quot;, &quot;咏&quot;, &quot;呢&quot;, &quot;岸&quot;, &quot;岩&quot;, &quot;帖&quot;, &quot;罗&quot;, &quot;帜&quot;, &quot;岭&quot;, &quot;凯&quot;, &quot;败&quot;, &quot;贩&quot;, &quot;购&quot;, &quot;图&quot;, &quot;钓&quot;, &quot;制&quot;, &quot;知&quot;, &quot;垂&quot;                , &quot;牧&quot;, &quot;物&quot;, &quot;乖&quot;, &quot;刮&quot;, &quot;秆&quot;, &quot;和&quot;, &quot;季&quot;, &quot;委&quot;, &quot;佳&quot;, &quot;侍&quot;, &quot;供&quot;, &quot;使&quot;, &quot;例&quot;, &quot;版&quot;, &quot;侄&quot;, &quot;侦&quot;, &quot;侧&quot;, &quot;凭&quot;, &quot;侨&quot;, &quot;佩&quot;, &quot;货&quot;, &quot;依&quot;, &quot;的&quot;, &quot;迫&quot;, &quot;质&quot;                , &quot;欣&quot;, &quot;征&quot;, &quot;往&quot;, &quot;爬&quot;, &quot;彼&quot;, &quot;径&quot;, &quot;所&quot;, &quot;舍&quot;, &quot;金&quot;, &quot;命&quot;, &quot;斧&quot;, &quot;爸&quot;, &quot;采&quot;, &quot;受&quot;, &quot;乳&quot;, &quot;贪&quot;, &quot;念&quot;, &quot;贫&quot;, &quot;肤&quot;, &quot;肺&quot;, &quot;肢&quot;, &quot;肿&quot;, &quot;胀&quot;, &quot;朋&quot;, &quot;股&quot;                , &quot;肥&quot;, &quot;服&quot;, &quot;胁&quot;, &quot;周&quot;, &quot;昏&quot;, &quot;鱼&quot;, &quot;兔&quot;, &quot;狐&quot;, &quot;忽&quot;, &quot;狗&quot;, &quot;备&quot;, &quot;饰&quot;, &quot;饱&quot;, &quot;饲&quot;, &quot;变&quot;, &quot;京&quot;, &quot;享&quot;, &quot;店&quot;, &quot;夜&quot;, &quot;庙&quot;, &quot;府&quot;, &quot;底&quot;, &quot;剂&quot;, &quot;郊&quot;, &quot;废&quot;                , &quot;净&quot;, &quot;盲&quot;, &quot;放&quot;, &quot;刻&quot;, &quot;育&quot;, &quot;闸&quot;, &quot;闹&quot;, &quot;郑&quot;, &quot;券&quot;, &quot;卷&quot;, &quot;单&quot;, &quot;炒&quot;, &quot;炊&quot;, &quot;炕&quot;, &quot;炎&quot;, &quot;炉&quot;, &quot;沫&quot;, &quot;浅&quot;, &quot;法&quot;, &quot;泄&quot;, &quot;河&quot;, &quot;沾&quot;, &quot;泪&quot;, &quot;油&quot;, &quot;泊&quot;                , &quot;沿&quot;, &quot;泡&quot;, &quot;注&quot;, &quot;泻&quot;, &quot;泳&quot;, &quot;泥&quot;, &quot;沸&quot;, &quot;波&quot;, &quot;泼&quot;, &quot;泽&quot;, &quot;治&quot;, &quot;怖&quot;, &quot;性&quot;, &quot;怕&quot;, &quot;怜&quot;, &quot;怪&quot;, &quot;学&quot;, &quot;宝&quot;, &quot;宗&quot;, &quot;定&quot;, &quot;宜&quot;, &quot;审&quot;, &quot;宙&quot;, &quot;官&quot;, &quot;空&quot;                , &quot;帘&quot;, &quot;实&quot;, &quot;试&quot;, &quot;郎&quot;, &quot;诗&quot;, &quot;肩&quot;, &quot;房&quot;, &quot;诚&quot;, &quot;衬&quot;, &quot;衫&quot;, &quot;视&quot;, &quot;话&quot;, &quot;诞&quot;, &quot;询&quot;, &quot;该&quot;, &quot;详&quot;, &quot;建&quot;, &quot;肃&quot;, &quot;隶&quot;, &quot;录&quot;, &quot;居&quot;, &quot;届&quot;, &quot;刷&quot;, &quot;屈&quot;, &quot;弦&quot;                , &quot;承&quot;, &quot;孟&quot;, &quot;孤&quot;, &quot;陕&quot;, &quot;降&quot;, &quot;限&quot;, &quot;妹&quot;, &quot;姑&quot;, &quot;姐&quot;, &quot;姓&quot;, &quot;始&quot;, &quot;驾&quot;, &quot;参&quot;, &quot;艰&quot;, &quot;线&quot;, &quot;练&quot;, &quot;组&quot;, &quot;细&quot;, &quot;驶&quot;, &quot;织&quot;, &quot;终&quot;, &quot;驻&quot;, &quot;驼&quot;, &quot;绍&quot;, &quot;经&quot;                , &quot;贯&quot;, &quot;奏&quot;, &quot;春&quot;, &quot;帮&quot;, &quot;珍&quot;, &quot;玻&quot;, &quot;毒&quot;, &quot;型&quot;, &quot;挂&quot;, &quot;封&quot;, &quot;持&quot;, &quot;项&quot;, &quot;垮&quot;, &quot;挎&quot;, &quot;城&quot;, &quot;挠&quot;, &quot;政&quot;, &quot;赴&quot;, &quot;赵&quot;, &quot;挡&quot;, &quot;挺&quot;, &quot;括&quot;, &quot;拴&quot;, &quot;拾&quot;, &quot;挑&quot;                , &quot;指&quot;, &quot;垫&quot;, &quot;挣&quot;, &quot;挤&quot;, &quot;拼&quot;, &quot;挖&quot;, &quot;按&quot;, &quot;挥&quot;, &quot;挪&quot;, &quot;某&quot;, &quot;甚&quot;, &quot;革&quot;, &quot;荐&quot;, &quot;巷&quot;, &quot;带&quot;, &quot;草&quot;, &quot;茧&quot;, &quot;茶&quot;, &quot;荒&quot;, &quot;茫&quot;, &quot;荡&quot;, &quot;荣&quot;, &quot;故&quot;, &quot;胡&quot;, &quot;南&quot;                , &quot;药&quot;, &quot;标&quot;, &quot;枯&quot;, &quot;柄&quot;, &quot;栋&quot;, &quot;相&quot;, &quot;查&quot;, &quot;柏&quot;, &quot;柳&quot;, &quot;柱&quot;, &quot;柿&quot;, &quot;栏&quot;, &quot;树&quot;, &quot;要&quot;, &quot;咸&quot;, &quot;威&quot;, &quot;歪&quot;, &quot;研&quot;, &quot;砖&quot;, &quot;厘&quot;, &quot;厚&quot;, &quot;砌&quot;, &quot;砍&quot;, &quot;面&quot;, &quot;耐&quot;                , &quot;耍&quot;, &quot;牵&quot;, &quot;残&quot;, &quot;殃&quot;, &quot;轻&quot;, &quot;鸦&quot;, &quot;皆&quot;, &quot;背&quot;, &quot;战&quot;, &quot;点&quot;, &quot;临&quot;, &quot;览&quot;, &quot;竖&quot;, &quot;省&quot;, &quot;削&quot;, &quot;尝&quot;, &quot;是&quot;, &quot;盼&quot;, &quot;眨&quot;, &quot;哄&quot;, &quot;哑&quot;, &quot;显&quot;, &quot;冒&quot;, &quot;映&quot;, &quot;星&quot;                , &quot;昨&quot;, &quot;畏&quot;, &quot;趴&quot;, &quot;胃&quot;, &quot;贵&quot;, &quot;界&quot;, &quot;虹&quot;, &quot;虾&quot;, &quot;蚁&quot;, &quot;思&quot;, &quot;蚂&quot;, &quot;虽&quot;, &quot;品&quot;, &quot;咽&quot;, &quot;骂&quot;, &quot;哗&quot;, &quot;咱&quot;, &quot;响&quot;, &quot;哈&quot;, &quot;咬&quot;, &quot;咳&quot;, &quot;哪&quot;, &quot;炭&quot;, &quot;峡&quot;, &quot;罚&quot;                , &quot;贱&quot;, &quot;贴&quot;, &quot;骨&quot;, &quot;钞&quot;, &quot;钟&quot;, &quot;钢&quot;, &quot;钥&quot;, &quot;钩&quot;, &quot;卸&quot;, &quot;缸&quot;, &quot;拜&quot;, &quot;看&quot;, &quot;矩&quot;, &quot;怎&quot;, &quot;牲&quot;, &quot;选&quot;, &quot;适&quot;, &quot;秒&quot;, &quot;香&quot;, &quot;种&quot;, &quot;秋&quot;, &quot;科&quot;, &quot;重&quot;, &quot;复&quot;, &quot;竿&quot;                , &quot;段&quot;, &quot;便&quot;, &quot;俩&quot;, &quot;货&quot;, &quot;顺&quot;, &quot;修&quot;, &quot;保&quot;, &quot;促&quot;, &quot;侮&quot;, &quot;俭&quot;, &quot;俗&quot;, &quot;俘&quot;, &quot;信&quot;, &quot;皇&quot;, &quot;泉&quot;, &quot;鬼&quot;, &quot;侵&quot;, &quot;追&quot;, &quot;俊&quot;, &quot;盾&quot;, &quot;待&quot;, &quot;律&quot;, &quot;很&quot;, &quot;须&quot;, &quot;叙&quot;                , &quot;剑&quot;, &quot;逃&quot;, &quot;食&quot;, &quot;盆&quot;, &quot;胆&quot;, &quot;胜&quot;, &quot;胞&quot;, &quot;胖&quot;, &quot;脉&quot;, &quot;勉&quot;, &quot;狭&quot;, &quot;狮&quot;, &quot;独&quot;, &quot;狡&quot;, &quot;狱&quot;, &quot;狠&quot;, &quot;贸&quot;, &quot;怨&quot;, &quot;急&quot;, &quot;饶&quot;, &quot;蚀&quot;, &quot;饺&quot;, &quot;饼&quot;, &quot;弯&quot;, &quot;将&quot;                , &quot;奖&quot;, &quot;哀&quot;, &quot;亭&quot;, &quot;亮&quot;, &quot;度&quot;, &quot;迹&quot;, &quot;庭&quot;, &quot;疮&quot;, &quot;疯&quot;, &quot;疫&quot;, &quot;疤&quot;, &quot;姿&quot;, &quot;亲&quot;, &quot;音&quot;, &quot;帝&quot;, &quot;施&quot;, &quot;闻&quot;, &quot;阀&quot;, &quot;阁&quot;, &quot;差&quot;, &quot;养&quot;, &quot;美&quot;, &quot;姜&quot;, &quot;叛&quot;, &quot;送&quot;                , &quot;类&quot;, &quot;迷&quot;, &quot;前&quot;, &quot;首&quot;, &quot;逆&quot;, &quot;总&quot;, &quot;炼&quot;, &quot;炸&quot;, &quot;炮&quot;, &quot;烂&quot;, &quot;剃&quot;, &quot;洁&quot;, &quot;洪&quot;, &quot;洒&quot;, &quot;浇&quot;, &quot;浊&quot;, &quot;洞&quot;, &quot;测&quot;, &quot;洗&quot;, &quot;活&quot;, &quot;派&quot;, &quot;洽&quot;, &quot;染&quot;, &quot;济&quot;, &quot;洋&quot;                , &quot;洲&quot;, &quot;浑&quot;, &quot;浓&quot;, &quot;津&quot;, &quot;恒&quot;, &quot;恢&quot;, &quot;恰&quot;, &quot;恼&quot;, &quot;恨&quot;, &quot;举&quot;, &quot;觉&quot;, &quot;宣&quot;, &quot;室&quot;, &quot;宫&quot;, &quot;宪&quot;, &quot;突&quot;, &quot;穿&quot;, &quot;窃&quot;, &quot;客&quot;, &quot;冠&quot;, &quot;语&quot;, &quot;扁&quot;, &quot;袄&quot;, &quot;祖&quot;, &quot;神&quot;                , &quot;祝&quot;, &quot;误&quot;, &quot;诱&quot;, &quot;说&quot;, &quot;诵&quot;, &quot;垦&quot;, &quot;退&quot;, &quot;既&quot;, &quot;屋&quot;, &quot;昼&quot;, &quot;费&quot;, &quot;陡&quot;, &quot;眉&quot;, &quot;孩&quot;, &quot;除&quot;, &quot;险&quot;, &quot;院&quot;, &quot;娃&quot;, &quot;姥&quot;, &quot;姨&quot;, &quot;姻&quot;, &quot;娇&quot;, &quot;怒&quot;, &quot;架&quot;, &quot;贺&quot;                , &quot;盈&quot;, &quot;勇&quot;, &quot;怠&quot;, &quot;柔&quot;, &quot;垒&quot;, &quot;绑&quot;, &quot;绒&quot;, &quot;结&quot;, &quot;绕&quot;, &quot;骄&quot;, &quot;绘&quot;, &quot;给&quot;, &quot;络&quot;, &quot;骆&quot;, &quot;绝&quot;, &quot;绞&quot;, &quot;统&quot;, &quot;耕&quot;, &quot;耗&quot;, &quot;艳&quot;, &quot;泰&quot;, &quot;珠&quot;, &quot;班&quot;, &quot;素&quot;, &quot;蚕&quot;                , &quot;顽&quot;, &quot;盏&quot;, &quot;匪&quot;, &quot;捞&quot;, &quot;栽&quot;, &quot;捕&quot;, &quot;振&quot;, &quot;载&quot;, &quot;赶&quot;, &quot;起&quot;, &quot;盐&quot;, &quot;捎&quot;, &quot;捏&quot;, &quot;埋&quot;, &quot;捉&quot;, &quot;捆&quot;, &quot;捐&quot;, &quot;损&quot;, &quot;都&quot;, &quot;哲&quot;, &quot;逝&quot;, &quot;捡&quot;, &quot;换&quot;, &quot;挽&quot;, &quot;热&quot;                , &quot;恐&quot;, &quot;壶&quot;, &quot;挨&quot;, &quot;耻&quot;, &quot;耽&quot;, &quot;恭&quot;, &quot;莲&quot;, &quot;莫&quot;, &quot;荷&quot;, &quot;获&quot;, &quot;晋&quot;, &quot;恶&quot;, &quot;真&quot;, &quot;框&quot;, &quot;桂&quot;, &quot;档&quot;, &quot;桐&quot;, &quot;株&quot;, &quot;桥&quot;, &quot;桃&quot;, &quot;格&quot;, &quot;校&quot;, &quot;核&quot;, &quot;样&quot;, &quot;根&quot;                , &quot;索&quot;, &quot;哥&quot;, &quot;速&quot;, &quot;逗&quot;, &quot;栗&quot;, &quot;配&quot;, &quot;翅&quot;, &quot;辱&quot;, &quot;唇&quot;, &quot;夏&quot;, &quot;础&quot;, &quot;破&quot;, &quot;原&quot;, &quot;套&quot;, &quot;逐&quot;, &quot;烈&quot;, &quot;殊&quot;, &quot;顾&quot;, &quot;轿&quot;, &quot;较&quot;, &quot;顿&quot;, &quot;毙&quot;, &quot;致&quot;, &quot;柴&quot;, &quot;桌&quot;                , &quot;虑&quot;, &quot;监&quot;, &quot;紧&quot;, &quot;党&quot;, &quot;晒&quot;, &quot;眠&quot;, &quot;晓&quot;, &quot;鸭&quot;, &quot;晃&quot;, &quot;晌&quot;, &quot;晕&quot;, &quot;蚊&quot;, &quot;哨&quot;, &quot;哭&quot;, &quot;恩&quot;, &quot;唤&quot;, &quot;啊&quot;, &quot;唉&quot;, &quot;罢&quot;, &quot;峰&quot;, &quot;圆&quot;, &quot;贼&quot;, &quot;贿&quot;, &quot;钱&quot;, &quot;钳&quot;                , &quot;钻&quot;, &quot;铁&quot;, &quot;铃&quot;, &quot;铅&quot;, &quot;缺&quot;, &quot;氧&quot;, &quot;特&quot;, &quot;牺&quot;, &quot;造&quot;, &quot;乘&quot;, &quot;敌&quot;, &quot;秤&quot;, &quot;租&quot;, &quot;秧&quot;, &quot;积&quot;, &quot;秩&quot;, &quot;称&quot;, &quot;秘&quot;, &quot;透&quot;, &quot;笔&quot;, &quot;笑&quot;, &quot;笋&quot;, &quot;债&quot;, &quot;借&quot;, &quot;值&quot;                , &quot;倚&quot;, &quot;倾&quot;, &quot;倒&quot;, &quot;倘&quot;, &quot;俱&quot;, &quot;倡&quot;, &quot;候&quot;, &quot;俯&quot;, &quot;倍&quot;, &quot;倦&quot;, &quot;健&quot;, &quot;臭&quot;, &quot;射&quot;, &quot;躬&quot;, &quot;息&quot;, &quot;徒&quot;, &quot;徐&quot;, &quot;舰&quot;, &quot;舱&quot;, &quot;般&quot;, &quot;航&quot;, &quot;途&quot;, &quot;拿&quot;, &quot;爹&quot;, &quot;爱&quot;                , &quot;颂&quot;, &quot;翁&quot;, &quot;脆&quot;, &quot;脂&quot;, &quot;胸&quot;, &quot;胳&quot;, &quot;脏&quot;, &quot;胶&quot;, &quot;脑&quot;, &quot;狸&quot;, &quot;狼&quot;, &quot;逢&quot;, &quot;留&quot;, &quot;皱&quot;, &quot;饿&quot;, &quot;恋&quot;, &quot;桨&quot;, &quot;浆&quot;, &quot;衰&quot;, &quot;高&quot;, &quot;席&quot;, &quot;准&quot;, &quot;座&quot;, &quot;症&quot;, &quot;病&quot;                , &quot;疾&quot;, &quot;疼&quot;, &quot;疲&quot;, &quot;脊&quot;, &quot;效&quot;, &quot;离&quot;, &quot;唐&quot;, &quot;资&quot;, &quot;凉&quot;, &quot;站&quot;, &quot;剖&quot;, &quot;竞&quot;, &quot;部&quot;, &quot;旁&quot;, &quot;旅&quot;, &quot;畜&quot;, &quot;阅&quot;, &quot;羞&quot;, &quot;瓶&quot;, &quot;拳&quot;, &quot;粉&quot;, &quot;料&quot;, &quot;益&quot;, &quot;兼&quot;, &quot;烤&quot;                , &quot;烘&quot;, &quot;烦&quot;, &quot;烧&quot;, &quot;烛&quot;, &quot;烟&quot;, &quot;递&quot;, &quot;涛&quot;, &quot;浙&quot;, &quot;涝&quot;, &quot;酒&quot;, &quot;涉&quot;, &quot;消&quot;, &quot;浩&quot;, &quot;海&quot;, &quot;涂&quot;, &quot;浴&quot;, &quot;浮&quot;, &quot;流&quot;, &quot;润&quot;, &quot;浪&quot;, &quot;浸&quot;, &quot;涨&quot;, &quot;烫&quot;, &quot;涌&quot;, &quot;悟&quot;                , &quot;悄&quot;, &quot;悔&quot;, &quot;悦&quot;, &quot;害&quot;, &quot;宽&quot;, &quot;家&quot;, &quot;宵&quot;, &quot;宴&quot;, &quot;宾&quot;, &quot;窄&quot;, &quot;容&quot;, &quot;宰&quot;, &quot;案&quot;, &quot;请&quot;, &quot;朗&quot;, &quot;诸&quot;, &quot;读&quot;, &quot;扇&quot;, &quot;袜&quot;, &quot;袖&quot;, &quot;袍&quot;, &quot;被&quot;, &quot;祥&quot;, &quot;课&quot;, &quot;谁&quot;                , &quot;调&quot;, &quot;冤&quot;, &quot;谅&quot;, &quot;谈&quot;, &quot;谊&quot;, &quot;剥&quot;, &quot;恳&quot;, &quot;展&quot;, &quot;剧&quot;, &quot;屑&quot;, &quot;弱&quot;, &quot;陵&quot;, &quot;陶&quot;, &quot;陷&quot;, &quot;陪&quot;, &quot;娱&quot;, &quot;娘&quot;, &quot;通&quot;, &quot;能&quot;, &quot;难&quot;, &quot;预&quot;, &quot;桑&quot;, &quot;绢&quot;, &quot;绣&quot;, &quot;验&quot;                , &quot;继&quot;, &quot;球&quot;, &quot;理&quot;, &quot;捧&quot;, &quot;堵&quot;, &quot;描&quot;, &quot;域&quot;, &quot;掩&quot;, &quot;捷&quot;, &quot;排&quot;, &quot;掉&quot;, &quot;推&quot;, &quot;堆&quot;, &quot;掀&quot;, &quot;授&quot;, &quot;教&quot;, &quot;掏&quot;, &quot;掠&quot;, &quot;培&quot;, &quot;接&quot;, &quot;控&quot;, &quot;探&quot;, &quot;据&quot;, &quot;掘&quot;, &quot;职&quot;                , &quot;基&quot;, &quot;著&quot;, &quot;勒&quot;, &quot;黄&quot;, &quot;萌&quot;, &quot;萝&quot;, &quot;菌&quot;, &quot;菜&quot;, &quot;萄&quot;, &quot;菊&quot;, &quot;萍&quot;, &quot;菠&quot;, &quot;营&quot;, &quot;械&quot;, &quot;梦&quot;, &quot;梢&quot;, &quot;梅&quot;, &quot;检&quot;, &quot;梳&quot;, &quot;梯&quot;, &quot;桶&quot;, &quot;救&quot;, &quot;副&quot;, &quot;票&quot;, &quot;戚&quot;                , &quot;爽&quot;, &quot;聋&quot;, &quot;袭&quot;, &quot;盛&quot;, &quot;雪&quot;, &quot;辅&quot;, &quot;辆&quot;, &quot;虚&quot;, &quot;雀&quot;, &quot;堂&quot;, &quot;常&quot;, &quot;匙&quot;, &quot;晨&quot;, &quot;睁&quot;, &quot;眯&quot;, &quot;眼&quot;, &quot;悬&quot;, &quot;野&quot;, &quot;啦&quot;, &quot;晚&quot;, &quot;啄&quot;, &quot;距&quot;, &quot;跃&quot;, &quot;略&quot;, &quot;蛇&quot;                , &quot;累&quot;, &quot;唱&quot;, &quot;患&quot;, &quot;唯&quot;, &quot;崖&quot;, &quot;崭&quot;, &quot;崇&quot;, &quot;圈&quot;, &quot;铜&quot;, &quot;铲&quot;, &quot;银&quot;, &quot;甜&quot;, &quot;梨&quot;, &quot;犁&quot;, &quot;移&quot;, &quot;笨&quot;, &quot;笼&quot;, &quot;笛&quot;, &quot;符&quot;, &quot;第&quot;, &quot;敏&quot;, &quot;做&quot;, &quot;袋&quot;, &quot;悠&quot;, &quot;偿&quot;                , &quot;偶&quot;, &quot;偷&quot;, &quot;您&quot;, &quot;售&quot;, &quot;停&quot;, &quot;偏&quot;, &quot;假&quot;, &quot;得&quot;, &quot;衔&quot;, &quot;盘&quot;, &quot;船&quot;, &quot;斜&quot;, &quot;盒&quot;, &quot;鸽&quot;, &quot;悉&quot;, &quot;欲&quot;, &quot;彩&quot;, &quot;领&quot;, &quot;脚&quot;, &quot;脖&quot;, &quot;脸&quot;, &quot;脱&quot;, &quot;象&quot;, &quot;够&quot;, &quot;猜&quot;                , &quot;猪&quot;, &quot;猎&quot;, &quot;猫&quot;, &quot;猛&quot;, &quot;馅&quot;, &quot;馆&quot;, &quot;凑&quot;, &quot;减&quot;, &quot;毫&quot;, &quot;麻&quot;, &quot;痒&quot;, &quot;痕&quot;, &quot;廊&quot;, &quot;康&quot;, &quot;庸&quot;, &quot;鹿&quot;, &quot;盗&quot;, &quot;章&quot;, &quot;竟&quot;, &quot;商&quot;, &quot;族&quot;, &quot;旋&quot;, &quot;望&quot;, &quot;率&quot;, &quot;着&quot;                , &quot;盖&quot;, &quot;粘&quot;, &quot;粗&quot;, &quot;粒&quot;, &quot;断&quot;, &quot;剪&quot;, &quot;兽&quot;, &quot;清&quot;, &quot;添&quot;, &quot;淋&quot;, &quot;淹&quot;, &quot;渠&quot;, &quot;渐&quot;, &quot;混&quot;, &quot;渔&quot;, &quot;淘&quot;, &quot;液&quot;, &quot;淡&quot;, &quot;深&quot;, &quot;婆&quot;, &quot;梁&quot;, &quot;渗&quot;, &quot;情&quot;, &quot;惜&quot;, &quot;惭&quot;                , &quot;悼&quot;, &quot;惧&quot;, &quot;惕&quot;, &quot;惊&quot;, &quot;惨&quot;, &quot;惯&quot;, &quot;寇&quot;, &quot;寄&quot;, &quot;宿&quot;, &quot;窑&quot;, &quot;密&quot;, &quot;谋&quot;, &quot;谎&quot;, &quot;祸&quot;, &quot;谜&quot;, &quot;逮&quot;, &quot;敢&quot;, &quot;屠&quot;, &quot;弹&quot;, &quot;随&quot;, &quot;蛋&quot;, &quot;隆&quot;, &quot;隐&quot;, &quot;婚&quot;, &quot;婶&quot;                , &quot;颈&quot;, &quot;绩&quot;, &quot;绪&quot;, &quot;续&quot;, &quot;骑&quot;, &quot;绳&quot;, &quot;维&quot;, &quot;绵&quot;, &quot;绸&quot;, &quot;绿&quot;, &quot;琴&quot;, &quot;斑&quot;, &quot;替&quot;, &quot;款&quot;, &quot;堪&quot;, &quot;塔&quot;, &quot;搭&quot;, &quot;越&quot;, &quot;趁&quot;, &quot;趋&quot;, &quot;超&quot;, &quot;提&quot;, &quot;堤&quot;, &quot;博&quot;, &quot;揭&quot;                , &quot;喜&quot;, &quot;插&quot;, &quot;揪&quot;, &quot;搜&quot;, &quot;煮&quot;, &quot;援&quot;, &quot;裁&quot;, &quot;搁&quot;, &quot;搂&quot;, &quot;搅&quot;, &quot;握&quot;, &quot;揉&quot;, &quot;斯&quot;, &quot;期&quot;, &quot;欺&quot;, &quot;联&quot;, &quot;散&quot;, &quot;惹&quot;, &quot;葬&quot;, &quot;葛&quot;, &quot;董&quot;, &quot;葡&quot;, &quot;敬&quot;, &quot;葱&quot;, &quot;落&quot;                , &quot;朝&quot;, &quot;辜&quot;, &quot;葵&quot;, &quot;棒&quot;, &quot;棋&quot;, &quot;植&quot;, &quot;森&quot;, &quot;椅&quot;, &quot;椒&quot;, &quot;棵&quot;, &quot;棍&quot;, &quot;棉&quot;, &quot;棚&quot;, &quot;棕&quot;, &quot;惠&quot;, &quot;惑&quot;, &quot;逼&quot;, &quot;厨&quot;, &quot;厦&quot;, &quot;硬&quot;, &quot;确&quot;, &quot;雁&quot;, &quot;殖&quot;, &quot;裂&quot;, &quot;雄&quot;                , &quot;暂&quot;, &quot;雅&quot;, &quot;辈&quot;, &quot;悲&quot;, &quot;紫&quot;, &quot;辉&quot;, &quot;敞&quot;, &quot;赏&quot;, &quot;掌&quot;, &quot;晴&quot;, &quot;暑&quot;, &quot;最&quot;, &quot;量&quot;, &quot;喷&quot;, &quot;晶&quot;, &quot;喇&quot;, &quot;遇&quot;, &quot;喊&quot;, &quot;景&quot;, &quot;践&quot;, &quot;跌&quot;, &quot;跑&quot;, &quot;遗&quot;, &quot;蛙&quot;, &quot;蛛&quot;                , &quot;蜓&quot;, &quot;喝&quot;, &quot;喂&quot;, &quot;喘&quot;, &quot;喉&quot;, &quot;幅&quot;, &quot;帽&quot;, &quot;赌&quot;, &quot;赔&quot;, &quot;黑&quot;, &quot;铸&quot;, &quot;铺&quot;, &quot;链&quot;, &quot;销&quot;, &quot;锁&quot;, &quot;锄&quot;, &quot;锅&quot;, &quot;锈&quot;, &quot;锋&quot;, &quot;锐&quot;, &quot;短&quot;, &quot;智&quot;, &quot;毯&quot;, &quot;鹅&quot;, &quot;剩&quot;                , &quot;稍&quot;, &quot;程&quot;, &quot;稀&quot;, &quot;税&quot;, &quot;筐&quot;, &quot;等&quot;, &quot;筑&quot;, &quot;策&quot;, &quot;筛&quot;, &quot;筒&quot;, &quot;答&quot;, &quot;筋&quot;, &quot;筝&quot;, &quot;傲&quot;, &quot;傅&quot;, &quot;牌&quot;, &quot;堡&quot;, &quot;集&quot;, &quot;焦&quot;, &quot;傍&quot;, &quot;储&quot;, &quot;奥&quot;, &quot;街&quot;, &quot;惩&quot;, &quot;御&quot;                , &quot;循&quot;, &quot;艇&quot;, &quot;舒&quot;, &quot;番&quot;, &quot;释&quot;, &quot;禽&quot;, &quot;腊&quot;, &quot;脾&quot;, &quot;腔&quot;, &quot;鲁&quot;, &quot;猾&quot;, &quot;猴&quot;, &quot;然&quot;, &quot;馋&quot;, &quot;装&quot;, &quot;蛮&quot;, &quot;就&quot;, &quot;痛&quot;, &quot;童&quot;, &quot;阔&quot;, &quot;善&quot;, &quot;羡&quot;, &quot;普&quot;, &quot;粪&quot;, &quot;尊&quot;                , &quot;道&quot;, &quot;曾&quot;, &quot;焰&quot;, &quot;港&quot;, &quot;湖&quot;, &quot;渣&quot;, &quot;湿&quot;, &quot;温&quot;, &quot;渴&quot;, &quot;滑&quot;, &quot;湾&quot;, &quot;渡&quot;, &quot;游&quot;, &quot;滋&quot;, &quot;溉&quot;, &quot;愤&quot;, &quot;慌&quot;, &quot;惰&quot;, &quot;愧&quot;, &quot;愉&quot;, &quot;慨&quot;, &quot;割&quot;, &quot;寒&quot;, &quot;富&quot;, &quot;窜&quot;                , &quot;窝&quot;, &quot;窗&quot;, &quot;遍&quot;, &quot;裕&quot;, &quot;裤&quot;, &quot;裙&quot;, &quot;谢&quot;, &quot;谣&quot;, &quot;谦&quot;, &quot;属&quot;, &quot;屡&quot;, &quot;强&quot;, &quot;粥&quot;, &quot;疏&quot;, &quot;隔&quot;, &quot;隙&quot;, &quot;絮&quot;, &quot;嫂&quot;, &quot;登&quot;, &quot;缎&quot;, &quot;缓&quot;, &quot;骗&quot;, &quot;编&quot;, &quot;缘&quot;, &quot;瑞&quot;                , &quot;魂&quot;, &quot;肆&quot;, &quot;摄&quot;, &quot;摸&quot;, &quot;填&quot;, &quot;搏&quot;, &quot;塌&quot;, &quot;鼓&quot;, &quot;摆&quot;, &quot;携&quot;, &quot;搬&quot;, &quot;摇&quot;, &quot;搞&quot;, &quot;塘&quot;, &quot;摊&quot;, &quot;蒜&quot;, &quot;勤&quot;, &quot;鹊&quot;, &quot;蓝&quot;, &quot;墓&quot;, &quot;幕&quot;, &quot;蓬&quot;, &quot;蓄&quot;, &quot;蒙&quot;, &quot;蒸&quot;                , &quot;献&quot;, &quot;禁&quot;, &quot;楚&quot;, &quot;想&quot;, &quot;槐&quot;, &quot;榆&quot;, &quot;楼&quot;, &quot;概&quot;, &quot;赖&quot;, &quot;酬&quot;, &quot;感&quot;, &quot;碍&quot;, &quot;碑&quot;, &quot;碎&quot;, &quot;碰&quot;, &quot;碗&quot;, &quot;碌&quot;, &quot;雷&quot;, &quot;零&quot;, &quot;雾&quot;, &quot;雹&quot;, &quot;输&quot;, &quot;督&quot;, &quot;龄&quot;, &quot;鉴&quot;                , &quot;睛&quot;, &quot;睡&quot;, &quot;睬&quot;, &quot;鄙&quot;, &quot;愚&quot;, &quot;暖&quot;, &quot;盟&quot;, &quot;歇&quot;, &quot;暗&quot;, &quot;照&quot;, &quot;跨&quot;, &quot;跳&quot;, &quot;跪&quot;, &quot;路&quot;, &quot;跟&quot;, &quot;遣&quot;, &quot;蛾&quot;, &quot;蜂&quot;, &quot;嗓&quot;, &quot;置&quot;, &quot;罪&quot;, &quot;罩&quot;, &quot;错&quot;, &quot;锡&quot;, &quot;锣&quot;                , &quot;锤&quot;, &quot;锦&quot;, &quot;键&quot;, &quot;锯&quot;, &quot;矮&quot;, &quot;辞&quot;, &quot;稠&quot;, &quot;愁&quot;, &quot;筹&quot;, &quot;签&quot;, &quot;简&quot;, &quot;毁&quot;, &quot;舅&quot;, &quot;鼠&quot;, &quot;催&quot;, &quot;傻&quot;, &quot;像&quot;, &quot;躲&quot;, &quot;微&quot;, &quot;愈&quot;, &quot;遥&quot;, &quot;腰&quot;, &quot;腥&quot;, &quot;腹&quot;, &quot;腾&quot;                , &quot;腿&quot;, &quot;触&quot;, &quot;解&quot;, &quot;酱&quot;, &quot;痰&quot;, &quot;廉&quot;, &quot;新&quot;, &quot;韵&quot;, &quot;意&quot;, &quot;粮&quot;, &quot;数&quot;, &quot;煎&quot;, &quot;塑&quot;, &quot;慈&quot;, &quot;煤&quot;, &quot;煌&quot;, &quot;满&quot;, &quot;漠&quot;, &quot;源&quot;, &quot;滤&quot;, &quot;滥&quot;, &quot;滔&quot;, &quot;溪&quot;, &quot;溜&quot;, &quot;滚&quot;                , &quot;滨&quot;, &quot;粱&quot;, &quot;滩&quot;, &quot;慎&quot;, &quot;誉&quot;, &quot;塞&quot;, &quot;谨&quot;, &quot;福&quot;, &quot;群&quot;, &quot;殿&quot;, &quot;辟&quot;, &quot;障&quot;, &quot;嫌&quot;, &quot;嫁&quot;, &quot;叠&quot;, &quot;缝&quot;, &quot;缠&quot;, &quot;静&quot;, &quot;碧&quot;, &quot;璃&quot;, &quot;墙&quot;, &quot;嘉&quot;, &quot;摧&quot;, &quot;截&quot;, &quot;誓&quot;                , &quot;境&quot;, &quot;摘&quot;, &quot;摔&quot;, &quot;撇&quot;, &quot;聚&quot;, &quot;慕&quot;, &quot;暮&quot;, &quot;蔑&quot;, &quot;蔽&quot;, &quot;模&quot;, &quot;榴&quot;, &quot;榜&quot;, &quot;榨&quot;, &quot;歌&quot;, &quot;遭&quot;, &quot;酷&quot;, &quot;酿&quot;, &quot;酸&quot;, &quot;磁&quot;, &quot;愿&quot;, &quot;需&quot;, &quot;裳&quot;, &quot;颗&quot;, &quot;嗽&quot;, &quot;蜻&quot;                , &quot;蜡&quot;, &quot;蝇&quot;, &quot;蜘&quot;, &quot;赚&quot;, &quot;锹&quot;, &quot;锻&quot;, &quot;舞&quot;, &quot;稳&quot;, &quot;算&quot;, &quot;箩&quot;, &quot;管&quot;, &quot;僚&quot;, &quot;鼻&quot;, &quot;魄&quot;, &quot;貌&quot;, &quot;膜&quot;, &quot;膊&quot;, &quot;膀&quot;, &quot;鲜&quot;, &quot;疑&quot;, &quot;馒&quot;, &quot;裹&quot;, &quot;敲&quot;, &quot;豪&quot;, &quot;膏&quot;                , &quot;遮&quot;, &quot;腐&quot;, &quot;瘦&quot;, &quot;辣&quot;, &quot;竭&quot;, &quot;端&quot;, &quot;旗&quot;, &quot;精&quot;, &quot;歉&quot;, &quot;弊&quot;, &quot;熄&quot;, &quot;熔&quot;, &quot;漆&quot;, &quot;漂&quot;, &quot;漫&quot;, &quot;滴&quot;, &quot;演&quot;, &quot;漏&quot;, &quot;慢&quot;, &quot;寨&quot;, &quot;赛&quot;, &quot;察&quot;, &quot;蜜&quot;, &quot;谱&quot;, &quot;嫩&quot;                , &quot;翠&quot;, &quot;熊&quot;, &quot;凳&quot;, &quot;骡&quot;, &quot;缩&quot;, &quot;慧&quot;, &quot;撕&quot;, &quot;撒&quot;, &quot;趣&quot;, &quot;趟&quot;, &quot;撑&quot;, &quot;播&quot;, &quot;撞&quot;, &quot;撤&quot;, &quot;增&quot;, &quot;聪&quot;, &quot;鞋&quot;, &quot;蕉&quot;, &quot;蔬&quot;, &quot;横&quot;, &quot;槽&quot;, &quot;樱&quot;, &quot;橡&quot;, &quot;飘&quot;, &quot;醋&quot;                , &quot;醉&quot;, &quot;震&quot;, &quot;霉&quot;, &quot;瞒&quot;, &quot;题&quot;, &quot;暴&quot;, &quot;瞎&quot;, &quot;影&quot;, &quot;踢&quot;, &quot;踏&quot;, &quot;踩&quot;, &quot;踪&quot;, &quot;蝶&quot;, &quot;蝴&quot;, &quot;嘱&quot;, &quot;墨&quot;, &quot;镇&quot;, &quot;靠&quot;, &quot;稻&quot;, &quot;黎&quot;, &quot;稿&quot;, &quot;稼&quot;, &quot;箱&quot;, &quot;箭&quot;, &quot;篇&quot;                , &quot;僵&quot;, &quot;躺&quot;, &quot;僻&quot;, &quot;德&quot;, &quot;艘&quot;, &quot;膝&quot;, &quot;膛&quot;, &quot;熟&quot;, &quot;摩&quot;, &quot;颜&quot;, &quot;毅&quot;, &quot;糊&quot;, &quot;遵&quot;, &quot;潜&quot;, &quot;潮&quot;, &quot;懂&quot;, &quot;额&quot;, &quot;慰&quot;, &quot;劈&quot;, &quot;操&quot;, &quot;燕&quot;, &quot;薯&quot;, &quot;薪&quot;, &quot;薄&quot;, &quot;颠&quot;                , &quot;橘&quot;, &quot;整&quot;, &quot;融&quot;, &quot;醒&quot;, &quot;餐&quot;, &quot;嘴&quot;, &quot;蹄&quot;, &quot;器&quot;, &quot;赠&quot;, &quot;默&quot;, &quot;镜&quot;, &quot;赞&quot;, &quot;篮&quot;, &quot;邀&quot;, &quot;衡&quot;, &quot;膨&quot;, &quot;雕&quot;, &quot;磨&quot;, &quot;凝&quot;, &quot;辨&quot;, &quot;辩&quot;, &quot;糖&quot;, &quot;糕&quot;, &quot;燃&quot;, &quot;澡&quot;                , &quot;激&quot;, &quot;懒&quot;, &quot;壁&quot;, &quot;避&quot;, &quot;缴&quot;, &quot;戴&quot;, &quot;擦&quot;, &quot;鞠&quot;, &quot;藏&quot;, &quot;霜&quot;, &quot;霞&quot;, &quot;瞧&quot;, &quot;蹈&quot;, &quot;螺&quot;, &quot;穗&quot;, &quot;繁&quot;, &quot;辫&quot;, &quot;赢&quot;, &quot;糟&quot;, &quot;糠&quot;, &quot;燥&quot;, &quot;臂&quot;, &quot;翼&quot;, &quot;骤&quot;, &quot;鞭&quot;                , &quot;覆&quot;, &quot;蹦&quot;, &quot;镰&quot;, &quot;翻&quot;, &quot;鹰&quot;, &quot;警&quot;, &quot;攀&quot;, &quot;蹲&quot;, &quot;颤&quot;, &quot;瓣&quot;, &quot;爆&quot;, &quot;疆&quot;, &quot;壤&quot;, &quot;耀&quot;, &quot;躁&quot;, &quot;嚼&quot;, &quot;嚷&quot;, &quot;籍&quot;, &quot;魔&quot;, &quot;灌&quot;, &quot;蠢&quot;, &quot;霸&quot;, &quot;露&quot;, &quot;囊&quot;, &quot;罐&quot;                , &quot;匕&quot;, &quot;刁&quot;, &quot;丐&quot;, &quot;歹&quot;, &quot;戈&quot;, &quot;夭&quot;, &quot;仑&quot;, &quot;讥&quot;, &quot;冗&quot;, &quot;邓&quot;, &quot;艾&quot;, &quot;夯&quot;, &quot;凸&quot;, &quot;卢&quot;, &quot;叭&quot;, &quot;叽&quot;, &quot;皿&quot;, &quot;凹&quot;, &quot;囚&quot;, &quot;矢&quot;, &quot;乍&quot;, &quot;尔&quot;, &quot;冯&quot;, &quot;玄&quot;, &quot;邦&quot;                , &quot;迂&quot;, &quot;邢&quot;, &quot;芋&quot;, &quot;芍&quot;, &quot;吏&quot;, &quot;夷&quot;, &quot;吁&quot;, &quot;吕&quot;, &quot;吆&quot;, &quot;屹&quot;, &quot;廷&quot;, &quot;迄&quot;, &quot;臼&quot;, &quot;仲&quot;, &quot;伦&quot;, &quot;伊&quot;, &quot;肋&quot;, &quot;旭&quot;, &quot;匈&quot;, &quot;凫&quot;, &quot;妆&quot;, &quot;亥&quot;, &quot;汛&quot;, &quot;讳&quot;, &quot;讶&quot;                , &quot;讹&quot;, &quot;讼&quot;, &quot;诀&quot;, &quot;弛&quot;, &quot;阱&quot;, &quot;驮&quot;, &quot;驯&quot;, &quot;纫&quot;, &quot;玖&quot;, &quot;玛&quot;, &quot;韧&quot;, &quot;抠&quot;, &quot;扼&quot;, &quot;汞&quot;, &quot;扳&quot;, &quot;抡&quot;, &quot;坎&quot;, &quot;坞&quot;, &quot;抑&quot;, &quot;拟&quot;, &quot;抒&quot;, &quot;芙&quot;, &quot;芜&quot;, &quot;苇&quot;, &quot;芥&quot;                , &quot;芯&quot;, &quot;芭&quot;, &quot;杖&quot;, &quot;杉&quot;, &quot;巫&quot;, &quot;杈&quot;, &quot;甫&quot;, &quot;匣&quot;, &quot;轩&quot;, &quot;卤&quot;, &quot;肖&quot;, &quot;吱&quot;, &quot;吠&quot;, &quot;呕&quot;, &quot;呐&quot;, &quot;吟&quot;, &quot;呛&quot;, &quot;吻&quot;, &quot;吭&quot;, &quot;邑&quot;, &quot;囤&quot;, &quot;吮&quot;, &quot;岖&quot;, &quot;牡&quot;, &quot;佑&quot;                , &quot;佃&quot;, &quot;伺&quot;, &quot;囱&quot;, &quot;肛&quot;, &quot;肘&quot;, &quot;甸&quot;, &quot;狈&quot;, &quot;鸠&quot;, &quot;彤&quot;, &quot;灸&quot;, &quot;刨&quot;, &quot;庇&quot;, &quot;吝&quot;, &quot;庐&quot;, &quot;闰&quot;, &quot;兑&quot;, &quot;灼&quot;, &quot;沐&quot;, &quot;沛&quot;, &quot;汰&quot;, &quot;沥&quot;, &quot;沦&quot;, &quot;汹&quot;, &quot;沧&quot;, &quot;沪&quot;                , &quot;忱&quot;, &quot;诅&quot;, &quot;诈&quot;, &quot;罕&quot;, &quot;屁&quot;, &quot;坠&quot;, &quot;妓&quot;, &quot;姊&quot;, &quot;妒&quot;, &quot;纬&quot;, &quot;玫&quot;, &quot;卦&quot;, &quot;坷&quot;, &quot;坯&quot;, &quot;拓&quot;, &quot;坪&quot;, &quot;坤&quot;, &quot;拄&quot;, &quot;拧&quot;, &quot;拂&quot;, &quot;拙&quot;, &quot;拇&quot;, &quot;拗&quot;, &quot;茉&quot;, &quot;昔&quot;                , &quot;苛&quot;, &quot;苫&quot;, &quot;苟&quot;, &quot;苞&quot;, &quot;茁&quot;, &quot;苔&quot;, &quot;枉&quot;, &quot;枢&quot;, &quot;枚&quot;, &quot;枫&quot;, &quot;杭&quot;, &quot;郁&quot;, &quot;矾&quot;, &quot;奈&quot;, &quot;奄&quot;, &quot;殴&quot;, &quot;歧&quot;, &quot;卓&quot;, &quot;昙&quot;, &quot;哎&quot;, &quot;咕&quot;, &quot;呵&quot;, &quot;咙&quot;, &quot;呻&quot;, &quot;咒&quot;                , &quot;咆&quot;, &quot;咖&quot;, &quot;帕&quot;, &quot;账&quot;, &quot;贬&quot;, &quot;贮&quot;, &quot;氛&quot;, &quot;秉&quot;, &quot;岳&quot;, &quot;侠&quot;, &quot;侥&quot;, &quot;侣&quot;, &quot;侈&quot;, &quot;卑&quot;, &quot;刽&quot;, &quot;刹&quot;, &quot;肴&quot;, &quot;觅&quot;, &quot;忿&quot;, &quot;瓮&quot;, &quot;肮&quot;, &quot;肪&quot;, &quot;狞&quot;, &quot;庞&quot;, &quot;疟&quot;                , &quot;疙&quot;, &quot;疚&quot;, &quot;卒&quot;, &quot;氓&quot;, &quot;炬&quot;, &quot;沽&quot;, &quot;沮&quot;, &quot;泣&quot;, &quot;泞&quot;, &quot;泌&quot;, &quot;沼&quot;, &quot;怔&quot;, &quot;怯&quot;, &quot;宠&quot;, &quot;宛&quot;, &quot;衩&quot;, &quot;祈&quot;, &quot;诡&quot;, &quot;帚&quot;, &quot;屉&quot;, &quot;弧&quot;, &quot;弥&quot;, &quot;陋&quot;, &quot;陌&quot;, &quot;函&quot;                , &quot;姆&quot;, &quot;虱&quot;, &quot;三&quot;, &quot;绅&quot;, &quot;驹&quot;, &quot;绊&quot;, &quot;绎&quot;, &quot;契&quot;, &quot;贰&quot;, &quot;玷&quot;, &quot;玲&quot;, &quot;珊&quot;, &quot;拭&quot;, &quot;拷&quot;, &quot;拱&quot;, &quot;挟&quot;, &quot;垢&quot;, &quot;垛&quot;, &quot;拯&quot;, &quot;荆&quot;, &quot;茸&quot;, &quot;茬&quot;, &quot;荚&quot;, &quot;茵&quot;, &quot;茴&quot;                , &quot;荞&quot;, &quot;荠&quot;, &quot;荤&quot;, &quot;荧&quot;, &quot;荔&quot;, &quot;栈&quot;, &quot;柑&quot;, &quot;栅&quot;, &quot;柠&quot;, &quot;枷&quot;, &quot;勃&quot;, &quot;柬&quot;, &quot;砂&quot;, &quot;泵&quot;, &quot;砚&quot;, &quot;鸥&quot;, &quot;轴&quot;, &quot;韭&quot;, &quot;虐&quot;, &quot;昧&quot;, &quot;盹&quot;, &quot;咧&quot;, &quot;昵&quot;, &quot;昭&quot;, &quot;盅&quot;                , &quot;勋&quot;, &quot;哆&quot;, &quot;咪&quot;, &quot;哟&quot;, &quot;幽&quot;, &quot;钙&quot;, &quot;钝&quot;, &quot;钠&quot;, &quot;钦&quot;, &quot;钧&quot;, &quot;钮&quot;, &quot;毡&quot;, &quot;氢&quot;, &quot;秕&quot;, &quot;俏&quot;, &quot;俄&quot;, &quot;俐&quot;, &quot;侯&quot;, &quot;徊&quot;, &quot;衍&quot;, &quot;胚&quot;, &quot;胧&quot;, &quot;胎&quot;, &quot;狰&quot;, &quot;饵&quot;                , &quot;峦&quot;, &quot;奕&quot;, &quot;咨&quot;, &quot;飒&quot;, &quot;闺&quot;, &quot;闽&quot;, &quot;籽&quot;, &quot;娄&quot;, &quot;烁&quot;, &quot;炫&quot;, &quot;洼&quot;, &quot;柒&quot;, &quot;涎&quot;, &quot;洛&quot;, &quot;恃&quot;, &quot;恍&quot;, &quot;恬&quot;, &quot;恤&quot;, &quot;宦&quot;, &quot;诫&quot;, &quot;诬&quot;, &quot;祠&quot;, &quot;诲&quot;, &quot;屏&quot;, &quot;屎&quot;                , &quot;逊&quot;, &quot;陨&quot;, &quot;姚&quot;, &quot;娜&quot;, &quot;蚤&quot;, &quot;骇&quot;, &quot;耕&quot;, &quot;耙&quot;, &quot;秦&quot;, &quot;匿&quot;, &quot;埂&quot;, &quot;捂&quot;, &quot;捍&quot;, &quot;袁&quot;, &quot;捌&quot;, &quot;挫&quot;, &quot;挚&quot;, &quot;捣&quot;, &quot;捅&quot;, &quot;埃&quot;, &quot;耿&quot;, &quot;聂&quot;, &quot;荸&quot;, &quot;莽&quot;, &quot;莱&quot;                , &quot;莉&quot;, &quot;莹&quot;, &quot;莺&quot;, &quot;梆&quot;, &quot;栖&quot;, &quot;桦&quot;, &quot;栓&quot;, &quot;桅&quot;, &quot;桩&quot;, &quot;贾&quot;, &quot;酌&quot;, &quot;砸&quot;, &quot;砰&quot;, &quot;砾&quot;, &quot;殉&quot;, &quot;逞&quot;, &quot;哮&quot;, &quot;唠&quot;, &quot;哺&quot;, &quot;剔&quot;, &quot;蚌&quot;, &quot;蚜&quot;, &quot;畔&quot;, &quot;蚣&quot;, &quot;蚪&quot;                , &quot;蚓&quot;, &quot;哩&quot;, &quot;圃&quot;, &quot;鸯&quot;, &quot;唁&quot;, &quot;哼&quot;, &quot;唧&quot;, &quot;唆&quot;, &quot;峭&quot;, &quot;峻&quot;, &quot;赂&quot;, &quot;赃&quot;, &quot;钾&quot;, &quot;铆&quot;, &quot;氨&quot;, &quot;秫&quot;, &quot;笆&quot;, &quot;俺&quot;, &quot;赁&quot;, &quot;倔&quot;, &quot;殷&quot;, &quot;耸&quot;, &quot;舀&quot;, &quot;豺&quot;, &quot;豹&quot;                , &quot;颁&quot;, &quot;胯&quot;, &quot;胰&quot;, &quot;脐&quot;, &quot;脓&quot;, &quot;逛&quot;, &quot;卿&quot;, &quot;鸵&quot;, &quot;鸳&quot;, &quot;馁&quot;, &quot;凌&quot;, &quot;凄&quot;, &quot;衷&quot;, &quot;郭&quot;, &quot;斋&quot;, &quot;疹&quot;, &quot;紊&quot;, &quot;瓷&quot;, &quot;羔&quot;, &quot;烙&quot;, &quot;浦&quot;, &quot;涡&quot;, &quot;涣&quot;, &quot;涤&quot;, &quot;涧&quot;                , &quot;涕&quot;, &quot;涩&quot;, &quot;悍&quot;, &quot;悯&quot;, &quot;窍&quot;, &quot;诺&quot;, &quot;诽&quot;, &quot;袒&quot;, &quot;谆&quot;, &quot;祟&quot;, &quot;恕&quot;, &quot;娩&quot;, &quot;骏&quot;, &quot;琐&quot;, &quot;麸&quot;, &quot;琉&quot;, &quot;琅&quot;, &quot;措&quot;, &quot;捺&quot;, &quot;捶&quot;, &quot;赦&quot;, &quot;埠&quot;, &quot;捻&quot;, &quot;掐&quot;, &quot;掂&quot;                , &quot;掖&quot;, &quot;掷&quot;, &quot;掸&quot;, &quot;掺&quot;, &quot;勘&quot;, &quot;聊&quot;, &quot;娶&quot;, &quot;菱&quot;, &quot;菲&quot;, &quot;萎&quot;, &quot;菩&quot;, &quot;萤&quot;, &quot;干&quot;, &quot;萧&quot;, &quot;萨&quot;, &quot;菇&quot;, &quot;彬&quot;, &quot;梗&quot;, &quot;梧&quot;, &quot;梭&quot;, &quot;曹&quot;, &quot;酝&quot;, &quot;酗&quot;, &quot;厢&quot;, &quot;硅&quot;                , &quot;硕&quot;, &quot;奢&quot;, &quot;盔&quot;, &quot;匾&quot;, &quot;颅&quot;, &quot;彪&quot;, &quot;眶&quot;, &quot;晤&quot;, &quot;曼&quot;, &quot;晦&quot;, &quot;冕&quot;, &quot;啡&quot;, &quot;畦&quot;, &quot;趾&quot;, &quot;啃&quot;, &quot;蛆&quot;, &quot;蚯&quot;, &quot;蛉&quot;, &quot;蛀&quot;, &quot;唬&quot;, &quot;啰&quot;, &quot;唾&quot;, &quot;啤&quot;, &quot;啥&quot;, &quot;啸&quot;                , &quot;崎&quot;, &quot;逻&quot;, &quot;崔&quot;, &quot;崩&quot;, &quot;婴&quot;, &quot;赊&quot;, &quot;铐&quot;, &quot;铛&quot;, &quot;铝&quot;, &quot;铡&quot;, &quot;铣&quot;, &quot;铭&quot;, &quot;矫&quot;, &quot;秸&quot;, &quot;秽&quot;, &quot;笙&quot;, &quot;笤&quot;, &quot;偎&quot;, &quot;傀&quot;, &quot;躯&quot;, &quot;兜&quot;, &quot;衅&quot;, &quot;徘&quot;, &quot;徒&quot;, &quot;舶&quot;                , &quot;舷&quot;, &quot;舵&quot;, &quot;敛&quot;, &quot;翎&quot;, &quot;脯&quot;, &quot;逸&quot;, &quot;凰&quot;, &quot;猖&quot;, &quot;祭&quot;, &quot;烹&quot;, &quot;庶&quot;, &quot;庵&quot;, &quot;痊&quot;, &quot;阎&quot;, &quot;阐&quot;, &quot;眷&quot;, &quot;焊&quot;, &quot;焕&quot;, &quot;鸿&quot;, &quot;涯&quot;, &quot;淑&quot;, &quot;淌&quot;, &quot;淮&quot;, &quot;淆&quot;, &quot;渊&quot;                , &quot;淫&quot;, &quot;淳&quot;, &quot;淤&quot;, &quot;淀&quot;, &quot;涮&quot;, &quot;涵&quot;, &quot;惦&quot;, &quot;悴&quot;, &quot;惋&quot;, &quot;寂&quot;, &quot;窒&quot;, &quot;谍&quot;, &quot;谐&quot;, &quot;裆&quot;, &quot;袱&quot;, &quot;祷&quot;, &quot;谒&quot;, &quot;谓&quot;, &quot;谚&quot;, &quot;尉&quot;, &quot;堕&quot;, &quot;隅&quot;, &quot;婉&quot;, &quot;颇&quot;, &quot;绰&quot;                , &quot;绷&quot;, &quot;综&quot;, &quot;绽&quot;, &quot;缀&quot;, &quot;巢&quot;, &quot;琳&quot;, &quot;琢&quot;, &quot;琼&quot;, &quot;揍&quot;, &quot;堰&quot;, &quot;揩&quot;, &quot;揽&quot;, &quot;揖&quot;, &quot;彭&quot;, &quot;揣&quot;, &quot;搀&quot;, &quot;搓&quot;, &quot;壹&quot;, &quot;搔&quot;, &quot;葫&quot;, &quot;募&quot;, &quot;蒋&quot;, &quot;蒂&quot;, &quot;韩&quot;, &quot;棱&quot;                , &quot;椰&quot;, &quot;焚&quot;, &quot;椎&quot;, &quot;棺&quot;, &quot;榔&quot;, &quot;椭&quot;, &quot;粟&quot;, &quot;棘&quot;, &quot;酣&quot;, &quot;酥&quot;, &quot;硝&quot;, &quot;硫&quot;, &quot;颊&quot;, &quot;雳&quot;, &quot;翘&quot;, &quot;凿&quot;, &quot;棠&quot;, &quot;晰&quot;, &quot;鼎&quot;, &quot;喳&quot;, &quot;遏&quot;, &quot;晾&quot;, &quot;畴&quot;, &quot;跋&quot;, &quot;跛&quot;                , &quot;蛔&quot;, &quot;蜒&quot;, &quot;蛤&quot;, &quot;鹃&quot;, &quot;喻&quot;, &quot;啼&quot;, &quot;喧&quot;, &quot;嵌&quot;, &quot;赋&quot;, &quot;赎&quot;, &quot;赐&quot;, &quot;锉&quot;, &quot;锌&quot;, &quot;甥&quot;, &quot;掰&quot;, &quot;氮&quot;, &quot;氯&quot;, &quot;黍&quot;, &quot;筏&quot;, &quot;牍&quot;, &quot;粤&quot;, &quot;逾&quot;, &quot;腌&quot;, &quot;腋&quot;, &quot;腕&quot;                , &quot;猩&quot;, &quot;猬&quot;, &quot;惫&quot;, &quot;敦&quot;, &quot;痘&quot;, &quot;痢&quot;, &quot;痪&quot;, &quot;竣&quot;, &quot;翔&quot;, &quot;奠&quot;, &quot;遂&quot;, &quot;焙&quot;, &quot;滞&quot;, &quot;湘&quot;, &quot;渤&quot;, &quot;渺&quot;, &quot;溃&quot;, &quot;溅&quot;, &quot;湃&quot;, &quot;愕&quot;, &quot;惶&quot;, &quot;寓&quot;, &quot;窖&quot;, &quot;窘&quot;, &quot;雇&quot;                , &quot;谤&quot;, &quot;犀&quot;, &quot;隘&quot;, &quot;媒&quot;, &quot;媚&quot;, &quot;婿&quot;, &quot;缅&quot;, &quot;缆&quot;, &quot;缔&quot;, &quot;缕&quot;, &quot;骚&quot;, &quot;瑟&quot;, &quot;鹉&quot;, &quot;瑰&quot;, &quot;搪&quot;, &quot;聘&quot;, &quot;斟&quot;, &quot;靴&quot;, &quot;靶&quot;, &quot;蓖&quot;, &quot;蒿&quot;, &quot;蒲&quot;, &quot;蓉&quot;, &quot;楔&quot;, &quot;椿&quot;                , &quot;楷&quot;, &quot;榄&quot;, &quot;楞&quot;, &quot;楣&quot;, &quot;酪&quot;, &quot;碘&quot;, &quot;硼&quot;, &quot;碉&quot;, &quot;辐&quot;, &quot;辑&quot;, &quot;频&quot;, &quot;睹&quot;, &quot;睦&quot;, &quot;瞄&quot;, &quot;嗜&quot;, &quot;嗦&quot;, &quot;暇&quot;, &quot;畸&quot;, &quot;跷&quot;, &quot;跺&quot;, &quot;蜈&quot;, &quot;蜗&quot;, &quot;蜕&quot;, &quot;蛹&quot;, &quot;嗅&quot;                , &quot;嗡&quot;, &quot;嗤&quot;, &quot;署&quot;, &quot;蜀&quot;, &quot;幌&quot;, &quot;锚&quot;, &quot;锥&quot;, &quot;锨&quot;, &quot;锭&quot;, &quot;锰&quot;, &quot;稚&quot;, &quot;颓&quot;, &quot;筷&quot;, &quot;魁&quot;, &quot;衙&quot;, &quot;腻&quot;, &quot;腮&quot;, &quot;腺&quot;, &quot;鹏&quot;, &quot;肄&quot;, &quot;猿&quot;, &quot;颖&quot;, &quot;煞&quot;, &quot;雏&quot;, &quot;馍&quot;                , &quot;馏&quot;, &quot;禀&quot;, &quot;痹&quot;, &quot;廓&quot;, &quot;痴&quot;, &quot;靖&quot;, &quot;誊&quot;, &quot;漓&quot;, &quot;溢&quot;, &quot;溯&quot;, &quot;溶&quot;, &quot;滓&quot;, &quot;溺&quot;, &quot;寞&quot;, &quot;窥&quot;, &quot;窟&quot;, &quot;寝&quot;, &quot;褂&quot;, &quot;裸&quot;, &quot;谬&quot;, &quot;媳&quot;, &quot;嫉&quot;, &quot;缚&quot;, &quot;缤&quot;, &quot;剿&quot;                , &quot;赘&quot;, &quot;熬&quot;, &quot;赫&quot;, &quot;蔫&quot;, &quot;摹&quot;, &quot;蔓&quot;, &quot;蔗&quot;, &quot;蔼&quot;, &quot;熙&quot;, &quot;蔚&quot;, &quot;兢&quot;, &quot;榛&quot;, &quot;榕&quot;, &quot;酵&quot;, &quot;碟&quot;, &quot;碴&quot;, &quot;碱&quot;, &quot;碳&quot;, &quot;辕&quot;, &quot;辖&quot;, &quot;雌&quot;, &quot;墅&quot;, &quot;嘁&quot;, &quot;踊&quot;, &quot;蝉&quot;                , &quot;嘀&quot;, &quot;幔&quot;, &quot;镀&quot;, &quot;舔&quot;, &quot;熏&quot;, &quot;箍&quot;, &quot;箕&quot;, &quot;箫&quot;, &quot;舆&quot;, &quot;僧&quot;, &quot;孵&quot;, &quot;瘩&quot;, &quot;瘟&quot;, &quot;彰&quot;, &quot;粹&quot;, &quot;漱&quot;, &quot;漩&quot;, &quot;漾&quot;, &quot;慷&quot;, &quot;寡&quot;, &quot;寥&quot;, &quot;谭&quot;, &quot;褐&quot;, &quot;裉&quot;, &quot;隧&quot;                , &quot;嫡&quot;, &quot;缨&quot;, &quot;撵&quot;, &quot;撩&quot;, &quot;撮&quot;, &quot;撬&quot;, &quot;擒&quot;, &quot;墩&quot;, &quot;撰&quot;, &quot;鞍&quot;, &quot;蕊&quot;, &quot;蕴&quot;, &quot;樊&quot;, &quot;樟&quot;, &quot;橄&quot;, &quot;敷&quot;, &quot;豌&quot;, &quot;醇&quot;, &quot;磕&quot;, &quot;磅&quot;, &quot;碾&quot;, &quot;嘶&quot;, &quot;嘲&quot;, &quot;嘹&quot;, &quot;蝠&quot;                , &quot;蝎&quot;, &quot;蝌&quot;, &quot;蝗&quot;, &quot;蝙&quot;, &quot;嘿&quot;, &quot;幢&quot;, &quot;镊&quot;, &quot;镐&quot;, &quot;稽&quot;, &quot;篓&quot;, &quot;膘&quot;, &quot;鲤&quot;, &quot;鲫&quot;, &quot;褒&quot;, &quot;瘪&quot;, &quot;瘤&quot;, &quot;瘫&quot;, &quot;凛&quot;, &quot;憋&quot;, &quot;澎&quot;, &quot;潭&quot;, &quot;潦&quot;, &quot;澳&quot;, &quot;潘&quot;, &quot;澈&quot;                , &quot;澜&quot;, &quot;澄&quot;, &quot;憔&quot;, &quot;懊&quot;, &quot;憎&quot;, &quot;翩&quot;, &quot;褥&quot;, &quot;谴&quot;, &quot;鹤&quot;, &quot;憨&quot;, &quot;履&quot;, &quot;嬉&quot;, &quot;豫&quot;, &quot;缭&quot;, &quot;撼&quot;, &quot;擂&quot;, &quot;擅&quot;, &quot;蕾&quot;, &quot;薛&quot;, &quot;薇&quot;, &quot;擎&quot;, &quot;翰&quot;, &quot;噩&quot;, &quot;橱&quot;, &quot;橙&quot;                , &quot;瓢&quot;, &quot;磺&quot;, &quot;霍&quot;, &quot;霎&quot;, &quot;辙&quot;, &quot;冀&quot;, &quot;踱&quot;, &quot;蹂&quot;, &quot;蟆&quot;, &quot;螃&quot;, &quot;螟&quot;, &quot;噪&quot;, &quot;鹦&quot;, &quot;黔&quot;, &quot;穆&quot;, &quot;篡&quot;, &quot;篷&quot;, &quot;篙&quot;, &quot;篱&quot;, &quot;儒&quot;, &quot;膳&quot;, &quot;鲸&quot;, &quot;瘾&quot;, &quot;瘸&quot;, &quot;糙&quot;                , &quot;燎&quot;, &quot;濒&quot;, &quot;憾&quot;, &quot;懈&quot;, &quot;窿&quot;, &quot;缰&quot;, &quot;壕&quot;, &quot;藐&quot;, &quot;檬&quot;, &quot;檐&quot;, &quot;檩&quot;, &quot;檀&quot;, &quot;礁&quot;, &quot;磷&quot;, &quot;瞭&quot;, &quot;瞬&quot;, &quot;瞳&quot;, &quot;瞪&quot;, &quot;曙&quot;, &quot;蹋&quot;, &quot;蟋&quot;, &quot;蟀&quot;, &quot;嚎&quot;, &quot;赡&quot;, &quot;镣&quot;                , &quot;魏&quot;, &quot;簇&quot;, &quot;儡&quot;, &quot;徽&quot;, &quot;爵&quot;, &quot;朦&quot;, &quot;臊&quot;, &quot;鳄&quot;, &quot;糜&quot;, &quot;癌&quot;, &quot;懦&quot;, &quot;豁&quot;, &quot;臀&quot;, &quot;藕&quot;, &quot;藤&quot;, &quot;瞻&quot;, &quot;嚣&quot;, &quot;鳍&quot;, &quot;癞&quot;, &quot;瀑&quot;, &quot;襟&quot;, &quot;璧&quot;, &quot;戳&quot;, &quot;攒&quot;, &quot;孽&quot;                , &quot;蘑&quot;, &quot;藻&quot;, &quot;蹭&quot;, &quot;蹬&quot;, &quot;簸&quot;, &quot;簿&quot;, &quot;蟹&quot;, &quot;靡&quot;, &quot;癣&quot;, &quot;羹&quot;, &quot;鳖&quot;, &quot;鬓&quot;, &quot;攘&quot;, &quot;蠕&quot;, &quot;巍&quot;, &quot;鳞&quot;, &quot;糯&quot;, &quot;譬&quot;, &quot;霹&quot;, &quot;躏&quot;, &quot;髓&quot;, &quot;蘸&quot;, &quot;镶&quot;, &quot;瓤&quot;, &quot;矗&quot;                , &quot;匕&quot;, &quot;刁&quot;, &quot;丐&quot;, &quot;歹&quot;, &quot;戈&quot;, &quot;夭&quot;, &quot;仑&quot;, &quot;讥&quot;, &quot;冗&quot;, &quot;邓&quot;, &quot;艾&quot;, &quot;夯&quot;, &quot;凸&quot;, &quot;卢&quot;, &quot;叭&quot;, &quot;叽&quot;, &quot;皿&quot;, &quot;凹&quot;, &quot;囚&quot;, &quot;矢&quot;, &quot;乍&quot;, &quot;尔&quot;, &quot;冯&quot;, &quot;玄&quot;, &quot;邦&quot;                , &quot;迂&quot;, &quot;邢&quot;, &quot;芋&quot;, &quot;芍&quot;, &quot;吏&quot;, &quot;夷&quot;, &quot;吁&quot;, &quot;吕&quot;, &quot;吆&quot;, &quot;屹&quot;, &quot;廷&quot;, &quot;迄&quot;, &quot;臼&quot;, &quot;仲&quot;, &quot;伦&quot;, &quot;伊&quot;, &quot;肋&quot;, &quot;旭&quot;, &quot;匈&quot;, &quot;凫&quot;, &quot;妆&quot;, &quot;亥&quot;, &quot;汛&quot;, &quot;讳&quot;, &quot;讶&quot;                , &quot;讹&quot;, &quot;讼&quot;, &quot;诀&quot;, &quot;弛&quot;, &quot;阱&quot;, &quot;驮&quot;, &quot;驯&quot;, &quot;纫&quot;, &quot;玖&quot;, &quot;玛&quot;, &quot;韧&quot;, &quot;抠&quot;, &quot;扼&quot;, &quot;汞&quot;, &quot;扳&quot;, &quot;抡&quot;, &quot;坎&quot;, &quot;坞&quot;, &quot;抑&quot;, &quot;拟&quot;, &quot;抒&quot;, &quot;芙&quot;, &quot;芜&quot;, &quot;苇&quot;, &quot;芥&quot;                , &quot;芯&quot;, &quot;芭&quot;, &quot;杖&quot;, &quot;杉&quot;, &quot;巫&quot;, &quot;杈&quot;, &quot;甫&quot;, &quot;匣&quot;, &quot;轩&quot;, &quot;卤&quot;, &quot;肖&quot;, &quot;吱&quot;, &quot;吠&quot;, &quot;呕&quot;, &quot;呐&quot;, &quot;吟&quot;, &quot;呛&quot;, &quot;吻&quot;, &quot;吭&quot;, &quot;邑&quot;, &quot;囤&quot;, &quot;吮&quot;, &quot;岖&quot;, &quot;牡&quot;, &quot;佑&quot;                , &quot;佃&quot;, &quot;伺&quot;, &quot;囱&quot;, &quot;肛&quot;, &quot;肘&quot;, &quot;甸&quot;, &quot;狈&quot;, &quot;鸠&quot;, &quot;彤&quot;, &quot;灸&quot;, &quot;刨&quot;, &quot;庇&quot;, &quot;吝&quot;, &quot;庐&quot;, &quot;闰&quot;, &quot;兑&quot;, &quot;灼&quot;, &quot;沐&quot;, &quot;沛&quot;, &quot;汰&quot;, &quot;沥&quot;, &quot;沦&quot;, &quot;汹&quot;, &quot;沧&quot;, &quot;沪&quot;                , &quot;忱&quot;, &quot;诅&quot;, &quot;诈&quot;, &quot;罕&quot;, &quot;屁&quot;, &quot;坠&quot;, &quot;妓&quot;, &quot;姊&quot;, &quot;妒&quot;, &quot;纬&quot;, &quot;玫&quot;, &quot;卦&quot;, &quot;坷&quot;, &quot;坯&quot;, &quot;拓&quot;, &quot;坪&quot;, &quot;坤&quot;, &quot;拄&quot;, &quot;拧&quot;, &quot;拂&quot;, &quot;拙&quot;, &quot;拇&quot;, &quot;拗&quot;, &quot;茉&quot;, &quot;昔&quot;                , &quot;苛&quot;, &quot;苫&quot;, &quot;苟&quot;, &quot;苞&quot;, &quot;茁&quot;, &quot;苔&quot;, &quot;枉&quot;, &quot;枢&quot;, &quot;枚&quot;, &quot;枫&quot;, &quot;杭&quot;, &quot;郁&quot;, &quot;矾&quot;, &quot;奈&quot;, &quot;奄&quot;, &quot;殴&quot;, &quot;歧&quot;, &quot;卓&quot;, &quot;昙&quot;, &quot;哎&quot;, &quot;咕&quot;, &quot;呵&quot;, &quot;咙&quot;, &quot;呻&quot;, &quot;咒&quot;                , &quot;咆&quot;, &quot;咖&quot;, &quot;帕&quot;, &quot;账&quot;, &quot;贬&quot;, &quot;贮&quot;, &quot;氛&quot;, &quot;秉&quot;, &quot;岳&quot;, &quot;侠&quot;, &quot;侥&quot;, &quot;侣&quot;, &quot;侈&quot;, &quot;卑&quot;, &quot;刽&quot;, &quot;刹&quot;, &quot;肴&quot;, &quot;觅&quot;, &quot;忿&quot;, &quot;瓮&quot;, &quot;肮&quot;, &quot;肪&quot;, &quot;狞&quot;, &quot;庞&quot;, &quot;疟&quot;                , &quot;疙&quot;, &quot;疚&quot;, &quot;卒&quot;, &quot;氓&quot;, &quot;炬&quot;, &quot;沽&quot;, &quot;沮&quot;, &quot;泣&quot;, &quot;泞&quot;, &quot;泌&quot;, &quot;沼&quot;, &quot;怔&quot;, &quot;怯&quot;, &quot;宠&quot;, &quot;宛&quot;, &quot;衩&quot;, &quot;祈&quot;, &quot;诡&quot;, &quot;帚&quot;, &quot;屉&quot;, &quot;弧&quot;, &quot;弥&quot;, &quot;陋&quot;, &quot;陌&quot;, &quot;函&quot;                , &quot;姆&quot;, &quot;虱&quot;, &quot;三&quot;, &quot;绅&quot;, &quot;驹&quot;, &quot;绊&quot;, &quot;绎&quot;, &quot;契&quot;, &quot;贰&quot;, &quot;玷&quot;, &quot;玲&quot;, &quot;珊&quot;, &quot;拭&quot;, &quot;拷&quot;, &quot;拱&quot;, &quot;挟&quot;, &quot;垢&quot;, &quot;垛&quot;, &quot;拯&quot;, &quot;荆&quot;, &quot;茸&quot;, &quot;茬&quot;, &quot;荚&quot;, &quot;茵&quot;, &quot;茴&quot;                , &quot;荞&quot;, &quot;荠&quot;, &quot;荤&quot;, &quot;荧&quot;, &quot;荔&quot;, &quot;栈&quot;, &quot;柑&quot;, &quot;栅&quot;, &quot;柠&quot;, &quot;枷&quot;, &quot;勃&quot;, &quot;柬&quot;, &quot;砂&quot;, &quot;泵&quot;, &quot;砚&quot;, &quot;鸥&quot;, &quot;轴&quot;, &quot;韭&quot;, &quot;虐&quot;, &quot;昧&quot;, &quot;盹&quot;, &quot;咧&quot;, &quot;昵&quot;, &quot;昭&quot;, &quot;盅&quot;                , &quot;勋&quot;, &quot;哆&quot;, &quot;咪&quot;, &quot;哟&quot;, &quot;幽&quot;, &quot;钙&quot;, &quot;钝&quot;, &quot;钠&quot;, &quot;钦&quot;, &quot;钧&quot;, &quot;钮&quot;, &quot;毡&quot;, &quot;氢&quot;, &quot;秕&quot;, &quot;俏&quot;, &quot;俄&quot;, &quot;俐&quot;, &quot;侯&quot;, &quot;徊&quot;, &quot;衍&quot;, &quot;胚&quot;, &quot;胧&quot;, &quot;胎&quot;, &quot;狰&quot;, &quot;饵&quot;                , &quot;峦&quot;, &quot;奕&quot;, &quot;咨&quot;, &quot;飒&quot;, &quot;闺&quot;, &quot;闽&quot;, &quot;籽&quot;, &quot;娄&quot;, &quot;烁&quot;, &quot;炫&quot;, &quot;洼&quot;, &quot;柒&quot;, &quot;涎&quot;, &quot;洛&quot;, &quot;恃&quot;, &quot;恍&quot;, &quot;恬&quot;, &quot;恤&quot;, &quot;宦&quot;, &quot;诫&quot;, &quot;诬&quot;, &quot;祠&quot;, &quot;诲&quot;, &quot;屏&quot;, &quot;屎&quot;                , &quot;逊&quot;, &quot;陨&quot;, &quot;姚&quot;, &quot;娜&quot;, &quot;蚤&quot;, &quot;骇&quot;, &quot;耕&quot;, &quot;耙&quot;, &quot;秦&quot;, &quot;匿&quot;, &quot;埂&quot;, &quot;捂&quot;, &quot;捍&quot;, &quot;袁&quot;, &quot;捌&quot;, &quot;挫&quot;, &quot;挚&quot;, &quot;捣&quot;, &quot;捅&quot;, &quot;埃&quot;, &quot;耿&quot;, &quot;聂&quot;, &quot;荸&quot;, &quot;莽&quot;, &quot;莱&quot;                , &quot;莉&quot;, &quot;莹&quot;, &quot;莺&quot;, &quot;梆&quot;, &quot;栖&quot;, &quot;桦&quot;, &quot;栓&quot;, &quot;桅&quot;, &quot;桩&quot;, &quot;贾&quot;, &quot;酌&quot;, &quot;砸&quot;, &quot;砰&quot;, &quot;砾&quot;, &quot;殉&quot;, &quot;逞&quot;, &quot;哮&quot;, &quot;唠&quot;, &quot;哺&quot;, &quot;剔&quot;, &quot;蚌&quot;, &quot;蚜&quot;, &quot;畔&quot;, &quot;蚣&quot;, &quot;蚪&quot;                , &quot;蚓&quot;, &quot;哩&quot;, &quot;圃&quot;, &quot;鸯&quot;, &quot;唁&quot;, &quot;哼&quot;, &quot;唧&quot;, &quot;唆&quot;, &quot;峭&quot;, &quot;峻&quot;, &quot;赂&quot;, &quot;赃&quot;, &quot;钾&quot;, &quot;铆&quot;, &quot;氨&quot;, &quot;秫&quot;, &quot;笆&quot;, &quot;俺&quot;, &quot;赁&quot;, &quot;倔&quot;, &quot;殷&quot;, &quot;耸&quot;, &quot;舀&quot;, &quot;豺&quot;, &quot;豹&quot;                , &quot;颁&quot;, &quot;胯&quot;, &quot;胰&quot;, &quot;脐&quot;, &quot;脓&quot;, &quot;逛&quot;, &quot;卿&quot;, &quot;鸵&quot;, &quot;鸳&quot;, &quot;馁&quot;, &quot;凌&quot;, &quot;凄&quot;, &quot;衷&quot;, &quot;郭&quot;, &quot;斋&quot;, &quot;疹&quot;, &quot;紊&quot;, &quot;瓷&quot;, &quot;羔&quot;, &quot;烙&quot;, &quot;浦&quot;, &quot;涡&quot;, &quot;涣&quot;, &quot;涤&quot;, &quot;涧&quot;                , &quot;涕&quot;, &quot;涩&quot;, &quot;悍&quot;, &quot;悯&quot;, &quot;窍&quot;, &quot;诺&quot;, &quot;诽&quot;, &quot;袒&quot;, &quot;谆&quot;, &quot;祟&quot;, &quot;恕&quot;, &quot;娩&quot;, &quot;骏&quot;, &quot;琐&quot;, &quot;麸&quot;, &quot;琉&quot;, &quot;琅&quot;, &quot;措&quot;, &quot;捺&quot;, &quot;捶&quot;, &quot;赦&quot;, &quot;埠&quot;, &quot;捻&quot;, &quot;掐&quot;, &quot;掂&quot;                , &quot;掖&quot;, &quot;掷&quot;, &quot;掸&quot;, &quot;掺&quot;, &quot;勘&quot;, &quot;聊&quot;, &quot;娶&quot;, &quot;菱&quot;, &quot;菲&quot;, &quot;萎&quot;, &quot;菩&quot;, &quot;萤&quot;, &quot;干&quot;, &quot;萧&quot;, &quot;萨&quot;, &quot;菇&quot;, &quot;彬&quot;, &quot;梗&quot;, &quot;梧&quot;, &quot;梭&quot;, &quot;曹&quot;, &quot;酝&quot;, &quot;酗&quot;, &quot;厢&quot;, &quot;硅&quot;                , &quot;硕&quot;, &quot;奢&quot;, &quot;盔&quot;, &quot;匾&quot;, &quot;颅&quot;, &quot;彪&quot;, &quot;眶&quot;, &quot;晤&quot;, &quot;曼&quot;, &quot;晦&quot;, &quot;冕&quot;, &quot;啡&quot;, &quot;畦&quot;, &quot;趾&quot;, &quot;啃&quot;, &quot;蛆&quot;, &quot;蚯&quot;, &quot;蛉&quot;, &quot;蛀&quot;, &quot;唬&quot;, &quot;啰&quot;, &quot;唾&quot;, &quot;啤&quot;, &quot;啥&quot;, &quot;啸&quot;                , &quot;崎&quot;, &quot;逻&quot;, &quot;崔&quot;, &quot;崩&quot;, &quot;婴&quot;, &quot;赊&quot;, &quot;铐&quot;, &quot;铛&quot;, &quot;铝&quot;, &quot;铡&quot;, &quot;铣&quot;, &quot;铭&quot;, &quot;矫&quot;, &quot;秸&quot;, &quot;秽&quot;, &quot;笙&quot;, &quot;笤&quot;, &quot;偎&quot;, &quot;傀&quot;, &quot;躯&quot;, &quot;兜&quot;, &quot;衅&quot;, &quot;徘&quot;, &quot;徒&quot;, &quot;舶&quot;                , &quot;舷&quot;, &quot;舵&quot;, &quot;敛&quot;, &quot;翎&quot;, &quot;脯&quot;, &quot;逸&quot;, &quot;凰&quot;, &quot;猖&quot;, &quot;祭&quot;, &quot;烹&quot;, &quot;庶&quot;, &quot;庵&quot;, &quot;痊&quot;, &quot;阎&quot;, &quot;阐&quot;, &quot;眷&quot;, &quot;焊&quot;, &quot;焕&quot;, &quot;鸿&quot;, &quot;涯&quot;, &quot;淑&quot;, &quot;淌&quot;, &quot;淮&quot;, &quot;淆&quot;, &quot;渊&quot;                , &quot;淫&quot;, &quot;淳&quot;, &quot;淤&quot;, &quot;淀&quot;, &quot;涮&quot;, &quot;涵&quot;, &quot;惦&quot;, &quot;悴&quot;, &quot;惋&quot;, &quot;寂&quot;, &quot;窒&quot;, &quot;谍&quot;, &quot;谐&quot;, &quot;裆&quot;, &quot;袱&quot;, &quot;祷&quot;, &quot;谒&quot;, &quot;谓&quot;, &quot;谚&quot;, &quot;尉&quot;, &quot;堕&quot;, &quot;隅&quot;, &quot;婉&quot;, &quot;颇&quot;, &quot;绰&quot;                , &quot;绷&quot;, &quot;综&quot;, &quot;绽&quot;, &quot;缀&quot;, &quot;巢&quot;, &quot;琳&quot;, &quot;琢&quot;, &quot;琼&quot;, &quot;揍&quot;, &quot;堰&quot;, &quot;揩&quot;, &quot;揽&quot;, &quot;揖&quot;, &quot;彭&quot;, &quot;揣&quot;, &quot;搀&quot;, &quot;搓&quot;, &quot;壹&quot;, &quot;搔&quot;, &quot;葫&quot;, &quot;募&quot;, &quot;蒋&quot;, &quot;蒂&quot;, &quot;韩&quot;, &quot;棱&quot;                , &quot;椰&quot;, &quot;焚&quot;, &quot;椎&quot;, &quot;棺&quot;, &quot;榔&quot;, &quot;椭&quot;, &quot;粟&quot;, &quot;棘&quot;, &quot;酣&quot;, &quot;酥&quot;, &quot;硝&quot;, &quot;硫&quot;, &quot;颊&quot;, &quot;雳&quot;, &quot;翘&quot;, &quot;凿&quot;, &quot;棠&quot;, &quot;晰&quot;, &quot;鼎&quot;, &quot;喳&quot;, &quot;遏&quot;, &quot;晾&quot;, &quot;畴&quot;, &quot;跋&quot;, &quot;跛&quot;                , &quot;蛔&quot;, &quot;蜒&quot;, &quot;蛤&quot;, &quot;鹃&quot;, &quot;喻&quot;, &quot;啼&quot;, &quot;喧&quot;, &quot;嵌&quot;, &quot;赋&quot;, &quot;赎&quot;, &quot;赐&quot;, &quot;锉&quot;, &quot;锌&quot;, &quot;甥&quot;, &quot;掰&quot;, &quot;氮&quot;, &quot;氯&quot;, &quot;黍&quot;, &quot;筏&quot;, &quot;牍&quot;, &quot;粤&quot;, &quot;逾&quot;, &quot;腌&quot;, &quot;腋&quot;, &quot;腕&quot;                , &quot;猩&quot;, &quot;猬&quot;, &quot;惫&quot;, &quot;敦&quot;, &quot;痘&quot;, &quot;痢&quot;, &quot;痪&quot;, &quot;竣&quot;, &quot;翔&quot;, &quot;奠&quot;, &quot;遂&quot;, &quot;焙&quot;, &quot;滞&quot;, &quot;湘&quot;, &quot;渤&quot;, &quot;渺&quot;, &quot;溃&quot;, &quot;溅&quot;, &quot;湃&quot;, &quot;愕&quot;, &quot;惶&quot;, &quot;寓&quot;, &quot;窖&quot;, &quot;窘&quot;, &quot;雇&quot;                , &quot;谤&quot;, &quot;犀&quot;, &quot;隘&quot;, &quot;媒&quot;, &quot;媚&quot;, &quot;婿&quot;, &quot;缅&quot;, &quot;缆&quot;, &quot;缔&quot;, &quot;缕&quot;, &quot;骚&quot;, &quot;瑟&quot;, &quot;鹉&quot;, &quot;瑰&quot;, &quot;搪&quot;, &quot;聘&quot;, &quot;斟&quot;, &quot;靴&quot;, &quot;靶&quot;, &quot;蓖&quot;, &quot;蒿&quot;, &quot;蒲&quot;, &quot;蓉&quot;, &quot;楔&quot;, &quot;椿&quot;                , &quot;楷&quot;, &quot;榄&quot;, &quot;楞&quot;, &quot;楣&quot;, &quot;酪&quot;, &quot;碘&quot;, &quot;硼&quot;, &quot;碉&quot;, &quot;辐&quot;, &quot;辑&quot;, &quot;频&quot;, &quot;睹&quot;, &quot;睦&quot;, &quot;瞄&quot;, &quot;嗜&quot;, &quot;嗦&quot;, &quot;暇&quot;, &quot;畸&quot;, &quot;跷&quot;, &quot;跺&quot;, &quot;蜈&quot;, &quot;蜗&quot;, &quot;蜕&quot;, &quot;蛹&quot;, &quot;嗅&quot;                , &quot;嗡&quot;, &quot;嗤&quot;, &quot;署&quot;, &quot;蜀&quot;, &quot;幌&quot;, &quot;锚&quot;, &quot;锥&quot;, &quot;锨&quot;, &quot;锭&quot;, &quot;锰&quot;, &quot;稚&quot;, &quot;颓&quot;, &quot;筷&quot;, &quot;魁&quot;, &quot;衙&quot;, &quot;腻&quot;, &quot;腮&quot;, &quot;腺&quot;, &quot;鹏&quot;, &quot;肄&quot;, &quot;猿&quot;, &quot;颖&quot;, &quot;煞&quot;, &quot;雏&quot;, &quot;馍&quot;                , &quot;馏&quot;, &quot;禀&quot;, &quot;痹&quot;, &quot;廓&quot;, &quot;痴&quot;, &quot;靖&quot;, &quot;誊&quot;, &quot;漓&quot;, &quot;溢&quot;, &quot;溯&quot;, &quot;溶&quot;, &quot;滓&quot;, &quot;溺&quot;, &quot;寞&quot;, &quot;窥&quot;, &quot;窟&quot;, &quot;寝&quot;, &quot;褂&quot;, &quot;裸&quot;, &quot;谬&quot;, &quot;媳&quot;, &quot;嫉&quot;, &quot;缚&quot;, &quot;缤&quot;, &quot;剿&quot;                , &quot;赘&quot;, &quot;熬&quot;, &quot;赫&quot;, &quot;蔫&quot;, &quot;摹&quot;, &quot;蔓&quot;, &quot;蔗&quot;, &quot;蔼&quot;, &quot;熙&quot;, &quot;蔚&quot;, &quot;兢&quot;, &quot;榛&quot;, &quot;榕&quot;, &quot;酵&quot;, &quot;碟&quot;, &quot;碴&quot;, &quot;碱&quot;, &quot;碳&quot;, &quot;辕&quot;, &quot;辖&quot;, &quot;雌&quot;, &quot;墅&quot;, &quot;嘁&quot;, &quot;踊&quot;, &quot;蝉&quot;                , &quot;嘀&quot;, &quot;幔&quot;, &quot;镀&quot;, &quot;舔&quot;, &quot;熏&quot;, &quot;箍&quot;, &quot;箕&quot;, &quot;箫&quot;, &quot;舆&quot;, &quot;僧&quot;, &quot;孵&quot;, &quot;瘩&quot;, &quot;瘟&quot;, &quot;彰&quot;, &quot;粹&quot;, &quot;漱&quot;, &quot;漩&quot;, &quot;漾&quot;, &quot;慷&quot;, &quot;寡&quot;, &quot;寥&quot;, &quot;谭&quot;, &quot;褐&quot;, &quot;裉&quot;, &quot;隧&quot;                , &quot;嫡&quot;, &quot;缨&quot;, &quot;撵&quot;, &quot;撩&quot;, &quot;撮&quot;, &quot;撬&quot;, &quot;擒&quot;, &quot;墩&quot;, &quot;撰&quot;, &quot;鞍&quot;, &quot;蕊&quot;, &quot;蕴&quot;, &quot;樊&quot;, &quot;樟&quot;, &quot;橄&quot;, &quot;敷&quot;, &quot;豌&quot;, &quot;醇&quot;, &quot;磕&quot;, &quot;磅&quot;, &quot;碾&quot;, &quot;嘶&quot;, &quot;嘲&quot;, &quot;嘹&quot;, &quot;蝠&quot;                , &quot;蝎&quot;, &quot;蝌&quot;, &quot;蝗&quot;, &quot;蝙&quot;, &quot;嘿&quot;, &quot;幢&quot;, &quot;镊&quot;, &quot;镐&quot;, &quot;稽&quot;, &quot;篓&quot;, &quot;膘&quot;, &quot;鲤&quot;, &quot;鲫&quot;, &quot;褒&quot;, &quot;瘪&quot;, &quot;瘤&quot;, &quot;瘫&quot;, &quot;凛&quot;, &quot;憋&quot;, &quot;澎&quot;, &quot;潭&quot;, &quot;潦&quot;, &quot;澳&quot;, &quot;潘&quot;, &quot;澈&quot;                , &quot;澜&quot;, &quot;澄&quot;, &quot;憔&quot;, &quot;懊&quot;, &quot;憎&quot;, &quot;翩&quot;, &quot;褥&quot;, &quot;谴&quot;, &quot;鹤&quot;, &quot;憨&quot;, &quot;履&quot;, &quot;嬉&quot;, &quot;豫&quot;, &quot;缭&quot;, &quot;撼&quot;, &quot;擂&quot;, &quot;擅&quot;, &quot;蕾&quot;, &quot;薛&quot;, &quot;薇&quot;, &quot;擎&quot;, &quot;翰&quot;, &quot;噩&quot;, &quot;橱&quot;, &quot;橙&quot;                , &quot;瓢&quot;, &quot;磺&quot;, &quot;霍&quot;, &quot;霎&quot;, &quot;辙&quot;, &quot;冀&quot;, &quot;踱&quot;, &quot;蹂&quot;, &quot;蟆&quot;, &quot;螃&quot;, &quot;螟&quot;, &quot;噪&quot;, &quot;鹦&quot;, &quot;黔&quot;, &quot;穆&quot;, &quot;篡&quot;, &quot;篷&quot;, &quot;篙&quot;, &quot;篱&quot;, &quot;儒&quot;, &quot;膳&quot;, &quot;鲸&quot;, &quot;瘾&quot;, &quot;瘸&quot;, &quot;糙&quot;                , &quot;燎&quot;, &quot;濒&quot;, &quot;憾&quot;, &quot;懈&quot;, &quot;窿&quot;, &quot;缰&quot;, &quot;壕&quot;, &quot;藐&quot;, &quot;檬&quot;, &quot;檐&quot;, &quot;檩&quot;, &quot;檀&quot;, &quot;礁&quot;, &quot;磷&quot;, &quot;瞭&quot;, &quot;瞬&quot;, &quot;瞳&quot;, &quot;瞪&quot;, &quot;曙&quot;, &quot;蹋&quot;, &quot;蟋&quot;, &quot;蟀&quot;, &quot;嚎&quot;, &quot;赡&quot;, &quot;镣&quot;                , &quot;魏&quot;, &quot;簇&quot;, &quot;儡&quot;, &quot;徽&quot;, &quot;爵&quot;, &quot;朦&quot;, &quot;臊&quot;, &quot;鳄&quot;, &quot;糜&quot;, &quot;癌&quot;, &quot;懦&quot;, &quot;豁&quot;, &quot;臀&quot;, &quot;藕&quot;, &quot;藤&quot;, &quot;瞻&quot;, &quot;嚣&quot;, &quot;鳍&quot;, &quot;癞&quot;, &quot;瀑&quot;, &quot;襟&quot;, &quot;璧&quot;, &quot;戳&quot;, &quot;攒&quot;, &quot;孽&quot;                , &quot;蘑&quot;, &quot;藻&quot;, &quot;蹭&quot;, &quot;蹬&quot;, &quot;簸&quot;, &quot;簿&quot;, &quot;蟹&quot;, &quot;靡&quot;, &quot;癣&quot;, &quot;羹&quot;, &quot;鳖&quot;, &quot;鬓&quot;, &quot;攘&quot;, &quot;蠕&quot;, &quot;巍&quot;, &quot;鳞&quot;, &quot;糯&quot;, &quot;譬&quot;, &quot;霹&quot;, &quot;躏&quot;, &quot;髓&quot;, &quot;蘸&quot;, &quot;镶&quot;, &quot;瓤&quot;, &quot;矗&quot;        };</code></pre><h3 id="2-百家姓"><a href="#2-百家姓" class="headerlink" title="2. 百家姓"></a>2. 百家姓</h3><pre><code class="java">String[] Surname = {&quot;赵&quot;, &quot;钱&quot;, &quot;孙&quot;, &quot;李&quot;, &quot;周&quot;, &quot;吴&quot;, &quot;郑&quot;, &quot;王&quot;, &quot;冯&quot;, &quot;陈&quot;, &quot;褚&quot;, &quot;卫&quot;, &quot;蒋&quot;, &quot;沈&quot;, &quot;韩&quot;, &quot;杨&quot;, &quot;朱&quot;, &quot;秦&quot;, &quot;尤&quot;, &quot;许&quot;,                &quot;何&quot;, &quot;吕&quot;, &quot;施&quot;, &quot;张&quot;, &quot;孔&quot;, &quot;曹&quot;, &quot;严&quot;, &quot;华&quot;, &quot;金&quot;, &quot;魏&quot;, &quot;陶&quot;, &quot;姜&quot;, &quot;戚&quot;, &quot;谢&quot;, &quot;邹&quot;, &quot;喻&quot;, &quot;柏&quot;, &quot;水&quot;, &quot;窦&quot;, &quot;章&quot;, &quot;云&quot;, &quot;苏&quot;, &quot;潘&quot;, &quot;葛&quot;, &quot;奚&quot;, &quot;范&quot;, &quot;彭&quot;, &quot;郎&quot;,                &quot;鲁&quot;, &quot;韦&quot;, &quot;昌&quot;, &quot;马&quot;, &quot;苗&quot;, &quot;凤&quot;, &quot;花&quot;, &quot;方&quot;, &quot;俞&quot;, &quot;任&quot;, &quot;袁&quot;, &quot;柳&quot;, &quot;酆&quot;, &quot;鲍&quot;, &quot;史&quot;, &quot;唐&quot;, &quot;费&quot;, &quot;廉&quot;, &quot;岑&quot;, &quot;薛&quot;, &quot;雷&quot;, &quot;贺&quot;, &quot;倪&quot;, &quot;汤&quot;, &quot;滕&quot;, &quot;殷&quot;,                &quot;罗&quot;, &quot;毕&quot;, &quot;郝&quot;, &quot;邬&quot;, &quot;安&quot;, &quot;常&quot;, &quot;乐&quot;, &quot;于&quot;, &quot;时&quot;, &quot;傅&quot;, &quot;皮&quot;, &quot;卞&quot;, &quot;齐&quot;, &quot;康&quot;, &quot;伍&quot;, &quot;余&quot;, &quot;元&quot;, &quot;卜&quot;, &quot;顾&quot;, &quot;孟&quot;, &quot;平&quot;, &quot;黄&quot;, &quot;和&quot;,                &quot;穆&quot;, &quot;萧&quot;, &quot;尹&quot;, &quot;姚&quot;, &quot;邵&quot;, &quot;湛&quot;, &quot;汪&quot;, &quot;祁&quot;, &quot;毛&quot;, &quot;禹&quot;, &quot;狄&quot;, &quot;米&quot;, &quot;贝&quot;, &quot;明&quot;, &quot;臧&quot;, &quot;计&quot;, &quot;伏&quot;, &quot;成&quot;, &quot;戴&quot;, &quot;谈&quot;, &quot;宋&quot;, &quot;茅&quot;, &quot;庞&quot;, &quot;熊&quot;, &quot;纪&quot;, &quot;舒&quot;,                &quot;屈&quot;, &quot;项&quot;, &quot;祝&quot;, &quot;董&quot;, &quot;梁&quot;, &quot;杜&quot;, &quot;阮&quot;, &quot;蓝&quot;, &quot;闵&quot;, &quot;席&quot;, &quot;季&quot;, &quot;麻&quot;, &quot;强&quot;, &quot;贾&quot;, &quot;路&quot;, &quot;娄&quot;, &quot;危&quot;, &quot;江&quot;, &quot;童&quot;, &quot;颜&quot;, &quot;郭&quot;, &quot;梅&quot;, &quot;盛&quot;, &quot;林&quot;, &quot;刁&quot;, &quot;钟&quot;,                &quot;徐&quot;, &quot;邱&quot;, &quot;骆&quot;, &quot;高&quot;, &quot;夏&quot;, &quot;蔡&quot;, &quot;田&quot;, &quot;樊&quot;, &quot;胡&quot;, &quot;凌&quot;, &quot;霍&quot;, &quot;虞&quot;, &quot;万&quot;, &quot;支&quot;, &quot;柯&quot;, &quot;昝&quot;, &quot;管&quot;, &quot;卢&quot;, &quot;莫&quot;, &quot;经&quot;, &quot;房&quot;, &quot;裘&quot;, &quot;缪&quot;, &quot;干&quot;, &quot;解&quot;, &quot;应&quot;,                &quot;宗&quot;, &quot;丁&quot;, &quot;宣&quot;, &quot;贲&quot;, &quot;邓&quot;, &quot;郁&quot;, &quot;单&quot;, &quot;杭&quot;, &quot;洪&quot;, &quot;包&quot;, &quot;诸&quot;, &quot;左&quot;, &quot;石&quot;, &quot;崔&quot;, &quot;吉&quot;, &quot;钮&quot;, &quot;龚&quot;, &quot;程&quot;, &quot;嵇&quot;, &quot;邢&quot;, &quot;滑&quot;, &quot;裴&quot;, &quot;陆&quot;, &quot;荣&quot;, &quot;翁&quot;, &quot;荀&quot;,                &quot;羊&quot;, &quot;于&quot;, &quot;惠&quot;, &quot;甄&quot;, &quot;曲&quot;, &quot;家&quot;, &quot;封&quot;, &quot;芮&quot;, &quot;羿&quot;, &quot;储&quot;, &quot;靳&quot;, &quot;汲&quot;, &quot;邴&quot;, &quot;糜&quot;, &quot;松&quot;, &quot;井&quot;, &quot;段&quot;, &quot;富&quot;, &quot;巫&quot;, &quot;乌&quot;, &quot;焦&quot;, &quot;巴&quot;, &quot;弓&quot;, &quot;牧&quot;, &quot;隗&quot;, &quot;山&quot;,                &quot;谷&quot;, &quot;车&quot;, &quot;侯&quot;, &quot;宓&quot;, &quot;蓬&quot;, &quot;全&quot;, &quot;郗&quot;, &quot;班&quot;, &quot;仰&quot;, &quot;秋&quot;, &quot;仲&quot;, &quot;伊&quot;, &quot;宫&quot;, &quot;宁&quot;, &quot;仇&quot;, &quot;栾&quot;, &quot;暴&quot;, &quot;甘&quot;, &quot;钭&quot;, &quot;厉&quot;, &quot;戎&quot;, &quot;祖&quot;, &quot;武&quot;, &quot;符&quot;, &quot;刘&quot;, &quot;景&quot;,                &quot;詹&quot;, &quot;束&quot;, &quot;龙&quot;, &quot;叶&quot;, &quot;幸&quot;, &quot;司&quot;, &quot;韶&quot;, &quot;郜&quot;, &quot;黎&quot;, &quot;蓟&quot;, &quot;溥&quot;, &quot;印&quot;, &quot;宿&quot;, &quot;白&quot;, &quot;怀&quot;, &quot;蒲&quot;, &quot;邰&quot;, &quot;从&quot;, &quot;鄂&quot;, &quot;索&quot;, &quot;咸&quot;, &quot;籍&quot;, &quot;赖&quot;, &quot;卓&quot;, &quot;蔺&quot;, &quot;屠&quot;,                &quot;蒙&quot;, &quot;池&quot;, &quot;乔&quot;, &quot;阴&quot;, &quot;郁&quot;, &quot;胥&quot;, &quot;能&quot;, &quot;苍&quot;, &quot;双&quot;, &quot;闻&quot;, &quot;莘&quot;, &quot;党&quot;, &quot;翟&quot;, &quot;谭&quot;, &quot;贡&quot;, &quot;劳&quot;, &quot;逄&quot;, &quot;姬&quot;, &quot;申&quot;, &quot;扶&quot;, &quot;堵&quot;, &quot;冉&quot;, &quot;宰&quot;, &quot;郦&quot;, &quot;雍&quot;, &quot;却&quot;,                &quot;璩&quot;, &quot;桑&quot;, &quot;桂&quot;, &quot;濮&quot;, &quot;牛&quot;, &quot;寿&quot;, &quot;通&quot;, &quot;边&quot;, &quot;扈&quot;, &quot;燕&quot;, &quot;冀&quot;, &quot;浦&quot;, &quot;尚&quot;, &quot;农&quot;, &quot;温&quot;, &quot;别&quot;, &quot;庄&quot;, &quot;晏&quot;, &quot;柴&quot;, &quot;瞿&quot;, &quot;阎&quot;, &quot;充&quot;, &quot;慕&quot;, &quot;连&quot;, &quot;茹&quot;, &quot;习&quot;,                &quot;宦&quot;, &quot;艾&quot;, &quot;鱼&quot;, &quot;容&quot;, &quot;向&quot;, &quot;古&quot;, &quot;易&quot;, &quot;慎&quot;, &quot;戈&quot;, &quot;廖&quot;, &quot;庾&quot;, &quot;终&quot;, &quot;暨&quot;, &quot;居&quot;, &quot;衡&quot;, &quot;步&quot;, &quot;都&quot;, &quot;耿&quot;, &quot;满&quot;, &quot;弘&quot;, &quot;匡&quot;, &quot;国&quot;, &quot;文&quot;, &quot;寇&quot;, &quot;广&quot;, &quot;禄&quot;,                &quot;阙&quot;, &quot;东&quot;, &quot;欧&quot;, &quot;殳&quot;, &quot;沃&quot;, &quot;利&quot;, &quot;蔚&quot;, &quot;越&quot;, &quot;夔&quot;, &quot;隆&quot;, &quot;师&quot;, &quot;巩&quot;, &quot;厍&quot;, &quot;聂&quot;, &quot;晁&quot;, &quot;勾&quot;, &quot;敖&quot;, &quot;融&quot;, &quot;冷&quot;, &quot;訾&quot;, &quot;辛&quot;, &quot;阚&quot;, &quot;那&quot;, &quot;简&quot;, &quot;饶&quot;, &quot;空&quot;,                &quot;曾&quot;, &quot;毋&quot;, &quot;沙&quot;, &quot;乜&quot;, &quot;养&quot;, &quot;鞠&quot;, &quot;须&quot;, &quot;丰&quot;, &quot;巢&quot;, &quot;关&quot;, &quot;蒯&quot;, &quot;相&quot;, &quot;查&quot;, &quot;后&quot;, &quot;荆&quot;, &quot;红&quot;, &quot;游&quot;, &quot;郏&quot;, &quot;竺&quot;, &quot;权&quot;, &quot;逯&quot;, &quot;盖&quot;, &quot;益&quot;, &quot;桓&quot;, &quot;公&quot;, &quot;仉&quot;,                &quot;督&quot;, &quot;岳&quot;, &quot;帅&quot;, &quot;缑&quot;, &quot;亢&quot;, &quot;况&quot;, &quot;郈&quot;, &quot;有&quot;, &quot;琴&quot;, &quot;归&quot;, &quot;海&quot;, &quot;晋&quot;, &quot;楚&quot;, &quot;闫&quot;, &quot;法&quot;, &quot;汝&quot;, &quot;鄢&quot;, &quot;涂&quot;, &quot;钦&quot;, &quot;商&quot;, &quot;牟&quot;, &quot;佘&quot;, &quot;佴&quot;, &quot;伯&quot;, &quot;赏&quot;, &quot;墨&quot;,                &quot;哈&quot;, &quot;谯&quot;, &quot;篁&quot;, &quot;年&quot;, &quot;爱&quot;, &quot;阳&quot;, &quot;佟&quot;, &quot;言&quot;, &quot;福&quot;, &quot;南&quot;, &quot;火&quot;, &quot;铁&quot;, &quot;迟&quot;, &quot;漆&quot;, &quot;官&quot;, &quot;冼&quot;, &quot;真&quot;, &quot;展&quot;, &quot;繁&quot;, &quot;檀&quot;, &quot;祭&quot;, &quot;密&quot;, &quot;敬&quot;, &quot;揭&quot;, &quot;舜&quot;, &quot;楼&quot;,                &quot;疏&quot;, &quot;冒&quot;, &quot;浑&quot;, &quot;挚&quot;, &quot;胶&quot;, &quot;随&quot;, &quot;高&quot;, &quot;皋&quot;, &quot;原&quot;, &quot;种&quot;, &quot;练&quot;, &quot;弥&quot;, &quot;仓&quot;, &quot;眭&quot;, &quot;蹇&quot;, &quot;覃&quot;, &quot;阿&quot;, &quot;门&quot;, &quot;恽&quot;, &quot;来&quot;, &quot;綦&quot;, &quot;召&quot;, &quot;仪&quot;, &quot;风&quot;, &quot;介&quot;, &quot;巨&quot;,                &quot;木&quot;, &quot;京&quot;, &quot;狐&quot;, &quot;郇&quot;, &quot;虎&quot;, &quot;枚&quot;, &quot;抗&quot;, &quot;达&quot;, &quot;杞&quot;, &quot;苌&quot;, &quot;折&quot;, &quot;麦&quot;, &quot;庆&quot;, &quot;过&quot;, &quot;竹&quot;, &quot;端&quot;, &quot;鲜&quot;, &quot;皇&quot;, &quot;亓&quot;, &quot;老&quot;, &quot;是&quot;, &quot;秘&quot;, &quot;畅&quot;, &quot;邝&quot;, &quot;还&quot;, &quot;宾&quot;,                &quot;闾&quot;, &quot;辜&quot;, &quot;纵&quot;, &quot;侴&quot;, &quot;万俟&quot;, &quot;司马&quot;, &quot;上官&quot;, &quot;欧阳&quot;, &quot;夏侯&quot;, &quot;诸葛&quot;, &quot;闻人&quot;, &quot;东方&quot;, &quot;赫连&quot;, &quot;皇甫&quot;, &quot;羊舌&quot;, &quot;尉迟&quot;, &quot;公羊&quot;, &quot;澹台&quot;, &quot;公冶&quot;, &quot;宗正&quot;,                &quot;濮阳&quot;, &quot;淳于&quot;, &quot;单于&quot;, &quot;太叔&quot;, &quot;申屠&quot;, &quot;公孙&quot;, &quot;仲孙&quot;, &quot;轩辕&quot;, &quot;令狐&quot;, &quot;钟离&quot;, &quot;宇文&quot;, &quot;长孙&quot;, &quot;慕容&quot;, &quot;鲜于&quot;, &quot;闾丘&quot;, &quot;司徒&quot;, &quot;司空&quot;, &quot;兀官&quot;, &quot;司寇&quot;,                &quot;南门&quot;, &quot;呼延&quot;, &quot;子车&quot;, &quot;颛孙&quot;, &quot;端木&quot;, &quot;巫马&quot;, &quot;公西&quot;, &quot;漆雕&quot;, &quot;车正&quot;, &quot;壤驷&quot;, &quot;公良&quot;, &quot;拓跋&quot;, &quot;夹谷&quot;, &quot;宰父&quot;, &quot;谷梁&quot;, &quot;段干&quot;, &quot;百里&quot;, &quot;东郭&quot;, &quot;微生&quot;,                &quot;梁丘&quot;, &quot;左丘&quot;, &quot;东门&quot;, &quot;西门&quot;, &quot;南宫&quot;, &quot;第五&quot;, &quot;公仪&quot;, &quot;公乘&quot;, &quot;太史&quot;, &quot;仲长&quot;, &quot;叔孙&quot;, &quot;屈突&quot;, &quot;尔朱&quot;, &quot;东乡&quot;, &quot;相里&quot;, &quot;胡母&quot;, &quot;司城&quot;, &quot;张廖&quot;, &quot;雍门&quot;,                &quot;毋丘&quot;, &quot;贺兰&quot;, &quot;綦毋&quot;, &quot;屋庐&quot;, &quot;独孤&quot;, &quot;南郭&quot;, &quot;北宫&quot;, &quot;王孙&quot;};</code></pre><h3 id="3-随机取汉字"><a href="#3-随机取汉字" class="headerlink" title="3. 随机取汉字"></a>3. 随机取汉字</h3><pre><code class="java"> public static String getAuthor() {//为了结果不那么奇怪，建议随机index取常用字。这里是取所有的字，你会发现生成的生僻字太多太多了//from:https://blog.csdn.net/zzy2011266/article/details/42011047        String str = null;        int highPos, lowPos;        Random random = new Random();        highPos = (176 + Math.abs(random.nextInt(55)));//区码,尽量全选一区        random = new Random();        lowPos = 161 + Math.abs(random.nextInt(94));//位码        byte[] bArr = new byte[2];        bArr[0] = (Integer.valueOf(highPos)).byteValue();        bArr[1] = (Integer.valueOf(lowPos)).byteValue();        try {            str = new String(bArr, &quot;GB2312&quot;);    //区位码组合成汉字        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return str;    }</code></pre><h3 id="4-字库随机取汉字"><a href="#4-字库随机取汉字" class="headerlink" title="4. 字库随机取汉字"></a>4. 字库随机取汉字</h3><pre><code class="java">int Index = random.nextInt(usual.length - 1);char result = usual[Index];</code></pre><p>其实就是随机生成一个合法随机整数。。。</p><h3 id="5-生成名字的想法"><a href="#5-生成名字的想法" class="headerlink" title="5. 生成名字的想法"></a>5. 生成名字的想法</h3><p>名字分哪几种呢？俩字儿和仨字儿的居多，也可以按风格分，简单的，文艺的等等。可以每一种给个编号，我这就1表示俩字儿的，2表示仨字儿的，随机生成一个决定我取几次随机字。然后别忘了第一个要从百家姓字库里面取。就OK啦。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><pre><code class="java">import java.io.BufferedWriter;import java.io.File;import java.io.FileWriter;import java.io.UnsupportedEncodingException;import java.text.DecimalFormat;import java.util.Random;public class Test {    public static void main(String[] args) {        Random random = new Random(System.currentTimeMillis());        String[] usual = {                &quot;一&quot;, &quot;乙&quot;, &quot;二&quot;, &quot;十&quot;, &quot;丁&quot;, &quot;厂&quot;, &quot;七&quot;, &quot;卜&quot;, &quot;八&quot;, &quot;人&quot;, &quot;入&quot;, &quot;儿&quot;, &quot;九&quot;, &quot;几&quot;, &quot;了&quot;, &quot;乃&quot;, &quot;刀&quot;, &quot;力&quot;, &quot;又&quot;, &quot;三&quot;, &quot;干&quot;, &quot;于&quot;, &quot;亏&quot;, &quot;士&quot;, &quot;土&quot;                , &quot;工&quot;, &quot;才&quot;, &quot;下&quot;, &quot;寸&quot;, &quot;丈&quot;, &quot;大&quot;, &quot;与&quot;, &quot;万&quot;, &quot;上&quot;, &quot;小&quot;, &quot;口&quot;, &quot;山&quot;, &quot;巾&quot;, &quot;千&quot;, &quot;乞&quot;, &quot;川&quot;, &quot;亿&quot;, &quot;个&quot;, &quot;么&quot;, &quot;久&quot;, &quot;勺&quot;, &quot;丸&quot;, &quot;夕&quot;, &quot;凡&quot;, &quot;及&quot;                , &quot;广&quot;, &quot;亡&quot;, &quot;门&quot;, &quot;义&quot;, &quot;之&quot;, &quot;尸&quot;, &quot;已&quot;, &quot;弓&quot;, &quot;己&quot;, &quot;卫&quot;, &quot;子&quot;, &quot;也&quot;, &quot;女&quot;, &quot;飞&quot;, &quot;刃&quot;, &quot;习&quot;, &quot;叉&quot;, &quot;马&quot;, &quot;乡&quot;, &quot;丰&quot;, &quot;王&quot;, &quot;井&quot;, &quot;开&quot;, &quot;夫&quot;, &quot;天&quot;                , &quot;元&quot;, &quot;无&quot;, &quot;云&quot;, &quot;专&quot;, &quot;扎&quot;, &quot;艺&quot;, &quot;木&quot;, &quot;五&quot;, &quot;支&quot;, &quot;厅&quot;, &quot;不&quot;, &quot;太&quot;, &quot;犬&quot;, &quot;区&quot;, &quot;历&quot;, &quot;友&quot;, &quot;尤&quot;, &quot;匹&quot;, &quot;车&quot;, &quot;巨&quot;, &quot;牙&quot;, &quot;屯&quot;, &quot;比&quot;, &quot;互&quot;, &quot;切&quot;                , &quot;瓦&quot;, &quot;止&quot;, &quot;少&quot;, &quot;日&quot;, &quot;中&quot;, &quot;贝&quot;, &quot;内&quot;, &quot;水&quot;, &quot;冈&quot;, &quot;见&quot;, &quot;手&quot;, &quot;午&quot;, &quot;牛&quot;, &quot;毛&quot;, &quot;气&quot;, &quot;升&quot;, &quot;长&quot;, &quot;仁&quot;, &quot;什&quot;, &quot;片&quot;, &quot;仆&quot;, &quot;化&quot;, &quot;仇&quot;, &quot;币&quot;, &quot;仍&quot;                , &quot;仅&quot;, &quot;斤&quot;, &quot;爪&quot;, &quot;反&quot;, &quot;介&quot;, &quot;父&quot;, &quot;从&quot;, &quot;今&quot;, &quot;凶&quot;, &quot;分&quot;, &quot;乏&quot;, &quot;公&quot;, &quot;仓&quot;, &quot;月&quot;, &quot;氏&quot;, &quot;勿&quot;, &quot;风&quot;, &quot;欠&quot;, &quot;丹&quot;, &quot;匀&quot;, &quot;乌&quot;, &quot;勾&quot;, &quot;凤&quot;, &quot;六&quot;, &quot;文&quot;                , &quot;方&quot;, &quot;火&quot;, &quot;为&quot;, &quot;斗&quot;, &quot;忆&quot;, &quot;计&quot;, &quot;订&quot;, &quot;户&quot;, &quot;认&quot;, &quot;心&quot;, &quot;尺&quot;, &quot;引&quot;, &quot;丑&quot;, &quot;巴&quot;, &quot;孔&quot;, &quot;队&quot;, &quot;办&quot;, &quot;以&quot;, &quot;允&quot;, &quot;予&quot;, &quot;劝&quot;, &quot;双&quot;, &quot;书&quot;, &quot;幻&quot;, &quot;玉&quot;                , &quot;刊&quot;, &quot;末&quot;, &quot;未&quot;, &quot;示&quot;, &quot;击&quot;, &quot;打&quot;, &quot;巧&quot;, &quot;正&quot;, &quot;扑&quot;, &quot;扒&quot;, &quot;功&quot;, &quot;扔&quot;, &quot;去&quot;, &quot;甘&quot;, &quot;世&quot;, &quot;古&quot;, &quot;节&quot;, &quot;本&quot;, &quot;术&quot;, &quot;可&quot;, &quot;丙&quot;, &quot;左&quot;, &quot;厉&quot;, &quot;石&quot;, &quot;右&quot;                , &quot;布&quot;, &quot;龙&quot;, &quot;平&quot;, &quot;灭&quot;, &quot;轧&quot;, &quot;东&quot;, &quot;卡&quot;, &quot;北&quot;, &quot;占&quot;, &quot;业&quot;, &quot;旧&quot;, &quot;帅&quot;, &quot;归&quot;, &quot;目&quot;, &quot;旦&quot;, &quot;且&quot;, &quot;叮&quot;, &quot;叶&quot;, &quot;甲&quot;, &quot;申&quot;, &quot;号&quot;, &quot;电&quot;, &quot;田&quot;, &quot;由&quot;, &quot;只&quot;                , &quot;央&quot;, &quot;史&quot;, &quot;兄&quot;, &quot;叼&quot;, &quot;叫&quot;, &quot;叨&quot;, &quot;另&quot;, &quot;叹&quot;, &quot;四&quot;, &quot;生&quot;, &quot;失&quot;, &quot;禾&quot;, &quot;丘&quot;, &quot;付&quot;, &quot;仗&quot;, &quot;代&quot;, &quot;仙&quot;, &quot;们&quot;, &quot;仪&quot;, &quot;白&quot;, &quot;仔&quot;, &quot;他&quot;, &quot;斥&quot;, &quot;瓜&quot;, &quot;乎&quot;                , &quot;丛&quot;, &quot;令&quot;, &quot;用&quot;, &quot;甩&quot;, &quot;印&quot;, &quot;乐&quot;, &quot;句&quot;, &quot;匆&quot;, &quot;册&quot;, &quot;犯&quot;, &quot;外&quot;, &quot;处&quot;, &quot;冬&quot;, &quot;鸟&quot;, &quot;务&quot;, &quot;包&quot;, &quot;饥&quot;, &quot;主&quot;, &quot;市&quot;, &quot;立&quot;, &quot;闪&quot;, &quot;兰&quot;, &quot;半&quot;, &quot;汁&quot;, &quot;汇&quot;                , &quot;头&quot;, &quot;汉&quot;, &quot;宁&quot;, &quot;穴&quot;, &quot;它&quot;, &quot;讨&quot;, &quot;写&quot;, &quot;让&quot;, &quot;礼&quot;, &quot;训&quot;, &quot;必&quot;, &quot;议&quot;, &quot;讯&quot;, &quot;记&quot;, &quot;永&quot;, &quot;司&quot;, &quot;尼&quot;, &quot;民&quot;, &quot;出&quot;, &quot;辽&quot;, &quot;奶&quot;, &quot;奴&quot;, &quot;加&quot;, &quot;召&quot;, &quot;皮&quot;                , &quot;边&quot;, &quot;孕&quot;, &quot;发&quot;, &quot;圣&quot;, &quot;对&quot;, &quot;台&quot;, &quot;矛&quot;, &quot;纠&quot;, &quot;母&quot;, &quot;幼&quot;, &quot;丝&quot;, &quot;式&quot;, &quot;刑&quot;, &quot;动&quot;, &quot;扛&quot;, &quot;寺&quot;, &quot;吉&quot;, &quot;扣&quot;, &quot;考&quot;, &quot;托&quot;, &quot;老&quot;, &quot;圾&quot;, &quot;巩&quot;, &quot;执&quot;, &quot;扩&quot;                , &quot;扫&quot;, &quot;地&quot;, &quot;扬&quot;, &quot;场&quot;, &quot;耳&quot;, &quot;共&quot;, &quot;芒&quot;, &quot;亚&quot;, &quot;芝&quot;, &quot;朽&quot;, &quot;朴&quot;, &quot;机&quot;, &quot;权&quot;, &quot;过&quot;, &quot;臣&quot;, &quot;再&quot;, &quot;协&quot;, &quot;西&quot;, &quot;压&quot;, &quot;厌&quot;, &quot;在&quot;, &quot;百&quot;, &quot;有&quot;, &quot;存&quot;, &quot;而&quot;                , &quot;页&quot;, &quot;匠&quot;, &quot;夸&quot;, &quot;夺&quot;, &quot;灰&quot;, &quot;达&quot;, &quot;列&quot;, &quot;死&quot;, &quot;成&quot;, &quot;夹&quot;, &quot;轨&quot;, &quot;邪&quot;, &quot;划&quot;, &quot;迈&quot;, &quot;毕&quot;, &quot;至&quot;, &quot;此&quot;, &quot;贞&quot;, &quot;师&quot;, &quot;尘&quot;, &quot;尖&quot;, &quot;劣&quot;, &quot;光&quot;, &quot;当&quot;, &quot;早&quot;                , &quot;吐&quot;, &quot;吓&quot;, &quot;虫&quot;, &quot;曲&quot;, &quot;团&quot;, &quot;同&quot;, &quot;吊&quot;, &quot;吃&quot;, &quot;因&quot;, &quot;吸&quot;, &quot;吗&quot;, &quot;屿&quot;, &quot;帆&quot;, &quot;岁&quot;, &quot;回&quot;, &quot;岂&quot;, &quot;则&quot;, &quot;刚&quot;, &quot;网&quot;, &quot;肉&quot;, &quot;年&quot;, &quot;朱&quot;, &quot;先&quot;, &quot;丢&quot;, &quot;舌&quot;                , &quot;竹&quot;, &quot;迁&quot;, &quot;乔&quot;, &quot;伟&quot;, &quot;传&quot;, &quot;乒&quot;, &quot;乓&quot;, &quot;休&quot;, &quot;伍&quot;, &quot;伏&quot;, &quot;优&quot;, &quot;伐&quot;, &quot;延&quot;, &quot;件&quot;, &quot;任&quot;, &quot;伤&quot;, &quot;价&quot;, &quot;份&quot;, &quot;华&quot;, &quot;仰&quot;, &quot;仿&quot;, &quot;伙&quot;, &quot;伪&quot;, &quot;自&quot;, &quot;血&quot;                , &quot;向&quot;, &quot;似&quot;, &quot;后&quot;, &quot;行&quot;, &quot;舟&quot;, &quot;全&quot;, &quot;会&quot;, &quot;杀&quot;, &quot;合&quot;, &quot;兆&quot;, &quot;企&quot;, &quot;众&quot;, &quot;爷&quot;, &quot;伞&quot;, &quot;创&quot;, &quot;肌&quot;, &quot;朵&quot;, &quot;杂&quot;, &quot;危&quot;, &quot;旬&quot;, &quot;旨&quot;, &quot;负&quot;, &quot;各&quot;, &quot;名&quot;, &quot;多&quot;                , &quot;争&quot;, &quot;色&quot;, &quot;壮&quot;, &quot;冲&quot;, &quot;冰&quot;, &quot;庄&quot;, &quot;庆&quot;, &quot;亦&quot;, &quot;刘&quot;, &quot;齐&quot;, &quot;交&quot;, &quot;次&quot;, &quot;衣&quot;, &quot;产&quot;, &quot;决&quot;, &quot;充&quot;, &quot;妄&quot;, &quot;闭&quot;, &quot;问&quot;, &quot;闯&quot;, &quot;羊&quot;, &quot;并&quot;, &quot;关&quot;, &quot;米&quot;, &quot;灯&quot;                , &quot;州&quot;, &quot;汗&quot;, &quot;污&quot;, &quot;江&quot;, &quot;池&quot;, &quot;汤&quot;, &quot;忙&quot;, &quot;兴&quot;, &quot;宇&quot;, &quot;守&quot;, &quot;宅&quot;, &quot;字&quot;, &quot;安&quot;, &quot;讲&quot;, &quot;军&quot;, &quot;许&quot;, &quot;论&quot;, &quot;农&quot;, &quot;讽&quot;, &quot;设&quot;, &quot;访&quot;, &quot;寻&quot;, &quot;那&quot;, &quot;迅&quot;, &quot;尽&quot;                , &quot;导&quot;, &quot;异&quot;, &quot;孙&quot;, &quot;阵&quot;, &quot;阳&quot;, &quot;收&quot;, &quot;阶&quot;, &quot;阴&quot;, &quot;防&quot;, &quot;奸&quot;, &quot;如&quot;, &quot;妇&quot;, &quot;好&quot;, &quot;她&quot;, &quot;妈&quot;, &quot;戏&quot;, &quot;羽&quot;, &quot;观&quot;, &quot;欢&quot;, &quot;买&quot;, &quot;红&quot;, &quot;纤&quot;, &quot;约&quot;, &quot;级&quot;, &quot;纪&quot;                , &quot;驰&quot;, &quot;巡&quot;, &quot;寿&quot;, &quot;弄&quot;, &quot;麦&quot;, &quot;形&quot;, &quot;进&quot;, &quot;戒&quot;, &quot;吞&quot;, &quot;远&quot;, &quot;违&quot;, &quot;运&quot;, &quot;扶&quot;, &quot;抚&quot;, &quot;坛&quot;, &quot;技&quot;, &quot;坏&quot;, &quot;扰&quot;, &quot;拒&quot;, &quot;找&quot;, &quot;批&quot;, &quot;扯&quot;, &quot;址&quot;, &quot;走&quot;, &quot;抄&quot;                , &quot;坝&quot;, &quot;贡&quot;, &quot;攻&quot;, &quot;赤&quot;, &quot;折&quot;, &quot;抓&quot;, &quot;扮&quot;, &quot;抢&quot;, &quot;孝&quot;, &quot;均&quot;, &quot;抛&quot;, &quot;投&quot;, &quot;坟&quot;, &quot;坑&quot;, &quot;抗&quot;, &quot;坊&quot;, &quot;抖&quot;, &quot;护&quot;, &quot;壳&quot;, &quot;志&quot;, &quot;块&quot;, &quot;扭&quot;, &quot;声&quot;, &quot;把&quot;, &quot;报&quot;                , &quot;却&quot;, &quot;劫&quot;, &quot;芽&quot;, &quot;花&quot;, &quot;芹&quot;, &quot;芬&quot;, &quot;苍&quot;, &quot;芳&quot;, &quot;严&quot;, &quot;芦&quot;, &quot;劳&quot;, &quot;克&quot;, &quot;苏&quot;, &quot;杆&quot;, &quot;杜&quot;, &quot;杠&quot;, &quot;材&quot;, &quot;村&quot;, &quot;杏&quot;, &quot;极&quot;, &quot;李&quot;, &quot;杨&quot;, &quot;求&quot;, &quot;更&quot;, &quot;束&quot;                , &quot;豆&quot;, &quot;两&quot;, &quot;丽&quot;, &quot;医&quot;, &quot;辰&quot;, &quot;励&quot;, &quot;否&quot;, &quot;还&quot;, &quot;歼&quot;, &quot;来&quot;, &quot;连&quot;, &quot;步&quot;, &quot;坚&quot;, &quot;旱&quot;, &quot;盯&quot;, &quot;呈&quot;, &quot;时&quot;, &quot;吴&quot;, &quot;助&quot;, &quot;县&quot;, &quot;里&quot;, &quot;呆&quot;, &quot;园&quot;, &quot;旷&quot;, &quot;围&quot;                , &quot;呀&quot;, &quot;吨&quot;, &quot;足&quot;, &quot;邮&quot;, &quot;男&quot;, &quot;困&quot;, &quot;吵&quot;, &quot;串&quot;, &quot;员&quot;, &quot;听&quot;, &quot;吩&quot;, &quot;吹&quot;, &quot;呜&quot;, &quot;吼&quot;, &quot;吧&quot;, &quot;别&quot;, &quot;岗&quot;, &quot;帐&quot;, &quot;财&quot;, &quot;钉&quot;, &quot;针&quot;, &quot;告&quot;, &quot;我&quot;, &quot;乱&quot;, &quot;利&quot;                , &quot;秃&quot;, &quot;秀&quot;, &quot;私&quot;, &quot;每&quot;, &quot;兵&quot;, &quot;估&quot;, &quot;体&quot;, &quot;何&quot;, &quot;但&quot;, &quot;伸&quot;, &quot;作&quot;, &quot;伯&quot;, &quot;伶&quot;, &quot;佣&quot;, &quot;低&quot;, &quot;你&quot;, &quot;住&quot;, &quot;位&quot;, &quot;伴&quot;, &quot;身&quot;, &quot;皂&quot;, &quot;佛&quot;, &quot;近&quot;, &quot;彻&quot;, &quot;役&quot;                , &quot;返&quot;, &quot;余&quot;, &quot;希&quot;, &quot;坐&quot;, &quot;谷&quot;, &quot;妥&quot;, &quot;含&quot;, &quot;邻&quot;, &quot;岔&quot;, &quot;肝&quot;, &quot;肚&quot;, &quot;肠&quot;, &quot;龟&quot;, &quot;免&quot;, &quot;狂&quot;, &quot;犹&quot;, &quot;角&quot;, &quot;删&quot;, &quot;条&quot;, &quot;卵&quot;, &quot;岛&quot;, &quot;迎&quot;, &quot;饭&quot;, &quot;饮&quot;, &quot;系&quot;                , &quot;言&quot;, &quot;冻&quot;, &quot;状&quot;, &quot;亩&quot;, &quot;况&quot;, &quot;床&quot;, &quot;库&quot;, &quot;疗&quot;, &quot;应&quot;, &quot;冷&quot;, &quot;这&quot;, &quot;序&quot;, &quot;辛&quot;, &quot;弃&quot;, &quot;冶&quot;, &quot;忘&quot;, &quot;闲&quot;, &quot;间&quot;, &quot;闷&quot;, &quot;判&quot;, &quot;灶&quot;, &quot;灿&quot;, &quot;弟&quot;, &quot;汪&quot;, &quot;沙&quot;                , &quot;汽&quot;, &quot;沃&quot;, &quot;泛&quot;, &quot;沟&quot;, &quot;没&quot;, &quot;沈&quot;, &quot;沉&quot;, &quot;怀&quot;, &quot;忧&quot;, &quot;快&quot;, &quot;完&quot;, &quot;宋&quot;, &quot;宏&quot;, &quot;牢&quot;, &quot;究&quot;, &quot;穷&quot;, &quot;灾&quot;, &quot;良&quot;, &quot;证&quot;, &quot;启&quot;, &quot;评&quot;, &quot;补&quot;, &quot;初&quot;, &quot;社&quot;, &quot;识&quot;                , &quot;诉&quot;, &quot;诊&quot;, &quot;词&quot;, &quot;译&quot;, &quot;君&quot;, &quot;灵&quot;, &quot;即&quot;, &quot;层&quot;, &quot;尿&quot;, &quot;尾&quot;, &quot;迟&quot;, &quot;局&quot;, &quot;改&quot;, &quot;张&quot;, &quot;忌&quot;, &quot;际&quot;, &quot;陆&quot;, &quot;阿&quot;, &quot;陈&quot;, &quot;阻&quot;, &quot;附&quot;, &quot;妙&quot;, &quot;妖&quot;, &quot;妨&quot;, &quot;努&quot;                , &quot;忍&quot;, &quot;劲&quot;, &quot;鸡&quot;, &quot;驱&quot;, &quot;纯&quot;, &quot;纱&quot;, &quot;纲&quot;, &quot;纳&quot;, &quot;纵&quot;, &quot;驳&quot;, &quot;纷&quot;, &quot;纸&quot;, &quot;纹&quot;, &quot;纺&quot;, &quot;驴&quot;, &quot;纽&quot;, &quot;奉&quot;, &quot;玩&quot;, &quot;环&quot;, &quot;武&quot;, &quot;青&quot;, &quot;责&quot;, &quot;现&quot;, &quot;表&quot;, &quot;规&quot;                , &quot;抹&quot;, &quot;拢&quot;, &quot;拔&quot;, &quot;拣&quot;, &quot;坦&quot;, &quot;担&quot;, &quot;押&quot;, &quot;抽&quot;, &quot;拐&quot;, &quot;拖&quot;, &quot;者&quot;, &quot;拍&quot;, &quot;顶&quot;, &quot;拆&quot;, &quot;拥&quot;, &quot;抵&quot;, &quot;拘&quot;, &quot;势&quot;, &quot;抱&quot;, &quot;垃&quot;, &quot;拉&quot;, &quot;拦&quot;, &quot;幸&quot;, &quot;拌&quot;, &quot;招&quot;                , &quot;坡&quot;, &quot;披&quot;, &quot;拨&quot;, &quot;择&quot;, &quot;抬&quot;, &quot;其&quot;, &quot;取&quot;, &quot;苦&quot;, &quot;若&quot;, &quot;茂&quot;, &quot;苹&quot;, &quot;苗&quot;, &quot;英&quot;, &quot;范&quot;, &quot;直&quot;, &quot;茄&quot;, &quot;茎&quot;, &quot;茅&quot;, &quot;林&quot;, &quot;枝&quot;, &quot;杯&quot;, &quot;柜&quot;, &quot;析&quot;, &quot;板&quot;, &quot;松&quot;                , &quot;枪&quot;, &quot;构&quot;, &quot;杰&quot;, &quot;述&quot;, &quot;枕&quot;, &quot;丧&quot;, &quot;或&quot;, &quot;画&quot;, &quot;卧&quot;, &quot;事&quot;, &quot;刺&quot;, &quot;枣&quot;, &quot;雨&quot;, &quot;卖&quot;, &quot;矿&quot;, &quot;码&quot;, &quot;厕&quot;, &quot;奔&quot;, &quot;奇&quot;, &quot;奋&quot;, &quot;态&quot;, &quot;欧&quot;, &quot;垄&quot;, &quot;妻&quot;, &quot;轰&quot;                , &quot;顷&quot;, &quot;转&quot;, &quot;斩&quot;, &quot;轮&quot;, &quot;软&quot;, &quot;到&quot;, &quot;非&quot;, &quot;叔&quot;, &quot;肯&quot;, &quot;齿&quot;, &quot;些&quot;, &quot;虎&quot;, &quot;虏&quot;, &quot;肾&quot;, &quot;贤&quot;, &quot;尚&quot;, &quot;旺&quot;, &quot;具&quot;, &quot;果&quot;, &quot;味&quot;, &quot;昆&quot;, &quot;国&quot;, &quot;昌&quot;, &quot;畅&quot;, &quot;明&quot;                , &quot;易&quot;, &quot;昂&quot;, &quot;典&quot;, &quot;固&quot;, &quot;忠&quot;, &quot;咐&quot;, &quot;呼&quot;, &quot;鸣&quot;, &quot;咏&quot;, &quot;呢&quot;, &quot;岸&quot;, &quot;岩&quot;, &quot;帖&quot;, &quot;罗&quot;, &quot;帜&quot;, &quot;岭&quot;, &quot;凯&quot;, &quot;败&quot;, &quot;贩&quot;, &quot;购&quot;, &quot;图&quot;, &quot;钓&quot;, &quot;制&quot;, &quot;知&quot;, &quot;垂&quot;                , &quot;牧&quot;, &quot;物&quot;, &quot;乖&quot;, &quot;刮&quot;, &quot;秆&quot;, &quot;和&quot;, &quot;季&quot;, &quot;委&quot;, &quot;佳&quot;, &quot;侍&quot;, &quot;供&quot;, &quot;使&quot;, &quot;例&quot;, &quot;版&quot;, &quot;侄&quot;, &quot;侦&quot;, &quot;侧&quot;, &quot;凭&quot;, &quot;侨&quot;, &quot;佩&quot;, &quot;货&quot;, &quot;依&quot;, &quot;的&quot;, &quot;迫&quot;, &quot;质&quot;                , &quot;欣&quot;, &quot;征&quot;, &quot;往&quot;, &quot;爬&quot;, &quot;彼&quot;, &quot;径&quot;, &quot;所&quot;, &quot;舍&quot;, &quot;金&quot;, &quot;命&quot;, &quot;斧&quot;, &quot;爸&quot;, &quot;采&quot;, &quot;受&quot;, &quot;乳&quot;, &quot;贪&quot;, &quot;念&quot;, &quot;贫&quot;, &quot;肤&quot;, &quot;肺&quot;, &quot;肢&quot;, &quot;肿&quot;, &quot;胀&quot;, &quot;朋&quot;, &quot;股&quot;                , &quot;肥&quot;, &quot;服&quot;, &quot;胁&quot;, &quot;周&quot;, &quot;昏&quot;, &quot;鱼&quot;, &quot;兔&quot;, &quot;狐&quot;, &quot;忽&quot;, &quot;狗&quot;, &quot;备&quot;, &quot;饰&quot;, &quot;饱&quot;, &quot;饲&quot;, &quot;变&quot;, &quot;京&quot;, &quot;享&quot;, &quot;店&quot;, &quot;夜&quot;, &quot;庙&quot;, &quot;府&quot;, &quot;底&quot;, &quot;剂&quot;, &quot;郊&quot;, &quot;废&quot;                , &quot;净&quot;, &quot;盲&quot;, &quot;放&quot;, &quot;刻&quot;, &quot;育&quot;, &quot;闸&quot;, &quot;闹&quot;, &quot;郑&quot;, &quot;券&quot;, &quot;卷&quot;, &quot;单&quot;, &quot;炒&quot;, &quot;炊&quot;, &quot;炕&quot;, &quot;炎&quot;, &quot;炉&quot;, &quot;沫&quot;, &quot;浅&quot;, &quot;法&quot;, &quot;泄&quot;, &quot;河&quot;, &quot;沾&quot;, &quot;泪&quot;, &quot;油&quot;, &quot;泊&quot;                , &quot;沿&quot;, &quot;泡&quot;, &quot;注&quot;, &quot;泻&quot;, &quot;泳&quot;, &quot;泥&quot;, &quot;沸&quot;, &quot;波&quot;, &quot;泼&quot;, &quot;泽&quot;, &quot;治&quot;, &quot;怖&quot;, &quot;性&quot;, &quot;怕&quot;, &quot;怜&quot;, &quot;怪&quot;, &quot;学&quot;, &quot;宝&quot;, &quot;宗&quot;, &quot;定&quot;, &quot;宜&quot;, &quot;审&quot;, &quot;宙&quot;, &quot;官&quot;, &quot;空&quot;                , &quot;帘&quot;, &quot;实&quot;, &quot;试&quot;, &quot;郎&quot;, &quot;诗&quot;, &quot;肩&quot;, &quot;房&quot;, &quot;诚&quot;, &quot;衬&quot;, &quot;衫&quot;, &quot;视&quot;, &quot;话&quot;, &quot;诞&quot;, &quot;询&quot;, &quot;该&quot;, &quot;详&quot;, &quot;建&quot;, &quot;肃&quot;, &quot;隶&quot;, &quot;录&quot;, &quot;居&quot;, &quot;届&quot;, &quot;刷&quot;, &quot;屈&quot;, &quot;弦&quot;                , &quot;承&quot;, &quot;孟&quot;, &quot;孤&quot;, &quot;陕&quot;, &quot;降&quot;, &quot;限&quot;, &quot;妹&quot;, &quot;姑&quot;, &quot;姐&quot;, &quot;姓&quot;, &quot;始&quot;, &quot;驾&quot;, &quot;参&quot;, &quot;艰&quot;, &quot;线&quot;, &quot;练&quot;, &quot;组&quot;, &quot;细&quot;, &quot;驶&quot;, &quot;织&quot;, &quot;终&quot;, &quot;驻&quot;, &quot;驼&quot;, &quot;绍&quot;, &quot;经&quot;                , &quot;贯&quot;, &quot;奏&quot;, &quot;春&quot;, &quot;帮&quot;, &quot;珍&quot;, &quot;玻&quot;, &quot;毒&quot;, &quot;型&quot;, &quot;挂&quot;, &quot;封&quot;, &quot;持&quot;, &quot;项&quot;, &quot;垮&quot;, &quot;挎&quot;, &quot;城&quot;, &quot;挠&quot;, &quot;政&quot;, &quot;赴&quot;, &quot;赵&quot;, &quot;挡&quot;, &quot;挺&quot;, &quot;括&quot;, &quot;拴&quot;, &quot;拾&quot;, &quot;挑&quot;                , &quot;指&quot;, &quot;垫&quot;, &quot;挣&quot;, &quot;挤&quot;, &quot;拼&quot;, &quot;挖&quot;, &quot;按&quot;, &quot;挥&quot;, &quot;挪&quot;, &quot;某&quot;, &quot;甚&quot;, &quot;革&quot;, &quot;荐&quot;, &quot;巷&quot;, &quot;带&quot;, &quot;草&quot;, &quot;茧&quot;, &quot;茶&quot;, &quot;荒&quot;, &quot;茫&quot;, &quot;荡&quot;, &quot;荣&quot;, &quot;故&quot;, &quot;胡&quot;, &quot;南&quot;                , &quot;药&quot;, &quot;标&quot;, &quot;枯&quot;, &quot;柄&quot;, &quot;栋&quot;, &quot;相&quot;, &quot;查&quot;, &quot;柏&quot;, &quot;柳&quot;, &quot;柱&quot;, &quot;柿&quot;, &quot;栏&quot;, &quot;树&quot;, &quot;要&quot;, &quot;咸&quot;, &quot;威&quot;, &quot;歪&quot;, &quot;研&quot;, &quot;砖&quot;, &quot;厘&quot;, &quot;厚&quot;, &quot;砌&quot;, &quot;砍&quot;, &quot;面&quot;, &quot;耐&quot;                , &quot;耍&quot;, &quot;牵&quot;, &quot;残&quot;, &quot;殃&quot;, &quot;轻&quot;, &quot;鸦&quot;, &quot;皆&quot;, &quot;背&quot;, &quot;战&quot;, &quot;点&quot;, &quot;临&quot;, &quot;览&quot;, &quot;竖&quot;, &quot;省&quot;, &quot;削&quot;, &quot;尝&quot;, &quot;是&quot;, &quot;盼&quot;, &quot;眨&quot;, &quot;哄&quot;, &quot;哑&quot;, &quot;显&quot;, &quot;冒&quot;, &quot;映&quot;, &quot;星&quot;                , &quot;昨&quot;, &quot;畏&quot;, &quot;趴&quot;, &quot;胃&quot;, &quot;贵&quot;, &quot;界&quot;, &quot;虹&quot;, &quot;虾&quot;, &quot;蚁&quot;, &quot;思&quot;, &quot;蚂&quot;, &quot;虽&quot;, &quot;品&quot;, &quot;咽&quot;, &quot;骂&quot;, &quot;哗&quot;, &quot;咱&quot;, &quot;响&quot;, &quot;哈&quot;, &quot;咬&quot;, &quot;咳&quot;, &quot;哪&quot;, &quot;炭&quot;, &quot;峡&quot;, &quot;罚&quot;                , &quot;贱&quot;, &quot;贴&quot;, &quot;骨&quot;, &quot;钞&quot;, &quot;钟&quot;, &quot;钢&quot;, &quot;钥&quot;, &quot;钩&quot;, &quot;卸&quot;, &quot;缸&quot;, &quot;拜&quot;, &quot;看&quot;, &quot;矩&quot;, &quot;怎&quot;, &quot;牲&quot;, &quot;选&quot;, &quot;适&quot;, &quot;秒&quot;, &quot;香&quot;, &quot;种&quot;, &quot;秋&quot;, &quot;科&quot;, &quot;重&quot;, &quot;复&quot;, &quot;竿&quot;                , &quot;段&quot;, &quot;便&quot;, &quot;俩&quot;, &quot;货&quot;, &quot;顺&quot;, &quot;修&quot;, &quot;保&quot;, &quot;促&quot;, &quot;侮&quot;, &quot;俭&quot;, &quot;俗&quot;, &quot;俘&quot;, &quot;信&quot;, &quot;皇&quot;, &quot;泉&quot;, &quot;鬼&quot;, &quot;侵&quot;, &quot;追&quot;, &quot;俊&quot;, &quot;盾&quot;, &quot;待&quot;, &quot;律&quot;, &quot;很&quot;, &quot;须&quot;, &quot;叙&quot;                , &quot;剑&quot;, &quot;逃&quot;, &quot;食&quot;, &quot;盆&quot;, &quot;胆&quot;, &quot;胜&quot;, &quot;胞&quot;, &quot;胖&quot;, &quot;脉&quot;, &quot;勉&quot;, &quot;狭&quot;, &quot;狮&quot;, &quot;独&quot;, &quot;狡&quot;, &quot;狱&quot;, &quot;狠&quot;, &quot;贸&quot;, &quot;怨&quot;, &quot;急&quot;, &quot;饶&quot;, &quot;蚀&quot;, &quot;饺&quot;, &quot;饼&quot;, &quot;弯&quot;, &quot;将&quot;                , &quot;奖&quot;, &quot;哀&quot;, &quot;亭&quot;, &quot;亮&quot;, &quot;度&quot;, &quot;迹&quot;, &quot;庭&quot;, &quot;疮&quot;, &quot;疯&quot;, &quot;疫&quot;, &quot;疤&quot;, &quot;姿&quot;, &quot;亲&quot;, &quot;音&quot;, &quot;帝&quot;, &quot;施&quot;, &quot;闻&quot;, &quot;阀&quot;, &quot;阁&quot;, &quot;差&quot;, &quot;养&quot;, &quot;美&quot;, &quot;姜&quot;, &quot;叛&quot;, &quot;送&quot;                , &quot;类&quot;, &quot;迷&quot;, &quot;前&quot;, &quot;首&quot;, &quot;逆&quot;, &quot;总&quot;, &quot;炼&quot;, &quot;炸&quot;, &quot;炮&quot;, &quot;烂&quot;, &quot;剃&quot;, &quot;洁&quot;, &quot;洪&quot;, &quot;洒&quot;, &quot;浇&quot;, &quot;浊&quot;, &quot;洞&quot;, &quot;测&quot;, &quot;洗&quot;, &quot;活&quot;, &quot;派&quot;, &quot;洽&quot;, &quot;染&quot;, &quot;济&quot;, &quot;洋&quot;                , &quot;洲&quot;, &quot;浑&quot;, &quot;浓&quot;, &quot;津&quot;, &quot;恒&quot;, &quot;恢&quot;, &quot;恰&quot;, &quot;恼&quot;, &quot;恨&quot;, &quot;举&quot;, &quot;觉&quot;, &quot;宣&quot;, &quot;室&quot;, &quot;宫&quot;, &quot;宪&quot;, &quot;突&quot;, &quot;穿&quot;, &quot;窃&quot;, &quot;客&quot;, &quot;冠&quot;, &quot;语&quot;, &quot;扁&quot;, &quot;袄&quot;, &quot;祖&quot;, &quot;神&quot;                , &quot;祝&quot;, &quot;误&quot;, &quot;诱&quot;, &quot;说&quot;, &quot;诵&quot;, &quot;垦&quot;, &quot;退&quot;, &quot;既&quot;, &quot;屋&quot;, &quot;昼&quot;, &quot;费&quot;, &quot;陡&quot;, &quot;眉&quot;, &quot;孩&quot;, &quot;除&quot;, &quot;险&quot;, &quot;院&quot;, &quot;娃&quot;, &quot;姥&quot;, &quot;姨&quot;, &quot;姻&quot;, &quot;娇&quot;, &quot;怒&quot;, &quot;架&quot;, &quot;贺&quot;                , &quot;盈&quot;, &quot;勇&quot;, &quot;怠&quot;, &quot;柔&quot;, &quot;垒&quot;, &quot;绑&quot;, &quot;绒&quot;, &quot;结&quot;, &quot;绕&quot;, &quot;骄&quot;, &quot;绘&quot;, &quot;给&quot;, &quot;络&quot;, &quot;骆&quot;, &quot;绝&quot;, &quot;绞&quot;, &quot;统&quot;, &quot;耕&quot;, &quot;耗&quot;, &quot;艳&quot;, &quot;泰&quot;, &quot;珠&quot;, &quot;班&quot;, &quot;素&quot;, &quot;蚕&quot;                , &quot;顽&quot;, &quot;盏&quot;, &quot;匪&quot;, &quot;捞&quot;, &quot;栽&quot;, &quot;捕&quot;, &quot;振&quot;, &quot;载&quot;, &quot;赶&quot;, &quot;起&quot;, &quot;盐&quot;, &quot;捎&quot;, &quot;捏&quot;, &quot;埋&quot;, &quot;捉&quot;, &quot;捆&quot;, &quot;捐&quot;, &quot;损&quot;, &quot;都&quot;, &quot;哲&quot;, &quot;逝&quot;, &quot;捡&quot;, &quot;换&quot;, &quot;挽&quot;, &quot;热&quot;                , &quot;恐&quot;, &quot;壶&quot;, &quot;挨&quot;, &quot;耻&quot;, &quot;耽&quot;, &quot;恭&quot;, &quot;莲&quot;, &quot;莫&quot;, &quot;荷&quot;, &quot;获&quot;, &quot;晋&quot;, &quot;恶&quot;, &quot;真&quot;, &quot;框&quot;, &quot;桂&quot;, &quot;档&quot;, &quot;桐&quot;, &quot;株&quot;, &quot;桥&quot;, &quot;桃&quot;, &quot;格&quot;, &quot;校&quot;, &quot;核&quot;, &quot;样&quot;, &quot;根&quot;                , &quot;索&quot;, &quot;哥&quot;, &quot;速&quot;, &quot;逗&quot;, &quot;栗&quot;, &quot;配&quot;, &quot;翅&quot;, &quot;辱&quot;, &quot;唇&quot;, &quot;夏&quot;, &quot;础&quot;, &quot;破&quot;, &quot;原&quot;, &quot;套&quot;, &quot;逐&quot;, &quot;烈&quot;, &quot;殊&quot;, &quot;顾&quot;, &quot;轿&quot;, &quot;较&quot;, &quot;顿&quot;, &quot;毙&quot;, &quot;致&quot;, &quot;柴&quot;, &quot;桌&quot;                , &quot;虑&quot;, &quot;监&quot;, &quot;紧&quot;, &quot;党&quot;, &quot;晒&quot;, &quot;眠&quot;, &quot;晓&quot;, &quot;鸭&quot;, &quot;晃&quot;, &quot;晌&quot;, &quot;晕&quot;, &quot;蚊&quot;, &quot;哨&quot;, &quot;哭&quot;, &quot;恩&quot;, &quot;唤&quot;, &quot;啊&quot;, &quot;唉&quot;, &quot;罢&quot;, &quot;峰&quot;, &quot;圆&quot;, &quot;贼&quot;, &quot;贿&quot;, &quot;钱&quot;, &quot;钳&quot;                , &quot;钻&quot;, &quot;铁&quot;, &quot;铃&quot;, &quot;铅&quot;, &quot;缺&quot;, &quot;氧&quot;, &quot;特&quot;, &quot;牺&quot;, &quot;造&quot;, &quot;乘&quot;, &quot;敌&quot;, &quot;秤&quot;, &quot;租&quot;, &quot;秧&quot;, &quot;积&quot;, &quot;秩&quot;, &quot;称&quot;, &quot;秘&quot;, &quot;透&quot;, &quot;笔&quot;, &quot;笑&quot;, &quot;笋&quot;, &quot;债&quot;, &quot;借&quot;, &quot;值&quot;                , &quot;倚&quot;, &quot;倾&quot;, &quot;倒&quot;, &quot;倘&quot;, &quot;俱&quot;, &quot;倡&quot;, &quot;候&quot;, &quot;俯&quot;, &quot;倍&quot;, &quot;倦&quot;, &quot;健&quot;, &quot;臭&quot;, &quot;射&quot;, &quot;躬&quot;, &quot;息&quot;, &quot;徒&quot;, &quot;徐&quot;, &quot;舰&quot;, &quot;舱&quot;, &quot;般&quot;, &quot;航&quot;, &quot;途&quot;, &quot;拿&quot;, &quot;爹&quot;, &quot;爱&quot;                , &quot;颂&quot;, &quot;翁&quot;, &quot;脆&quot;, &quot;脂&quot;, &quot;胸&quot;, &quot;胳&quot;, &quot;脏&quot;, &quot;胶&quot;, &quot;脑&quot;, &quot;狸&quot;, &quot;狼&quot;, &quot;逢&quot;, &quot;留&quot;, &quot;皱&quot;, &quot;饿&quot;, &quot;恋&quot;, &quot;桨&quot;, &quot;浆&quot;, &quot;衰&quot;, &quot;高&quot;, &quot;席&quot;, &quot;准&quot;, &quot;座&quot;, &quot;症&quot;, &quot;病&quot;                , &quot;疾&quot;, &quot;疼&quot;, &quot;疲&quot;, &quot;脊&quot;, &quot;效&quot;, &quot;离&quot;, &quot;唐&quot;, &quot;资&quot;, &quot;凉&quot;, &quot;站&quot;, &quot;剖&quot;, &quot;竞&quot;, &quot;部&quot;, &quot;旁&quot;, &quot;旅&quot;, &quot;畜&quot;, &quot;阅&quot;, &quot;羞&quot;, &quot;瓶&quot;, &quot;拳&quot;, &quot;粉&quot;, &quot;料&quot;, &quot;益&quot;, &quot;兼&quot;, &quot;烤&quot;                , &quot;烘&quot;, &quot;烦&quot;, &quot;烧&quot;, &quot;烛&quot;, &quot;烟&quot;, &quot;递&quot;, &quot;涛&quot;, &quot;浙&quot;, &quot;涝&quot;, &quot;酒&quot;, &quot;涉&quot;, &quot;消&quot;, &quot;浩&quot;, &quot;海&quot;, &quot;涂&quot;, &quot;浴&quot;, &quot;浮&quot;, &quot;流&quot;, &quot;润&quot;, &quot;浪&quot;, &quot;浸&quot;, &quot;涨&quot;, &quot;烫&quot;, &quot;涌&quot;, &quot;悟&quot;                , &quot;悄&quot;, &quot;悔&quot;, &quot;悦&quot;, &quot;害&quot;, &quot;宽&quot;, &quot;家&quot;, &quot;宵&quot;, &quot;宴&quot;, &quot;宾&quot;, &quot;窄&quot;, &quot;容&quot;, &quot;宰&quot;, &quot;案&quot;, &quot;请&quot;, &quot;朗&quot;, &quot;诸&quot;, &quot;读&quot;, &quot;扇&quot;, &quot;袜&quot;, &quot;袖&quot;, &quot;袍&quot;, &quot;被&quot;, &quot;祥&quot;, &quot;课&quot;, &quot;谁&quot;                , &quot;调&quot;, &quot;冤&quot;, &quot;谅&quot;, &quot;谈&quot;, &quot;谊&quot;, &quot;剥&quot;, &quot;恳&quot;, &quot;展&quot;, &quot;剧&quot;, &quot;屑&quot;, &quot;弱&quot;, &quot;陵&quot;, &quot;陶&quot;, &quot;陷&quot;, &quot;陪&quot;, &quot;娱&quot;, &quot;娘&quot;, &quot;通&quot;, &quot;能&quot;, &quot;难&quot;, &quot;预&quot;, &quot;桑&quot;, &quot;绢&quot;, &quot;绣&quot;, &quot;验&quot;                , &quot;继&quot;, &quot;球&quot;, &quot;理&quot;, &quot;捧&quot;, &quot;堵&quot;, &quot;描&quot;, &quot;域&quot;, &quot;掩&quot;, &quot;捷&quot;, &quot;排&quot;, &quot;掉&quot;, &quot;推&quot;, &quot;堆&quot;, &quot;掀&quot;, &quot;授&quot;, &quot;教&quot;, &quot;掏&quot;, &quot;掠&quot;, &quot;培&quot;, &quot;接&quot;, &quot;控&quot;, &quot;探&quot;, &quot;据&quot;, &quot;掘&quot;, &quot;职&quot;                , &quot;基&quot;, &quot;著&quot;, &quot;勒&quot;, &quot;黄&quot;, &quot;萌&quot;, &quot;萝&quot;, &quot;菌&quot;, &quot;菜&quot;, &quot;萄&quot;, &quot;菊&quot;, &quot;萍&quot;, &quot;菠&quot;, &quot;营&quot;, &quot;械&quot;, &quot;梦&quot;, &quot;梢&quot;, &quot;梅&quot;, &quot;检&quot;, &quot;梳&quot;, &quot;梯&quot;, &quot;桶&quot;, &quot;救&quot;, &quot;副&quot;, &quot;票&quot;, &quot;戚&quot;                , &quot;爽&quot;, &quot;聋&quot;, &quot;袭&quot;, &quot;盛&quot;, &quot;雪&quot;, &quot;辅&quot;, &quot;辆&quot;, &quot;虚&quot;, &quot;雀&quot;, &quot;堂&quot;, &quot;常&quot;, &quot;匙&quot;, &quot;晨&quot;, &quot;睁&quot;, &quot;眯&quot;, &quot;眼&quot;, &quot;悬&quot;, &quot;野&quot;, &quot;啦&quot;, &quot;晚&quot;, &quot;啄&quot;, &quot;距&quot;, &quot;跃&quot;, &quot;略&quot;, &quot;蛇&quot;                , &quot;累&quot;, &quot;唱&quot;, &quot;患&quot;, &quot;唯&quot;, &quot;崖&quot;, &quot;崭&quot;, &quot;崇&quot;, &quot;圈&quot;, &quot;铜&quot;, &quot;铲&quot;, &quot;银&quot;, &quot;甜&quot;, &quot;梨&quot;, &quot;犁&quot;, &quot;移&quot;, &quot;笨&quot;, &quot;笼&quot;, &quot;笛&quot;, &quot;符&quot;, &quot;第&quot;, &quot;敏&quot;, &quot;做&quot;, &quot;袋&quot;, &quot;悠&quot;, &quot;偿&quot;                , &quot;偶&quot;, &quot;偷&quot;, &quot;您&quot;, &quot;售&quot;, &quot;停&quot;, &quot;偏&quot;, &quot;假&quot;, &quot;得&quot;, &quot;衔&quot;, &quot;盘&quot;, &quot;船&quot;, &quot;斜&quot;, &quot;盒&quot;, &quot;鸽&quot;, &quot;悉&quot;, &quot;欲&quot;, &quot;彩&quot;, &quot;领&quot;, &quot;脚&quot;, &quot;脖&quot;, &quot;脸&quot;, &quot;脱&quot;, &quot;象&quot;, &quot;够&quot;, &quot;猜&quot;                , &quot;猪&quot;, &quot;猎&quot;, &quot;猫&quot;, &quot;猛&quot;, &quot;馅&quot;, &quot;馆&quot;, &quot;凑&quot;, &quot;减&quot;, &quot;毫&quot;, &quot;麻&quot;, &quot;痒&quot;, &quot;痕&quot;, &quot;廊&quot;, &quot;康&quot;, &quot;庸&quot;, &quot;鹿&quot;, &quot;盗&quot;, &quot;章&quot;, &quot;竟&quot;, &quot;商&quot;, &quot;族&quot;, &quot;旋&quot;, &quot;望&quot;, &quot;率&quot;, &quot;着&quot;                , &quot;盖&quot;, &quot;粘&quot;, &quot;粗&quot;, &quot;粒&quot;, &quot;断&quot;, &quot;剪&quot;, &quot;兽&quot;, &quot;清&quot;, &quot;添&quot;, &quot;淋&quot;, &quot;淹&quot;, &quot;渠&quot;, &quot;渐&quot;, &quot;混&quot;, &quot;渔&quot;, &quot;淘&quot;, &quot;液&quot;, &quot;淡&quot;, &quot;深&quot;, &quot;婆&quot;, &quot;梁&quot;, &quot;渗&quot;, &quot;情&quot;, &quot;惜&quot;, &quot;惭&quot;                , &quot;悼&quot;, &quot;惧&quot;, &quot;惕&quot;, &quot;惊&quot;, &quot;惨&quot;, &quot;惯&quot;, &quot;寇&quot;, &quot;寄&quot;, &quot;宿&quot;, &quot;窑&quot;, &quot;密&quot;, &quot;谋&quot;, &quot;谎&quot;, &quot;祸&quot;, &quot;谜&quot;, &quot;逮&quot;, &quot;敢&quot;, &quot;屠&quot;, &quot;弹&quot;, &quot;随&quot;, &quot;蛋&quot;, &quot;隆&quot;, &quot;隐&quot;, &quot;婚&quot;, &quot;婶&quot;                , &quot;颈&quot;, &quot;绩&quot;, &quot;绪&quot;, &quot;续&quot;, &quot;骑&quot;, &quot;绳&quot;, &quot;维&quot;, &quot;绵&quot;, &quot;绸&quot;, &quot;绿&quot;, &quot;琴&quot;, &quot;斑&quot;, &quot;替&quot;, &quot;款&quot;, &quot;堪&quot;, &quot;塔&quot;, &quot;搭&quot;, &quot;越&quot;, &quot;趁&quot;, &quot;趋&quot;, &quot;超&quot;, &quot;提&quot;, &quot;堤&quot;, &quot;博&quot;, &quot;揭&quot;                , &quot;喜&quot;, &quot;插&quot;, &quot;揪&quot;, &quot;搜&quot;, &quot;煮&quot;, &quot;援&quot;, &quot;裁&quot;, &quot;搁&quot;, &quot;搂&quot;, &quot;搅&quot;, &quot;握&quot;, &quot;揉&quot;, &quot;斯&quot;, &quot;期&quot;, &quot;欺&quot;, &quot;联&quot;, &quot;散&quot;, &quot;惹&quot;, &quot;葬&quot;, &quot;葛&quot;, &quot;董&quot;, &quot;葡&quot;, &quot;敬&quot;, &quot;葱&quot;, &quot;落&quot;                , &quot;朝&quot;, &quot;辜&quot;, &quot;葵&quot;, &quot;棒&quot;, &quot;棋&quot;, &quot;植&quot;, &quot;森&quot;, &quot;椅&quot;, &quot;椒&quot;, &quot;棵&quot;, &quot;棍&quot;, &quot;棉&quot;, &quot;棚&quot;, &quot;棕&quot;, &quot;惠&quot;, &quot;惑&quot;, &quot;逼&quot;, &quot;厨&quot;, &quot;厦&quot;, &quot;硬&quot;, &quot;确&quot;, &quot;雁&quot;, &quot;殖&quot;, &quot;裂&quot;, &quot;雄&quot;                , &quot;暂&quot;, &quot;雅&quot;, &quot;辈&quot;, &quot;悲&quot;, &quot;紫&quot;, &quot;辉&quot;, &quot;敞&quot;, &quot;赏&quot;, &quot;掌&quot;, &quot;晴&quot;, &quot;暑&quot;, &quot;最&quot;, &quot;量&quot;, &quot;喷&quot;, &quot;晶&quot;, &quot;喇&quot;, &quot;遇&quot;, &quot;喊&quot;, &quot;景&quot;, &quot;践&quot;, &quot;跌&quot;, &quot;跑&quot;, &quot;遗&quot;, &quot;蛙&quot;, &quot;蛛&quot;                , &quot;蜓&quot;, &quot;喝&quot;, &quot;喂&quot;, &quot;喘&quot;, &quot;喉&quot;, &quot;幅&quot;, &quot;帽&quot;, &quot;赌&quot;, &quot;赔&quot;, &quot;黑&quot;, &quot;铸&quot;, &quot;铺&quot;, &quot;链&quot;, &quot;销&quot;, &quot;锁&quot;, &quot;锄&quot;, &quot;锅&quot;, &quot;锈&quot;, &quot;锋&quot;, &quot;锐&quot;, &quot;短&quot;, &quot;智&quot;, &quot;毯&quot;, &quot;鹅&quot;, &quot;剩&quot;                , &quot;稍&quot;, &quot;程&quot;, &quot;稀&quot;, &quot;税&quot;, &quot;筐&quot;, &quot;等&quot;, &quot;筑&quot;, &quot;策&quot;, &quot;筛&quot;, &quot;筒&quot;, &quot;答&quot;, &quot;筋&quot;, &quot;筝&quot;, &quot;傲&quot;, &quot;傅&quot;, &quot;牌&quot;, &quot;堡&quot;, &quot;集&quot;, &quot;焦&quot;, &quot;傍&quot;, &quot;储&quot;, &quot;奥&quot;, &quot;街&quot;, &quot;惩&quot;, &quot;御&quot;                , &quot;循&quot;, &quot;艇&quot;, &quot;舒&quot;, &quot;番&quot;, &quot;释&quot;, &quot;禽&quot;, &quot;腊&quot;, &quot;脾&quot;, &quot;腔&quot;, &quot;鲁&quot;, &quot;猾&quot;, &quot;猴&quot;, &quot;然&quot;, &quot;馋&quot;, &quot;装&quot;, &quot;蛮&quot;, &quot;就&quot;, &quot;痛&quot;, &quot;童&quot;, &quot;阔&quot;, &quot;善&quot;, &quot;羡&quot;, &quot;普&quot;, &quot;粪&quot;, &quot;尊&quot;                , &quot;道&quot;, &quot;曾&quot;, &quot;焰&quot;, &quot;港&quot;, &quot;湖&quot;, &quot;渣&quot;, &quot;湿&quot;, &quot;温&quot;, &quot;渴&quot;, &quot;滑&quot;, &quot;湾&quot;, &quot;渡&quot;, &quot;游&quot;, &quot;滋&quot;, &quot;溉&quot;, &quot;愤&quot;, &quot;慌&quot;, &quot;惰&quot;, &quot;愧&quot;, &quot;愉&quot;, &quot;慨&quot;, &quot;割&quot;, &quot;寒&quot;, &quot;富&quot;, &quot;窜&quot;                , &quot;窝&quot;, &quot;窗&quot;, &quot;遍&quot;, &quot;裕&quot;, &quot;裤&quot;, &quot;裙&quot;, &quot;谢&quot;, &quot;谣&quot;, &quot;谦&quot;, &quot;属&quot;, &quot;屡&quot;, &quot;强&quot;, &quot;粥&quot;, &quot;疏&quot;, &quot;隔&quot;, &quot;隙&quot;, &quot;絮&quot;, &quot;嫂&quot;, &quot;登&quot;, &quot;缎&quot;, &quot;缓&quot;, &quot;骗&quot;, &quot;编&quot;, &quot;缘&quot;, &quot;瑞&quot;                , &quot;魂&quot;, &quot;肆&quot;, &quot;摄&quot;, &quot;摸&quot;, &quot;填&quot;, &quot;搏&quot;, &quot;塌&quot;, &quot;鼓&quot;, &quot;摆&quot;, &quot;携&quot;, &quot;搬&quot;, &quot;摇&quot;, &quot;搞&quot;, &quot;塘&quot;, &quot;摊&quot;, &quot;蒜&quot;, &quot;勤&quot;, &quot;鹊&quot;, &quot;蓝&quot;, &quot;墓&quot;, &quot;幕&quot;, &quot;蓬&quot;, &quot;蓄&quot;, &quot;蒙&quot;, &quot;蒸&quot;                , &quot;献&quot;, &quot;禁&quot;, &quot;楚&quot;, &quot;想&quot;, &quot;槐&quot;, &quot;榆&quot;, &quot;楼&quot;, &quot;概&quot;, &quot;赖&quot;, &quot;酬&quot;, &quot;感&quot;, &quot;碍&quot;, &quot;碑&quot;, &quot;碎&quot;, &quot;碰&quot;, &quot;碗&quot;, &quot;碌&quot;, &quot;雷&quot;, &quot;零&quot;, &quot;雾&quot;, &quot;雹&quot;, &quot;输&quot;, &quot;督&quot;, &quot;龄&quot;, &quot;鉴&quot;                , &quot;睛&quot;, &quot;睡&quot;, &quot;睬&quot;, &quot;鄙&quot;, &quot;愚&quot;, &quot;暖&quot;, &quot;盟&quot;, &quot;歇&quot;, &quot;暗&quot;, &quot;照&quot;, &quot;跨&quot;, &quot;跳&quot;, &quot;跪&quot;, &quot;路&quot;, &quot;跟&quot;, &quot;遣&quot;, &quot;蛾&quot;, &quot;蜂&quot;, &quot;嗓&quot;, &quot;置&quot;, &quot;罪&quot;, &quot;罩&quot;, &quot;错&quot;, &quot;锡&quot;, &quot;锣&quot;                , &quot;锤&quot;, &quot;锦&quot;, &quot;键&quot;, &quot;锯&quot;, &quot;矮&quot;, &quot;辞&quot;, &quot;稠&quot;, &quot;愁&quot;, &quot;筹&quot;, &quot;签&quot;, &quot;简&quot;, &quot;毁&quot;, &quot;舅&quot;, &quot;鼠&quot;, &quot;催&quot;, &quot;傻&quot;, &quot;像&quot;, &quot;躲&quot;, &quot;微&quot;, &quot;愈&quot;, &quot;遥&quot;, &quot;腰&quot;, &quot;腥&quot;, &quot;腹&quot;, &quot;腾&quot;                , &quot;腿&quot;, &quot;触&quot;, &quot;解&quot;, &quot;酱&quot;, &quot;痰&quot;, &quot;廉&quot;, &quot;新&quot;, &quot;韵&quot;, &quot;意&quot;, &quot;粮&quot;, &quot;数&quot;, &quot;煎&quot;, &quot;塑&quot;, &quot;慈&quot;, &quot;煤&quot;, &quot;煌&quot;, &quot;满&quot;, &quot;漠&quot;, &quot;源&quot;, &quot;滤&quot;, &quot;滥&quot;, &quot;滔&quot;, &quot;溪&quot;, &quot;溜&quot;, &quot;滚&quot;                , &quot;滨&quot;, &quot;粱&quot;, &quot;滩&quot;, &quot;慎&quot;, &quot;誉&quot;, &quot;塞&quot;, &quot;谨&quot;, &quot;福&quot;, &quot;群&quot;, &quot;殿&quot;, &quot;辟&quot;, &quot;障&quot;, &quot;嫌&quot;, &quot;嫁&quot;, &quot;叠&quot;, &quot;缝&quot;, &quot;缠&quot;, &quot;静&quot;, &quot;碧&quot;, &quot;璃&quot;, &quot;墙&quot;, &quot;嘉&quot;, &quot;摧&quot;, &quot;截&quot;, &quot;誓&quot;                , &quot;境&quot;, &quot;摘&quot;, &quot;摔&quot;, &quot;撇&quot;, &quot;聚&quot;, &quot;慕&quot;, &quot;暮&quot;, &quot;蔑&quot;, &quot;蔽&quot;, &quot;模&quot;, &quot;榴&quot;, &quot;榜&quot;, &quot;榨&quot;, &quot;歌&quot;, &quot;遭&quot;, &quot;酷&quot;, &quot;酿&quot;, &quot;酸&quot;, &quot;磁&quot;, &quot;愿&quot;, &quot;需&quot;, &quot;裳&quot;, &quot;颗&quot;, &quot;嗽&quot;, &quot;蜻&quot;                , &quot;蜡&quot;, &quot;蝇&quot;, &quot;蜘&quot;, &quot;赚&quot;, &quot;锹&quot;, &quot;锻&quot;, &quot;舞&quot;, &quot;稳&quot;, &quot;算&quot;, &quot;箩&quot;, &quot;管&quot;, &quot;僚&quot;, &quot;鼻&quot;, &quot;魄&quot;, &quot;貌&quot;, &quot;膜&quot;, &quot;膊&quot;, &quot;膀&quot;, &quot;鲜&quot;, &quot;疑&quot;, &quot;馒&quot;, &quot;裹&quot;, &quot;敲&quot;, &quot;豪&quot;, &quot;膏&quot;                , &quot;遮&quot;, &quot;腐&quot;, &quot;瘦&quot;, &quot;辣&quot;, &quot;竭&quot;, &quot;端&quot;, &quot;旗&quot;, &quot;精&quot;, &quot;歉&quot;, &quot;弊&quot;, &quot;熄&quot;, &quot;熔&quot;, &quot;漆&quot;, &quot;漂&quot;, &quot;漫&quot;, &quot;滴&quot;, &quot;演&quot;, &quot;漏&quot;, &quot;慢&quot;, &quot;寨&quot;, &quot;赛&quot;, &quot;察&quot;, &quot;蜜&quot;, &quot;谱&quot;, &quot;嫩&quot;                , &quot;翠&quot;, &quot;熊&quot;, &quot;凳&quot;, &quot;骡&quot;, &quot;缩&quot;, &quot;慧&quot;, &quot;撕&quot;, &quot;撒&quot;, &quot;趣&quot;, &quot;趟&quot;, &quot;撑&quot;, &quot;播&quot;, &quot;撞&quot;, &quot;撤&quot;, &quot;增&quot;, &quot;聪&quot;, &quot;鞋&quot;, &quot;蕉&quot;, &quot;蔬&quot;, &quot;横&quot;, &quot;槽&quot;, &quot;樱&quot;, &quot;橡&quot;, &quot;飘&quot;, &quot;醋&quot;                , &quot;醉&quot;, &quot;震&quot;, &quot;霉&quot;, &quot;瞒&quot;, &quot;题&quot;, &quot;暴&quot;, &quot;瞎&quot;, &quot;影&quot;, &quot;踢&quot;, &quot;踏&quot;, &quot;踩&quot;, &quot;踪&quot;, &quot;蝶&quot;, &quot;蝴&quot;, &quot;嘱&quot;, &quot;墨&quot;, &quot;镇&quot;, &quot;靠&quot;, &quot;稻&quot;, &quot;黎&quot;, &quot;稿&quot;, &quot;稼&quot;, &quot;箱&quot;, &quot;箭&quot;, &quot;篇&quot;                , &quot;僵&quot;, &quot;躺&quot;, &quot;僻&quot;, &quot;德&quot;, &quot;艘&quot;, &quot;膝&quot;, &quot;膛&quot;, &quot;熟&quot;, &quot;摩&quot;, &quot;颜&quot;, &quot;毅&quot;, &quot;糊&quot;, &quot;遵&quot;, &quot;潜&quot;, &quot;潮&quot;, &quot;懂&quot;, &quot;额&quot;, &quot;慰&quot;, &quot;劈&quot;, &quot;操&quot;, &quot;燕&quot;, &quot;薯&quot;, &quot;薪&quot;, &quot;薄&quot;, &quot;颠&quot;                , &quot;橘&quot;, &quot;整&quot;, &quot;融&quot;, &quot;醒&quot;, &quot;餐&quot;, &quot;嘴&quot;, &quot;蹄&quot;, &quot;器&quot;, &quot;赠&quot;, &quot;默&quot;, &quot;镜&quot;, &quot;赞&quot;, &quot;篮&quot;, &quot;邀&quot;, &quot;衡&quot;, &quot;膨&quot;, &quot;雕&quot;, &quot;磨&quot;, &quot;凝&quot;, &quot;辨&quot;, &quot;辩&quot;, &quot;糖&quot;, &quot;糕&quot;, &quot;燃&quot;, &quot;澡&quot;                , &quot;激&quot;, &quot;懒&quot;, &quot;壁&quot;, &quot;避&quot;, &quot;缴&quot;, &quot;戴&quot;, &quot;擦&quot;, &quot;鞠&quot;, &quot;藏&quot;, &quot;霜&quot;, &quot;霞&quot;, &quot;瞧&quot;, &quot;蹈&quot;, &quot;螺&quot;, &quot;穗&quot;, &quot;繁&quot;, &quot;辫&quot;, &quot;赢&quot;, &quot;糟&quot;, &quot;糠&quot;, &quot;燥&quot;, &quot;臂&quot;, &quot;翼&quot;, &quot;骤&quot;, &quot;鞭&quot;                , &quot;覆&quot;, &quot;蹦&quot;, &quot;镰&quot;, &quot;翻&quot;, &quot;鹰&quot;, &quot;警&quot;, &quot;攀&quot;, &quot;蹲&quot;, &quot;颤&quot;, &quot;瓣&quot;, &quot;爆&quot;, &quot;疆&quot;, &quot;壤&quot;, &quot;耀&quot;, &quot;躁&quot;, &quot;嚼&quot;, &quot;嚷&quot;, &quot;籍&quot;, &quot;魔&quot;, &quot;灌&quot;, &quot;蠢&quot;, &quot;霸&quot;, &quot;露&quot;, &quot;囊&quot;, &quot;罐&quot;                , &quot;匕&quot;, &quot;刁&quot;, &quot;丐&quot;, &quot;歹&quot;, &quot;戈&quot;, &quot;夭&quot;, &quot;仑&quot;, &quot;讥&quot;, &quot;冗&quot;, &quot;邓&quot;, &quot;艾&quot;, &quot;夯&quot;, &quot;凸&quot;, &quot;卢&quot;, &quot;叭&quot;, &quot;叽&quot;, &quot;皿&quot;, &quot;凹&quot;, &quot;囚&quot;, &quot;矢&quot;, &quot;乍&quot;, &quot;尔&quot;, &quot;冯&quot;, &quot;玄&quot;, &quot;邦&quot;                , &quot;迂&quot;, &quot;邢&quot;, &quot;芋&quot;, &quot;芍&quot;, &quot;吏&quot;, &quot;夷&quot;, &quot;吁&quot;, &quot;吕&quot;, &quot;吆&quot;, &quot;屹&quot;, &quot;廷&quot;, &quot;迄&quot;, &quot;臼&quot;, &quot;仲&quot;, &quot;伦&quot;, &quot;伊&quot;, &quot;肋&quot;, &quot;旭&quot;, &quot;匈&quot;, &quot;凫&quot;, &quot;妆&quot;, &quot;亥&quot;, &quot;汛&quot;, &quot;讳&quot;, &quot;讶&quot;                , &quot;讹&quot;, &quot;讼&quot;, &quot;诀&quot;, &quot;弛&quot;, &quot;阱&quot;, &quot;驮&quot;, &quot;驯&quot;, &quot;纫&quot;, &quot;玖&quot;, &quot;玛&quot;, &quot;韧&quot;, &quot;抠&quot;, &quot;扼&quot;, &quot;汞&quot;, &quot;扳&quot;, &quot;抡&quot;, &quot;坎&quot;, &quot;坞&quot;, &quot;抑&quot;, &quot;拟&quot;, &quot;抒&quot;, &quot;芙&quot;, &quot;芜&quot;, &quot;苇&quot;, &quot;芥&quot;                , &quot;芯&quot;, &quot;芭&quot;, &quot;杖&quot;, &quot;杉&quot;, &quot;巫&quot;, &quot;杈&quot;, &quot;甫&quot;, &quot;匣&quot;, &quot;轩&quot;, &quot;卤&quot;, &quot;肖&quot;, &quot;吱&quot;, &quot;吠&quot;, &quot;呕&quot;, &quot;呐&quot;, &quot;吟&quot;, &quot;呛&quot;, &quot;吻&quot;, &quot;吭&quot;, &quot;邑&quot;, &quot;囤&quot;, &quot;吮&quot;, &quot;岖&quot;, &quot;牡&quot;, &quot;佑&quot;                , &quot;佃&quot;, &quot;伺&quot;, &quot;囱&quot;, &quot;肛&quot;, &quot;肘&quot;, &quot;甸&quot;, &quot;狈&quot;, &quot;鸠&quot;, &quot;彤&quot;, &quot;灸&quot;, &quot;刨&quot;, &quot;庇&quot;, &quot;吝&quot;, &quot;庐&quot;, &quot;闰&quot;, &quot;兑&quot;, &quot;灼&quot;, &quot;沐&quot;, &quot;沛&quot;, &quot;汰&quot;, &quot;沥&quot;, &quot;沦&quot;, &quot;汹&quot;, &quot;沧&quot;, &quot;沪&quot;                , &quot;忱&quot;, &quot;诅&quot;, &quot;诈&quot;, &quot;罕&quot;, &quot;屁&quot;, &quot;坠&quot;, &quot;妓&quot;, &quot;姊&quot;, &quot;妒&quot;, &quot;纬&quot;, &quot;玫&quot;, &quot;卦&quot;, &quot;坷&quot;, &quot;坯&quot;, &quot;拓&quot;, &quot;坪&quot;, &quot;坤&quot;, &quot;拄&quot;, &quot;拧&quot;, &quot;拂&quot;, &quot;拙&quot;, &quot;拇&quot;, &quot;拗&quot;, &quot;茉&quot;, &quot;昔&quot;                , &quot;苛&quot;, &quot;苫&quot;, &quot;苟&quot;, &quot;苞&quot;, &quot;茁&quot;, &quot;苔&quot;, &quot;枉&quot;, &quot;枢&quot;, &quot;枚&quot;, &quot;枫&quot;, &quot;杭&quot;, &quot;郁&quot;, &quot;矾&quot;, &quot;奈&quot;, &quot;奄&quot;, &quot;殴&quot;, &quot;歧&quot;, &quot;卓&quot;, &quot;昙&quot;, &quot;哎&quot;, &quot;咕&quot;, &quot;呵&quot;, &quot;咙&quot;, &quot;呻&quot;, &quot;咒&quot;                , &quot;咆&quot;, &quot;咖&quot;, &quot;帕&quot;, &quot;账&quot;, &quot;贬&quot;, &quot;贮&quot;, &quot;氛&quot;, &quot;秉&quot;, &quot;岳&quot;, &quot;侠&quot;, &quot;侥&quot;, &quot;侣&quot;, &quot;侈&quot;, &quot;卑&quot;, &quot;刽&quot;, &quot;刹&quot;, &quot;肴&quot;, &quot;觅&quot;, &quot;忿&quot;, &quot;瓮&quot;, &quot;肮&quot;, &quot;肪&quot;, &quot;狞&quot;, &quot;庞&quot;, &quot;疟&quot;                , &quot;疙&quot;, &quot;疚&quot;, &quot;卒&quot;, &quot;氓&quot;, &quot;炬&quot;, &quot;沽&quot;, &quot;沮&quot;, &quot;泣&quot;, &quot;泞&quot;, &quot;泌&quot;, &quot;沼&quot;, &quot;怔&quot;, &quot;怯&quot;, &quot;宠&quot;, &quot;宛&quot;, &quot;衩&quot;, &quot;祈&quot;, &quot;诡&quot;, &quot;帚&quot;, &quot;屉&quot;, &quot;弧&quot;, &quot;弥&quot;, &quot;陋&quot;, &quot;陌&quot;, &quot;函&quot;                , &quot;姆&quot;, &quot;虱&quot;, &quot;三&quot;, &quot;绅&quot;, &quot;驹&quot;, &quot;绊&quot;, &quot;绎&quot;, &quot;契&quot;, &quot;贰&quot;, &quot;玷&quot;, &quot;玲&quot;, &quot;珊&quot;, &quot;拭&quot;, &quot;拷&quot;, &quot;拱&quot;, &quot;挟&quot;, &quot;垢&quot;, &quot;垛&quot;, &quot;拯&quot;, &quot;荆&quot;, &quot;茸&quot;, &quot;茬&quot;, &quot;荚&quot;, &quot;茵&quot;, &quot;茴&quot;                , &quot;荞&quot;, &quot;荠&quot;, &quot;荤&quot;, &quot;荧&quot;, &quot;荔&quot;, &quot;栈&quot;, &quot;柑&quot;, &quot;栅&quot;, &quot;柠&quot;, &quot;枷&quot;, &quot;勃&quot;, &quot;柬&quot;, &quot;砂&quot;, &quot;泵&quot;, &quot;砚&quot;, &quot;鸥&quot;, &quot;轴&quot;, &quot;韭&quot;, &quot;虐&quot;, &quot;昧&quot;, &quot;盹&quot;, &quot;咧&quot;, &quot;昵&quot;, &quot;昭&quot;, &quot;盅&quot;                , &quot;勋&quot;, &quot;哆&quot;, &quot;咪&quot;, &quot;哟&quot;, &quot;幽&quot;, &quot;钙&quot;, &quot;钝&quot;, &quot;钠&quot;, &quot;钦&quot;, &quot;钧&quot;, &quot;钮&quot;, &quot;毡&quot;, &quot;氢&quot;, &quot;秕&quot;, &quot;俏&quot;, &quot;俄&quot;, &quot;俐&quot;, &quot;侯&quot;, &quot;徊&quot;, &quot;衍&quot;, &quot;胚&quot;, &quot;胧&quot;, &quot;胎&quot;, &quot;狰&quot;, &quot;饵&quot;                , &quot;峦&quot;, &quot;奕&quot;, &quot;咨&quot;, &quot;飒&quot;, &quot;闺&quot;, &quot;闽&quot;, &quot;籽&quot;, &quot;娄&quot;, &quot;烁&quot;, &quot;炫&quot;, &quot;洼&quot;, &quot;柒&quot;, &quot;涎&quot;, &quot;洛&quot;, &quot;恃&quot;, &quot;恍&quot;, &quot;恬&quot;, &quot;恤&quot;, &quot;宦&quot;, &quot;诫&quot;, &quot;诬&quot;, &quot;祠&quot;, &quot;诲&quot;, &quot;屏&quot;, &quot;屎&quot;                , &quot;逊&quot;, &quot;陨&quot;, &quot;姚&quot;, &quot;娜&quot;, &quot;蚤&quot;, &quot;骇&quot;, &quot;耕&quot;, &quot;耙&quot;, &quot;秦&quot;, &quot;匿&quot;, &quot;埂&quot;, &quot;捂&quot;, &quot;捍&quot;, &quot;袁&quot;, &quot;捌&quot;, &quot;挫&quot;, &quot;挚&quot;, &quot;捣&quot;, &quot;捅&quot;, &quot;埃&quot;, &quot;耿&quot;, &quot;聂&quot;, &quot;荸&quot;, &quot;莽&quot;, &quot;莱&quot;                , &quot;莉&quot;, &quot;莹&quot;, &quot;莺&quot;, &quot;梆&quot;, &quot;栖&quot;, &quot;桦&quot;, &quot;栓&quot;, &quot;桅&quot;, &quot;桩&quot;, &quot;贾&quot;, &quot;酌&quot;, &quot;砸&quot;, &quot;砰&quot;, &quot;砾&quot;, &quot;殉&quot;, &quot;逞&quot;, &quot;哮&quot;, &quot;唠&quot;, &quot;哺&quot;, &quot;剔&quot;, &quot;蚌&quot;, &quot;蚜&quot;, &quot;畔&quot;, &quot;蚣&quot;, &quot;蚪&quot;                , &quot;蚓&quot;, &quot;哩&quot;, &quot;圃&quot;, &quot;鸯&quot;, &quot;唁&quot;, &quot;哼&quot;, &quot;唧&quot;, &quot;唆&quot;, &quot;峭&quot;, &quot;峻&quot;, &quot;赂&quot;, &quot;赃&quot;, &quot;钾&quot;, &quot;铆&quot;, &quot;氨&quot;, &quot;秫&quot;, &quot;笆&quot;, &quot;俺&quot;, &quot;赁&quot;, &quot;倔&quot;, &quot;殷&quot;, &quot;耸&quot;, &quot;舀&quot;, &quot;豺&quot;, &quot;豹&quot;                , &quot;颁&quot;, &quot;胯&quot;, &quot;胰&quot;, &quot;脐&quot;, &quot;脓&quot;, &quot;逛&quot;, &quot;卿&quot;, &quot;鸵&quot;, &quot;鸳&quot;, &quot;馁&quot;, &quot;凌&quot;, &quot;凄&quot;, &quot;衷&quot;, &quot;郭&quot;, &quot;斋&quot;, &quot;疹&quot;, &quot;紊&quot;, &quot;瓷&quot;, &quot;羔&quot;, &quot;烙&quot;, &quot;浦&quot;, &quot;涡&quot;, &quot;涣&quot;, &quot;涤&quot;, &quot;涧&quot;                , &quot;涕&quot;, &quot;涩&quot;, &quot;悍&quot;, &quot;悯&quot;, &quot;窍&quot;, &quot;诺&quot;, &quot;诽&quot;, &quot;袒&quot;, &quot;谆&quot;, &quot;祟&quot;, &quot;恕&quot;, &quot;娩&quot;, &quot;骏&quot;, &quot;琐&quot;, &quot;麸&quot;, &quot;琉&quot;, &quot;琅&quot;, &quot;措&quot;, &quot;捺&quot;, &quot;捶&quot;, &quot;赦&quot;, &quot;埠&quot;, &quot;捻&quot;, &quot;掐&quot;, &quot;掂&quot;                , &quot;掖&quot;, &quot;掷&quot;, &quot;掸&quot;, &quot;掺&quot;, &quot;勘&quot;, &quot;聊&quot;, &quot;娶&quot;, &quot;菱&quot;, &quot;菲&quot;, &quot;萎&quot;, &quot;菩&quot;, &quot;萤&quot;, &quot;干&quot;, &quot;萧&quot;, &quot;萨&quot;, &quot;菇&quot;, &quot;彬&quot;, &quot;梗&quot;, &quot;梧&quot;, &quot;梭&quot;, &quot;曹&quot;, &quot;酝&quot;, &quot;酗&quot;, &quot;厢&quot;, &quot;硅&quot;                , &quot;硕&quot;, &quot;奢&quot;, &quot;盔&quot;, &quot;匾&quot;, &quot;颅&quot;, &quot;彪&quot;, &quot;眶&quot;, &quot;晤&quot;, &quot;曼&quot;, &quot;晦&quot;, &quot;冕&quot;, &quot;啡&quot;, &quot;畦&quot;, &quot;趾&quot;, &quot;啃&quot;, &quot;蛆&quot;, &quot;蚯&quot;, &quot;蛉&quot;, &quot;蛀&quot;, &quot;唬&quot;, &quot;啰&quot;, &quot;唾&quot;, &quot;啤&quot;, &quot;啥&quot;, &quot;啸&quot;                , &quot;崎&quot;, &quot;逻&quot;, &quot;崔&quot;, &quot;崩&quot;, &quot;婴&quot;, &quot;赊&quot;, &quot;铐&quot;, &quot;铛&quot;, &quot;铝&quot;, &quot;铡&quot;, &quot;铣&quot;, &quot;铭&quot;, &quot;矫&quot;, &quot;秸&quot;, &quot;秽&quot;, &quot;笙&quot;, &quot;笤&quot;, &quot;偎&quot;, &quot;傀&quot;, &quot;躯&quot;, &quot;兜&quot;, &quot;衅&quot;, &quot;徘&quot;, &quot;徒&quot;, &quot;舶&quot;                , &quot;舷&quot;, &quot;舵&quot;, &quot;敛&quot;, &quot;翎&quot;, &quot;脯&quot;, &quot;逸&quot;, &quot;凰&quot;, &quot;猖&quot;, &quot;祭&quot;, &quot;烹&quot;, &quot;庶&quot;, &quot;庵&quot;, &quot;痊&quot;, &quot;阎&quot;, &quot;阐&quot;, &quot;眷&quot;, &quot;焊&quot;, &quot;焕&quot;, &quot;鸿&quot;, &quot;涯&quot;, &quot;淑&quot;, &quot;淌&quot;, &quot;淮&quot;, &quot;淆&quot;, &quot;渊&quot;                , &quot;淫&quot;, &quot;淳&quot;, &quot;淤&quot;, &quot;淀&quot;, &quot;涮&quot;, &quot;涵&quot;, &quot;惦&quot;, &quot;悴&quot;, &quot;惋&quot;, &quot;寂&quot;, &quot;窒&quot;, &quot;谍&quot;, &quot;谐&quot;, &quot;裆&quot;, &quot;袱&quot;, &quot;祷&quot;, &quot;谒&quot;, &quot;谓&quot;, &quot;谚&quot;, &quot;尉&quot;, &quot;堕&quot;, &quot;隅&quot;, &quot;婉&quot;, &quot;颇&quot;, &quot;绰&quot;                , &quot;绷&quot;, &quot;综&quot;, &quot;绽&quot;, &quot;缀&quot;, &quot;巢&quot;, &quot;琳&quot;, &quot;琢&quot;, &quot;琼&quot;, &quot;揍&quot;, &quot;堰&quot;, &quot;揩&quot;, &quot;揽&quot;, &quot;揖&quot;, &quot;彭&quot;, &quot;揣&quot;, &quot;搀&quot;, &quot;搓&quot;, &quot;壹&quot;, &quot;搔&quot;, &quot;葫&quot;, &quot;募&quot;, &quot;蒋&quot;, &quot;蒂&quot;, &quot;韩&quot;, &quot;棱&quot;                , &quot;椰&quot;, &quot;焚&quot;, &quot;椎&quot;, &quot;棺&quot;, &quot;榔&quot;, &quot;椭&quot;, &quot;粟&quot;, &quot;棘&quot;, &quot;酣&quot;, &quot;酥&quot;, &quot;硝&quot;, &quot;硫&quot;, &quot;颊&quot;, &quot;雳&quot;, &quot;翘&quot;, &quot;凿&quot;, &quot;棠&quot;, &quot;晰&quot;, &quot;鼎&quot;, &quot;喳&quot;, &quot;遏&quot;, &quot;晾&quot;, &quot;畴&quot;, &quot;跋&quot;, &quot;跛&quot;                , &quot;蛔&quot;, &quot;蜒&quot;, &quot;蛤&quot;, &quot;鹃&quot;, &quot;喻&quot;, &quot;啼&quot;, &quot;喧&quot;, &quot;嵌&quot;, &quot;赋&quot;, &quot;赎&quot;, &quot;赐&quot;, &quot;锉&quot;, &quot;锌&quot;, &quot;甥&quot;, &quot;掰&quot;, &quot;氮&quot;, &quot;氯&quot;, &quot;黍&quot;, &quot;筏&quot;, &quot;牍&quot;, &quot;粤&quot;, &quot;逾&quot;, &quot;腌&quot;, &quot;腋&quot;, &quot;腕&quot;                , &quot;猩&quot;, &quot;猬&quot;, &quot;惫&quot;, &quot;敦&quot;, &quot;痘&quot;, &quot;痢&quot;, &quot;痪&quot;, &quot;竣&quot;, &quot;翔&quot;, &quot;奠&quot;, &quot;遂&quot;, &quot;焙&quot;, &quot;滞&quot;, &quot;湘&quot;, &quot;渤&quot;, &quot;渺&quot;, &quot;溃&quot;, &quot;溅&quot;, &quot;湃&quot;, &quot;愕&quot;, &quot;惶&quot;, &quot;寓&quot;, &quot;窖&quot;, &quot;窘&quot;, &quot;雇&quot;                , &quot;谤&quot;, &quot;犀&quot;, &quot;隘&quot;, &quot;媒&quot;, &quot;媚&quot;, &quot;婿&quot;, &quot;缅&quot;, &quot;缆&quot;, &quot;缔&quot;, &quot;缕&quot;, &quot;骚&quot;, &quot;瑟&quot;, &quot;鹉&quot;, &quot;瑰&quot;, &quot;搪&quot;, &quot;聘&quot;, &quot;斟&quot;, &quot;靴&quot;, &quot;靶&quot;, &quot;蓖&quot;, &quot;蒿&quot;, &quot;蒲&quot;, &quot;蓉&quot;, &quot;楔&quot;, &quot;椿&quot;                , &quot;楷&quot;, &quot;榄&quot;, &quot;楞&quot;, &quot;楣&quot;, &quot;酪&quot;, &quot;碘&quot;, &quot;硼&quot;, &quot;碉&quot;, &quot;辐&quot;, &quot;辑&quot;, &quot;频&quot;, &quot;睹&quot;, &quot;睦&quot;, &quot;瞄&quot;, &quot;嗜&quot;, &quot;嗦&quot;, &quot;暇&quot;, &quot;畸&quot;, &quot;跷&quot;, &quot;跺&quot;, &quot;蜈&quot;, &quot;蜗&quot;, &quot;蜕&quot;, &quot;蛹&quot;, &quot;嗅&quot;                , &quot;嗡&quot;, &quot;嗤&quot;, &quot;署&quot;, &quot;蜀&quot;, &quot;幌&quot;, &quot;锚&quot;, &quot;锥&quot;, &quot;锨&quot;, &quot;锭&quot;, &quot;锰&quot;, &quot;稚&quot;, &quot;颓&quot;, &quot;筷&quot;, &quot;魁&quot;, &quot;衙&quot;, &quot;腻&quot;, &quot;腮&quot;, &quot;腺&quot;, &quot;鹏&quot;, &quot;肄&quot;, &quot;猿&quot;, &quot;颖&quot;, &quot;煞&quot;, &quot;雏&quot;, &quot;馍&quot;                , &quot;馏&quot;, &quot;禀&quot;, &quot;痹&quot;, &quot;廓&quot;, &quot;痴&quot;, &quot;靖&quot;, &quot;誊&quot;, &quot;漓&quot;, &quot;溢&quot;, &quot;溯&quot;, &quot;溶&quot;, &quot;滓&quot;, &quot;溺&quot;, &quot;寞&quot;, &quot;窥&quot;, &quot;窟&quot;, &quot;寝&quot;, &quot;褂&quot;, &quot;裸&quot;, &quot;谬&quot;, &quot;媳&quot;, &quot;嫉&quot;, &quot;缚&quot;, &quot;缤&quot;, &quot;剿&quot;                , &quot;赘&quot;, &quot;熬&quot;, &quot;赫&quot;, &quot;蔫&quot;, &quot;摹&quot;, &quot;蔓&quot;, &quot;蔗&quot;, &quot;蔼&quot;, &quot;熙&quot;, &quot;蔚&quot;, &quot;兢&quot;, &quot;榛&quot;, &quot;榕&quot;, &quot;酵&quot;, &quot;碟&quot;, &quot;碴&quot;, &quot;碱&quot;, &quot;碳&quot;, &quot;辕&quot;, &quot;辖&quot;, &quot;雌&quot;, &quot;墅&quot;, &quot;嘁&quot;, &quot;踊&quot;, &quot;蝉&quot;                , &quot;嘀&quot;, &quot;幔&quot;, &quot;镀&quot;, &quot;舔&quot;, &quot;熏&quot;, &quot;箍&quot;, &quot;箕&quot;, &quot;箫&quot;, &quot;舆&quot;, &quot;僧&quot;, &quot;孵&quot;, &quot;瘩&quot;, &quot;瘟&quot;, &quot;彰&quot;, &quot;粹&quot;, &quot;漱&quot;, &quot;漩&quot;, &quot;漾&quot;, &quot;慷&quot;, &quot;寡&quot;, &quot;寥&quot;, &quot;谭&quot;, &quot;褐&quot;, &quot;裉&quot;, &quot;隧&quot;                , &quot;嫡&quot;, &quot;缨&quot;, &quot;撵&quot;, &quot;撩&quot;, &quot;撮&quot;, &quot;撬&quot;, &quot;擒&quot;, &quot;墩&quot;, &quot;撰&quot;, &quot;鞍&quot;, &quot;蕊&quot;, &quot;蕴&quot;, &quot;樊&quot;, &quot;樟&quot;, &quot;橄&quot;, &quot;敷&quot;, &quot;豌&quot;, &quot;醇&quot;, &quot;磕&quot;, &quot;磅&quot;, &quot;碾&quot;, &quot;嘶&quot;, &quot;嘲&quot;, &quot;嘹&quot;, &quot;蝠&quot;                , &quot;蝎&quot;, &quot;蝌&quot;, &quot;蝗&quot;, &quot;蝙&quot;, &quot;嘿&quot;, &quot;幢&quot;, &quot;镊&quot;, &quot;镐&quot;, &quot;稽&quot;, &quot;篓&quot;, &quot;膘&quot;, &quot;鲤&quot;, &quot;鲫&quot;, &quot;褒&quot;, &quot;瘪&quot;, &quot;瘤&quot;, &quot;瘫&quot;, &quot;凛&quot;, &quot;憋&quot;, &quot;澎&quot;, &quot;潭&quot;, &quot;潦&quot;, &quot;澳&quot;, &quot;潘&quot;, &quot;澈&quot;                , &quot;澜&quot;, &quot;澄&quot;, &quot;憔&quot;, &quot;懊&quot;, &quot;憎&quot;, &quot;翩&quot;, &quot;褥&quot;, &quot;谴&quot;, &quot;鹤&quot;, &quot;憨&quot;, &quot;履&quot;, &quot;嬉&quot;, &quot;豫&quot;, &quot;缭&quot;, &quot;撼&quot;, &quot;擂&quot;, &quot;擅&quot;, &quot;蕾&quot;, &quot;薛&quot;, &quot;薇&quot;, &quot;擎&quot;, &quot;翰&quot;, &quot;噩&quot;, &quot;橱&quot;, &quot;橙&quot;                , &quot;瓢&quot;, &quot;磺&quot;, &quot;霍&quot;, &quot;霎&quot;, &quot;辙&quot;, &quot;冀&quot;, &quot;踱&quot;, &quot;蹂&quot;, &quot;蟆&quot;, &quot;螃&quot;, &quot;螟&quot;, &quot;噪&quot;, &quot;鹦&quot;, &quot;黔&quot;, &quot;穆&quot;, &quot;篡&quot;, &quot;篷&quot;, &quot;篙&quot;, &quot;篱&quot;, &quot;儒&quot;, &quot;膳&quot;, &quot;鲸&quot;, &quot;瘾&quot;, &quot;瘸&quot;, &quot;糙&quot;                , &quot;燎&quot;, &quot;濒&quot;, &quot;憾&quot;, &quot;懈&quot;, &quot;窿&quot;, &quot;缰&quot;, &quot;壕&quot;, &quot;藐&quot;, &quot;檬&quot;, &quot;檐&quot;, &quot;檩&quot;, &quot;檀&quot;, &quot;礁&quot;, &quot;磷&quot;, &quot;瞭&quot;, &quot;瞬&quot;, &quot;瞳&quot;, &quot;瞪&quot;, &quot;曙&quot;, &quot;蹋&quot;, &quot;蟋&quot;, &quot;蟀&quot;, &quot;嚎&quot;, &quot;赡&quot;, &quot;镣&quot;                , &quot;魏&quot;, &quot;簇&quot;, &quot;儡&quot;, &quot;徽&quot;, &quot;爵&quot;, &quot;朦&quot;, &quot;臊&quot;, &quot;鳄&quot;, &quot;糜&quot;, &quot;癌&quot;, &quot;懦&quot;, &quot;豁&quot;, &quot;臀&quot;, &quot;藕&quot;, &quot;藤&quot;, &quot;瞻&quot;, &quot;嚣&quot;, &quot;鳍&quot;, &quot;癞&quot;, &quot;瀑&quot;, &quot;襟&quot;, &quot;璧&quot;, &quot;戳&quot;, &quot;攒&quot;, &quot;孽&quot;                , &quot;蘑&quot;, &quot;藻&quot;, &quot;蹭&quot;, &quot;蹬&quot;, &quot;簸&quot;, &quot;簿&quot;, &quot;蟹&quot;, &quot;靡&quot;, &quot;癣&quot;, &quot;羹&quot;, &quot;鳖&quot;, &quot;鬓&quot;, &quot;攘&quot;, &quot;蠕&quot;, &quot;巍&quot;, &quot;鳞&quot;, &quot;糯&quot;, &quot;譬&quot;, &quot;霹&quot;, &quot;躏&quot;, &quot;髓&quot;, &quot;蘸&quot;, &quot;镶&quot;, &quot;瓤&quot;, &quot;矗&quot;                , &quot;匕&quot;, &quot;刁&quot;, &quot;丐&quot;, &quot;歹&quot;, &quot;戈&quot;, &quot;夭&quot;, &quot;仑&quot;, &quot;讥&quot;, &quot;冗&quot;, &quot;邓&quot;, &quot;艾&quot;, &quot;夯&quot;, &quot;凸&quot;, &quot;卢&quot;, &quot;叭&quot;, &quot;叽&quot;, &quot;皿&quot;, &quot;凹&quot;, &quot;囚&quot;, &quot;矢&quot;, &quot;乍&quot;, &quot;尔&quot;, &quot;冯&quot;, &quot;玄&quot;, &quot;邦&quot;                , &quot;迂&quot;, &quot;邢&quot;, &quot;芋&quot;, &quot;芍&quot;, &quot;吏&quot;, &quot;夷&quot;, &quot;吁&quot;, &quot;吕&quot;, &quot;吆&quot;, &quot;屹&quot;, &quot;廷&quot;, &quot;迄&quot;, &quot;臼&quot;, &quot;仲&quot;, &quot;伦&quot;, &quot;伊&quot;, &quot;肋&quot;, &quot;旭&quot;, &quot;匈&quot;, &quot;凫&quot;, &quot;妆&quot;, &quot;亥&quot;, &quot;汛&quot;, &quot;讳&quot;, &quot;讶&quot;                , &quot;讹&quot;, &quot;讼&quot;, &quot;诀&quot;, &quot;弛&quot;, &quot;阱&quot;, &quot;驮&quot;, &quot;驯&quot;, &quot;纫&quot;, &quot;玖&quot;, &quot;玛&quot;, &quot;韧&quot;, &quot;抠&quot;, &quot;扼&quot;, &quot;汞&quot;, &quot;扳&quot;, &quot;抡&quot;, &quot;坎&quot;, &quot;坞&quot;, &quot;抑&quot;, &quot;拟&quot;, &quot;抒&quot;, &quot;芙&quot;, &quot;芜&quot;, &quot;苇&quot;, &quot;芥&quot;                , &quot;芯&quot;, &quot;芭&quot;, &quot;杖&quot;, &quot;杉&quot;, &quot;巫&quot;, &quot;杈&quot;, &quot;甫&quot;, &quot;匣&quot;, &quot;轩&quot;, &quot;卤&quot;, &quot;肖&quot;, &quot;吱&quot;, &quot;吠&quot;, &quot;呕&quot;, &quot;呐&quot;, &quot;吟&quot;, &quot;呛&quot;, &quot;吻&quot;, &quot;吭&quot;, &quot;邑&quot;, &quot;囤&quot;, &quot;吮&quot;, &quot;岖&quot;, &quot;牡&quot;, &quot;佑&quot;                , &quot;佃&quot;, &quot;伺&quot;, &quot;囱&quot;, &quot;肛&quot;, &quot;肘&quot;, &quot;甸&quot;, &quot;狈&quot;, &quot;鸠&quot;, &quot;彤&quot;, &quot;灸&quot;, &quot;刨&quot;, &quot;庇&quot;, &quot;吝&quot;, &quot;庐&quot;, &quot;闰&quot;, &quot;兑&quot;, &quot;灼&quot;, &quot;沐&quot;, &quot;沛&quot;, &quot;汰&quot;, &quot;沥&quot;, &quot;沦&quot;, &quot;汹&quot;, &quot;沧&quot;, &quot;沪&quot;                , &quot;忱&quot;, &quot;诅&quot;, &quot;诈&quot;, &quot;罕&quot;, &quot;屁&quot;, &quot;坠&quot;, &quot;妓&quot;, &quot;姊&quot;, &quot;妒&quot;, &quot;纬&quot;, &quot;玫&quot;, &quot;卦&quot;, &quot;坷&quot;, &quot;坯&quot;, &quot;拓&quot;, &quot;坪&quot;, &quot;坤&quot;, &quot;拄&quot;, &quot;拧&quot;, &quot;拂&quot;, &quot;拙&quot;, &quot;拇&quot;, &quot;拗&quot;, &quot;茉&quot;, &quot;昔&quot;                , &quot;苛&quot;, &quot;苫&quot;, &quot;苟&quot;, &quot;苞&quot;, &quot;茁&quot;, &quot;苔&quot;, &quot;枉&quot;, &quot;枢&quot;, &quot;枚&quot;, &quot;枫&quot;, &quot;杭&quot;, &quot;郁&quot;, &quot;矾&quot;, &quot;奈&quot;, &quot;奄&quot;, &quot;殴&quot;, &quot;歧&quot;, &quot;卓&quot;, &quot;昙&quot;, &quot;哎&quot;, &quot;咕&quot;, &quot;呵&quot;, &quot;咙&quot;, &quot;呻&quot;, &quot;咒&quot;                , &quot;咆&quot;, &quot;咖&quot;, &quot;帕&quot;, &quot;账&quot;, &quot;贬&quot;, &quot;贮&quot;, &quot;氛&quot;, &quot;秉&quot;, &quot;岳&quot;, &quot;侠&quot;, &quot;侥&quot;, &quot;侣&quot;, &quot;侈&quot;, &quot;卑&quot;, &quot;刽&quot;, &quot;刹&quot;, &quot;肴&quot;, &quot;觅&quot;, &quot;忿&quot;, &quot;瓮&quot;, &quot;肮&quot;, &quot;肪&quot;, &quot;狞&quot;, &quot;庞&quot;, &quot;疟&quot;                , &quot;疙&quot;, &quot;疚&quot;, &quot;卒&quot;, &quot;氓&quot;, &quot;炬&quot;, &quot;沽&quot;, &quot;沮&quot;, &quot;泣&quot;, &quot;泞&quot;, &quot;泌&quot;, &quot;沼&quot;, &quot;怔&quot;, &quot;怯&quot;, &quot;宠&quot;, &quot;宛&quot;, &quot;衩&quot;, &quot;祈&quot;, &quot;诡&quot;, &quot;帚&quot;, &quot;屉&quot;, &quot;弧&quot;, &quot;弥&quot;, &quot;陋&quot;, &quot;陌&quot;, &quot;函&quot;                , &quot;姆&quot;, &quot;虱&quot;, &quot;三&quot;, &quot;绅&quot;, &quot;驹&quot;, &quot;绊&quot;, &quot;绎&quot;, &quot;契&quot;, &quot;贰&quot;, &quot;玷&quot;, &quot;玲&quot;, &quot;珊&quot;, &quot;拭&quot;, &quot;拷&quot;, &quot;拱&quot;, &quot;挟&quot;, &quot;垢&quot;, &quot;垛&quot;, &quot;拯&quot;, &quot;荆&quot;, &quot;茸&quot;, &quot;茬&quot;, &quot;荚&quot;, &quot;茵&quot;, &quot;茴&quot;                , &quot;荞&quot;, &quot;荠&quot;, &quot;荤&quot;, &quot;荧&quot;, &quot;荔&quot;, &quot;栈&quot;, &quot;柑&quot;, &quot;栅&quot;, &quot;柠&quot;, &quot;枷&quot;, &quot;勃&quot;, &quot;柬&quot;, &quot;砂&quot;, &quot;泵&quot;, &quot;砚&quot;, &quot;鸥&quot;, &quot;轴&quot;, &quot;韭&quot;, &quot;虐&quot;, &quot;昧&quot;, &quot;盹&quot;, &quot;咧&quot;, &quot;昵&quot;, &quot;昭&quot;, &quot;盅&quot;                , &quot;勋&quot;, &quot;哆&quot;, &quot;咪&quot;, &quot;哟&quot;, &quot;幽&quot;, &quot;钙&quot;, &quot;钝&quot;, &quot;钠&quot;, &quot;钦&quot;, &quot;钧&quot;, &quot;钮&quot;, &quot;毡&quot;, &quot;氢&quot;, &quot;秕&quot;, &quot;俏&quot;, &quot;俄&quot;, &quot;俐&quot;, &quot;侯&quot;, &quot;徊&quot;, &quot;衍&quot;, &quot;胚&quot;, &quot;胧&quot;, &quot;胎&quot;, &quot;狰&quot;, &quot;饵&quot;                , &quot;峦&quot;, &quot;奕&quot;, &quot;咨&quot;, &quot;飒&quot;, &quot;闺&quot;, &quot;闽&quot;, &quot;籽&quot;, &quot;娄&quot;, &quot;烁&quot;, &quot;炫&quot;, &quot;洼&quot;, &quot;柒&quot;, &quot;涎&quot;, &quot;洛&quot;, &quot;恃&quot;, &quot;恍&quot;, &quot;恬&quot;, &quot;恤&quot;, &quot;宦&quot;, &quot;诫&quot;, &quot;诬&quot;, &quot;祠&quot;, &quot;诲&quot;, &quot;屏&quot;, &quot;屎&quot;                , &quot;逊&quot;, &quot;陨&quot;, &quot;姚&quot;, &quot;娜&quot;, &quot;蚤&quot;, &quot;骇&quot;, &quot;耕&quot;, &quot;耙&quot;, &quot;秦&quot;, &quot;匿&quot;, &quot;埂&quot;, &quot;捂&quot;, &quot;捍&quot;, &quot;袁&quot;, &quot;捌&quot;, &quot;挫&quot;, &quot;挚&quot;, &quot;捣&quot;, &quot;捅&quot;, &quot;埃&quot;, &quot;耿&quot;, &quot;聂&quot;, &quot;荸&quot;, &quot;莽&quot;, &quot;莱&quot;                , &quot;莉&quot;, &quot;莹&quot;, &quot;莺&quot;, &quot;梆&quot;, &quot;栖&quot;, &quot;桦&quot;, &quot;栓&quot;, &quot;桅&quot;, &quot;桩&quot;, &quot;贾&quot;, &quot;酌&quot;, &quot;砸&quot;, &quot;砰&quot;, &quot;砾&quot;, &quot;殉&quot;, &quot;逞&quot;, &quot;哮&quot;, &quot;唠&quot;, &quot;哺&quot;, &quot;剔&quot;, &quot;蚌&quot;, &quot;蚜&quot;, &quot;畔&quot;, &quot;蚣&quot;, &quot;蚪&quot;                , &quot;蚓&quot;, &quot;哩&quot;, &quot;圃&quot;, &quot;鸯&quot;, &quot;唁&quot;, &quot;哼&quot;, &quot;唧&quot;, &quot;唆&quot;, &quot;峭&quot;, &quot;峻&quot;, &quot;赂&quot;, &quot;赃&quot;, &quot;钾&quot;, &quot;铆&quot;, &quot;氨&quot;, &quot;秫&quot;, &quot;笆&quot;, &quot;俺&quot;, &quot;赁&quot;, &quot;倔&quot;, &quot;殷&quot;, &quot;耸&quot;, &quot;舀&quot;, &quot;豺&quot;, &quot;豹&quot;                , &quot;颁&quot;, &quot;胯&quot;, &quot;胰&quot;, &quot;脐&quot;, &quot;脓&quot;, &quot;逛&quot;, &quot;卿&quot;, &quot;鸵&quot;, &quot;鸳&quot;, &quot;馁&quot;, &quot;凌&quot;, &quot;凄&quot;, &quot;衷&quot;, &quot;郭&quot;, &quot;斋&quot;, &quot;疹&quot;, &quot;紊&quot;, &quot;瓷&quot;, &quot;羔&quot;, &quot;烙&quot;, &quot;浦&quot;, &quot;涡&quot;, &quot;涣&quot;, &quot;涤&quot;, &quot;涧&quot;                , &quot;涕&quot;, &quot;涩&quot;, &quot;悍&quot;, &quot;悯&quot;, &quot;窍&quot;, &quot;诺&quot;, &quot;诽&quot;, &quot;袒&quot;, &quot;谆&quot;, &quot;祟&quot;, &quot;恕&quot;, &quot;娩&quot;, &quot;骏&quot;, &quot;琐&quot;, &quot;麸&quot;, &quot;琉&quot;, &quot;琅&quot;, &quot;措&quot;, &quot;捺&quot;, &quot;捶&quot;, &quot;赦&quot;, &quot;埠&quot;, &quot;捻&quot;, &quot;掐&quot;, &quot;掂&quot;                , &quot;掖&quot;, &quot;掷&quot;, &quot;掸&quot;, &quot;掺&quot;, &quot;勘&quot;, &quot;聊&quot;, &quot;娶&quot;, &quot;菱&quot;, &quot;菲&quot;, &quot;萎&quot;, &quot;菩&quot;, &quot;萤&quot;, &quot;干&quot;, &quot;萧&quot;, &quot;萨&quot;, &quot;菇&quot;, &quot;彬&quot;, &quot;梗&quot;, &quot;梧&quot;, &quot;梭&quot;, &quot;曹&quot;, &quot;酝&quot;, &quot;酗&quot;, &quot;厢&quot;, &quot;硅&quot;                , &quot;硕&quot;, &quot;奢&quot;, &quot;盔&quot;, &quot;匾&quot;, &quot;颅&quot;, &quot;彪&quot;, &quot;眶&quot;, &quot;晤&quot;, &quot;曼&quot;, &quot;晦&quot;, &quot;冕&quot;, &quot;啡&quot;, &quot;畦&quot;, &quot;趾&quot;, &quot;啃&quot;, &quot;蛆&quot;, &quot;蚯&quot;, &quot;蛉&quot;, &quot;蛀&quot;, &quot;唬&quot;, &quot;啰&quot;, &quot;唾&quot;, &quot;啤&quot;, &quot;啥&quot;, &quot;啸&quot;                , &quot;崎&quot;, &quot;逻&quot;, &quot;崔&quot;, &quot;崩&quot;, &quot;婴&quot;, &quot;赊&quot;, &quot;铐&quot;, &quot;铛&quot;, &quot;铝&quot;, &quot;铡&quot;, &quot;铣&quot;, &quot;铭&quot;, &quot;矫&quot;, &quot;秸&quot;, &quot;秽&quot;, &quot;笙&quot;, &quot;笤&quot;, &quot;偎&quot;, &quot;傀&quot;, &quot;躯&quot;, &quot;兜&quot;, &quot;衅&quot;, &quot;徘&quot;, &quot;徒&quot;, &quot;舶&quot;                , &quot;舷&quot;, &quot;舵&quot;, &quot;敛&quot;, &quot;翎&quot;, &quot;脯&quot;, &quot;逸&quot;, &quot;凰&quot;, &quot;猖&quot;, &quot;祭&quot;, &quot;烹&quot;, &quot;庶&quot;, &quot;庵&quot;, &quot;痊&quot;, &quot;阎&quot;, &quot;阐&quot;, &quot;眷&quot;, &quot;焊&quot;, &quot;焕&quot;, &quot;鸿&quot;, &quot;涯&quot;, &quot;淑&quot;, &quot;淌&quot;, &quot;淮&quot;, &quot;淆&quot;, &quot;渊&quot;                , &quot;淫&quot;, &quot;淳&quot;, &quot;淤&quot;, &quot;淀&quot;, &quot;涮&quot;, &quot;涵&quot;, &quot;惦&quot;, &quot;悴&quot;, &quot;惋&quot;, &quot;寂&quot;, &quot;窒&quot;, &quot;谍&quot;, &quot;谐&quot;, &quot;裆&quot;, &quot;袱&quot;, &quot;祷&quot;, &quot;谒&quot;, &quot;谓&quot;, &quot;谚&quot;, &quot;尉&quot;, &quot;堕&quot;, &quot;隅&quot;, &quot;婉&quot;, &quot;颇&quot;, &quot;绰&quot;                , &quot;绷&quot;, &quot;综&quot;, &quot;绽&quot;, &quot;缀&quot;, &quot;巢&quot;, &quot;琳&quot;, &quot;琢&quot;, &quot;琼&quot;, &quot;揍&quot;, &quot;堰&quot;, &quot;揩&quot;, &quot;揽&quot;, &quot;揖&quot;, &quot;彭&quot;, &quot;揣&quot;, &quot;搀&quot;, &quot;搓&quot;, &quot;壹&quot;, &quot;搔&quot;, &quot;葫&quot;, &quot;募&quot;, &quot;蒋&quot;, &quot;蒂&quot;, &quot;韩&quot;, &quot;棱&quot;                , &quot;椰&quot;, &quot;焚&quot;, &quot;椎&quot;, &quot;棺&quot;, &quot;榔&quot;, &quot;椭&quot;, &quot;粟&quot;, &quot;棘&quot;, &quot;酣&quot;, &quot;酥&quot;, &quot;硝&quot;, &quot;硫&quot;, &quot;颊&quot;, &quot;雳&quot;, &quot;翘&quot;, &quot;凿&quot;, &quot;棠&quot;, &quot;晰&quot;, &quot;鼎&quot;, &quot;喳&quot;, &quot;遏&quot;, &quot;晾&quot;, &quot;畴&quot;, &quot;跋&quot;, &quot;跛&quot;                , &quot;蛔&quot;, &quot;蜒&quot;, &quot;蛤&quot;, &quot;鹃&quot;, &quot;喻&quot;, &quot;啼&quot;, &quot;喧&quot;, &quot;嵌&quot;, &quot;赋&quot;, &quot;赎&quot;, &quot;赐&quot;, &quot;锉&quot;, &quot;锌&quot;, &quot;甥&quot;, &quot;掰&quot;, &quot;氮&quot;, &quot;氯&quot;, &quot;黍&quot;, &quot;筏&quot;, &quot;牍&quot;, &quot;粤&quot;, &quot;逾&quot;, &quot;腌&quot;, &quot;腋&quot;, &quot;腕&quot;                , &quot;猩&quot;, &quot;猬&quot;, &quot;惫&quot;, &quot;敦&quot;, &quot;痘&quot;, &quot;痢&quot;, &quot;痪&quot;, &quot;竣&quot;, &quot;翔&quot;, &quot;奠&quot;, &quot;遂&quot;, &quot;焙&quot;, &quot;滞&quot;, &quot;湘&quot;, &quot;渤&quot;, &quot;渺&quot;, &quot;溃&quot;, &quot;溅&quot;, &quot;湃&quot;, &quot;愕&quot;, &quot;惶&quot;, &quot;寓&quot;, &quot;窖&quot;, &quot;窘&quot;, &quot;雇&quot;                , &quot;谤&quot;, &quot;犀&quot;, &quot;隘&quot;, &quot;媒&quot;, &quot;媚&quot;, &quot;婿&quot;, &quot;缅&quot;, &quot;缆&quot;, &quot;缔&quot;, &quot;缕&quot;, &quot;骚&quot;, &quot;瑟&quot;, &quot;鹉&quot;, &quot;瑰&quot;, &quot;搪&quot;, &quot;聘&quot;, &quot;斟&quot;, &quot;靴&quot;, &quot;靶&quot;, &quot;蓖&quot;, &quot;蒿&quot;, &quot;蒲&quot;, &quot;蓉&quot;, &quot;楔&quot;, &quot;椿&quot;                , &quot;楷&quot;, &quot;榄&quot;, &quot;楞&quot;, &quot;楣&quot;, &quot;酪&quot;, &quot;碘&quot;, &quot;硼&quot;, &quot;碉&quot;, &quot;辐&quot;, &quot;辑&quot;, &quot;频&quot;, &quot;睹&quot;, &quot;睦&quot;, &quot;瞄&quot;, &quot;嗜&quot;, &quot;嗦&quot;, &quot;暇&quot;, &quot;畸&quot;, &quot;跷&quot;, &quot;跺&quot;, &quot;蜈&quot;, &quot;蜗&quot;, &quot;蜕&quot;, &quot;蛹&quot;, &quot;嗅&quot;                , &quot;嗡&quot;, &quot;嗤&quot;, &quot;署&quot;, &quot;蜀&quot;, &quot;幌&quot;, &quot;锚&quot;, &quot;锥&quot;, &quot;锨&quot;, &quot;锭&quot;, &quot;锰&quot;, &quot;稚&quot;, &quot;颓&quot;, &quot;筷&quot;, &quot;魁&quot;, &quot;衙&quot;, &quot;腻&quot;, &quot;腮&quot;, &quot;腺&quot;, &quot;鹏&quot;, &quot;肄&quot;, &quot;猿&quot;, &quot;颖&quot;, &quot;煞&quot;, &quot;雏&quot;, &quot;馍&quot;                , &quot;馏&quot;, &quot;禀&quot;, &quot;痹&quot;, &quot;廓&quot;, &quot;痴&quot;, &quot;靖&quot;, &quot;誊&quot;, &quot;漓&quot;, &quot;溢&quot;, &quot;溯&quot;, &quot;溶&quot;, &quot;滓&quot;, &quot;溺&quot;, &quot;寞&quot;, &quot;窥&quot;, &quot;窟&quot;, &quot;寝&quot;, &quot;褂&quot;, &quot;裸&quot;, &quot;谬&quot;, &quot;媳&quot;, &quot;嫉&quot;, &quot;缚&quot;, &quot;缤&quot;, &quot;剿&quot;                , &quot;赘&quot;, &quot;熬&quot;, &quot;赫&quot;, &quot;蔫&quot;, &quot;摹&quot;, &quot;蔓&quot;, &quot;蔗&quot;, &quot;蔼&quot;, &quot;熙&quot;, &quot;蔚&quot;, &quot;兢&quot;, &quot;榛&quot;, &quot;榕&quot;, &quot;酵&quot;, &quot;碟&quot;, &quot;碴&quot;, &quot;碱&quot;, &quot;碳&quot;, &quot;辕&quot;, &quot;辖&quot;, &quot;雌&quot;, &quot;墅&quot;, &quot;嘁&quot;, &quot;踊&quot;, &quot;蝉&quot;                , &quot;嘀&quot;, &quot;幔&quot;, &quot;镀&quot;, &quot;舔&quot;, &quot;熏&quot;, &quot;箍&quot;, &quot;箕&quot;, &quot;箫&quot;, &quot;舆&quot;, &quot;僧&quot;, &quot;孵&quot;, &quot;瘩&quot;, &quot;瘟&quot;, &quot;彰&quot;, &quot;粹&quot;, &quot;漱&quot;, &quot;漩&quot;, &quot;漾&quot;, &quot;慷&quot;, &quot;寡&quot;, &quot;寥&quot;, &quot;谭&quot;, &quot;褐&quot;, &quot;裉&quot;, &quot;隧&quot;                , &quot;嫡&quot;, &quot;缨&quot;, &quot;撵&quot;, &quot;撩&quot;, &quot;撮&quot;, &quot;撬&quot;, &quot;擒&quot;, &quot;墩&quot;, &quot;撰&quot;, &quot;鞍&quot;, &quot;蕊&quot;, &quot;蕴&quot;, &quot;樊&quot;, &quot;樟&quot;, &quot;橄&quot;, &quot;敷&quot;, &quot;豌&quot;, &quot;醇&quot;, &quot;磕&quot;, &quot;磅&quot;, &quot;碾&quot;, &quot;嘶&quot;, &quot;嘲&quot;, &quot;嘹&quot;, &quot;蝠&quot;                , &quot;蝎&quot;, &quot;蝌&quot;, &quot;蝗&quot;, &quot;蝙&quot;, &quot;嘿&quot;, &quot;幢&quot;, &quot;镊&quot;, &quot;镐&quot;, &quot;稽&quot;, &quot;篓&quot;, &quot;膘&quot;, &quot;鲤&quot;, &quot;鲫&quot;, &quot;褒&quot;, &quot;瘪&quot;, &quot;瘤&quot;, &quot;瘫&quot;, &quot;凛&quot;, &quot;憋&quot;, &quot;澎&quot;, &quot;潭&quot;, &quot;潦&quot;, &quot;澳&quot;, &quot;潘&quot;, &quot;澈&quot;                , &quot;澜&quot;, &quot;澄&quot;, &quot;憔&quot;, &quot;懊&quot;, &quot;憎&quot;, &quot;翩&quot;, &quot;褥&quot;, &quot;谴&quot;, &quot;鹤&quot;, &quot;憨&quot;, &quot;履&quot;, &quot;嬉&quot;, &quot;豫&quot;, &quot;缭&quot;, &quot;撼&quot;, &quot;擂&quot;, &quot;擅&quot;, &quot;蕾&quot;, &quot;薛&quot;, &quot;薇&quot;, &quot;擎&quot;, &quot;翰&quot;, &quot;噩&quot;, &quot;橱&quot;, &quot;橙&quot;                , &quot;瓢&quot;, &quot;磺&quot;, &quot;霍&quot;, &quot;霎&quot;, &quot;辙&quot;, &quot;冀&quot;, &quot;踱&quot;, &quot;蹂&quot;, &quot;蟆&quot;, &quot;螃&quot;, &quot;螟&quot;, &quot;噪&quot;, &quot;鹦&quot;, &quot;黔&quot;, &quot;穆&quot;, &quot;篡&quot;, &quot;篷&quot;, &quot;篙&quot;, &quot;篱&quot;, &quot;儒&quot;, &quot;膳&quot;, &quot;鲸&quot;, &quot;瘾&quot;, &quot;瘸&quot;, &quot;糙&quot;                , &quot;燎&quot;, &quot;濒&quot;, &quot;憾&quot;, &quot;懈&quot;, &quot;窿&quot;, &quot;缰&quot;, &quot;壕&quot;, &quot;藐&quot;, &quot;檬&quot;, &quot;檐&quot;, &quot;檩&quot;, &quot;檀&quot;, &quot;礁&quot;, &quot;磷&quot;, &quot;瞭&quot;, &quot;瞬&quot;, &quot;瞳&quot;, &quot;瞪&quot;, &quot;曙&quot;, &quot;蹋&quot;, &quot;蟋&quot;, &quot;蟀&quot;, &quot;嚎&quot;, &quot;赡&quot;, &quot;镣&quot;                , &quot;魏&quot;, &quot;簇&quot;, &quot;儡&quot;, &quot;徽&quot;, &quot;爵&quot;, &quot;朦&quot;, &quot;臊&quot;, &quot;鳄&quot;, &quot;糜&quot;, &quot;癌&quot;, &quot;懦&quot;, &quot;豁&quot;, &quot;臀&quot;, &quot;藕&quot;, &quot;藤&quot;, &quot;瞻&quot;, &quot;嚣&quot;, &quot;鳍&quot;, &quot;癞&quot;, &quot;瀑&quot;, &quot;襟&quot;, &quot;璧&quot;, &quot;戳&quot;, &quot;攒&quot;, &quot;孽&quot;                , &quot;蘑&quot;, &quot;藻&quot;, &quot;蹭&quot;, &quot;蹬&quot;, &quot;簸&quot;, &quot;簿&quot;, &quot;蟹&quot;, &quot;靡&quot;, &quot;癣&quot;, &quot;羹&quot;, &quot;鳖&quot;, &quot;鬓&quot;, &quot;攘&quot;, &quot;蠕&quot;, &quot;巍&quot;, &quot;鳞&quot;, &quot;糯&quot;, &quot;譬&quot;, &quot;霹&quot;, &quot;躏&quot;, &quot;髓&quot;, &quot;蘸&quot;, &quot;镶&quot;, &quot;瓤&quot;, &quot;矗&quot;        };        /* 598 百家姓 */        String[] Surname = {&quot;赵&quot;, &quot;钱&quot;, &quot;孙&quot;, &quot;李&quot;, &quot;周&quot;, &quot;吴&quot;, &quot;郑&quot;, &quot;王&quot;, &quot;冯&quot;, &quot;陈&quot;, &quot;褚&quot;, &quot;卫&quot;, &quot;蒋&quot;, &quot;沈&quot;, &quot;韩&quot;, &quot;杨&quot;, &quot;朱&quot;, &quot;秦&quot;, &quot;尤&quot;, &quot;许&quot;,                &quot;何&quot;, &quot;吕&quot;, &quot;施&quot;, &quot;张&quot;, &quot;孔&quot;, &quot;曹&quot;, &quot;严&quot;, &quot;华&quot;, &quot;金&quot;, &quot;魏&quot;, &quot;陶&quot;, &quot;姜&quot;, &quot;戚&quot;, &quot;谢&quot;, &quot;邹&quot;, &quot;喻&quot;, &quot;柏&quot;, &quot;水&quot;, &quot;窦&quot;, &quot;章&quot;, &quot;云&quot;, &quot;苏&quot;, &quot;潘&quot;, &quot;葛&quot;, &quot;奚&quot;, &quot;范&quot;, &quot;彭&quot;, &quot;郎&quot;,                &quot;鲁&quot;, &quot;韦&quot;, &quot;昌&quot;, &quot;马&quot;, &quot;苗&quot;, &quot;凤&quot;, &quot;花&quot;, &quot;方&quot;, &quot;俞&quot;, &quot;任&quot;, &quot;袁&quot;, &quot;柳&quot;, &quot;酆&quot;, &quot;鲍&quot;, &quot;史&quot;, &quot;唐&quot;, &quot;费&quot;, &quot;廉&quot;, &quot;岑&quot;, &quot;薛&quot;, &quot;雷&quot;, &quot;贺&quot;, &quot;倪&quot;, &quot;汤&quot;, &quot;滕&quot;, &quot;殷&quot;,                &quot;罗&quot;, &quot;毕&quot;, &quot;郝&quot;, &quot;邬&quot;, &quot;安&quot;, &quot;常&quot;, &quot;乐&quot;, &quot;于&quot;, &quot;时&quot;, &quot;傅&quot;, &quot;皮&quot;, &quot;卞&quot;, &quot;齐&quot;, &quot;康&quot;, &quot;伍&quot;, &quot;余&quot;, &quot;元&quot;, &quot;卜&quot;, &quot;顾&quot;, &quot;孟&quot;, &quot;平&quot;, &quot;黄&quot;, &quot;和&quot;,                &quot;穆&quot;, &quot;萧&quot;, &quot;尹&quot;, &quot;姚&quot;, &quot;邵&quot;, &quot;湛&quot;, &quot;汪&quot;, &quot;祁&quot;, &quot;毛&quot;, &quot;禹&quot;, &quot;狄&quot;, &quot;米&quot;, &quot;贝&quot;, &quot;明&quot;, &quot;臧&quot;, &quot;计&quot;, &quot;伏&quot;, &quot;成&quot;, &quot;戴&quot;, &quot;谈&quot;, &quot;宋&quot;, &quot;茅&quot;, &quot;庞&quot;, &quot;熊&quot;, &quot;纪&quot;, &quot;舒&quot;,                &quot;屈&quot;, &quot;项&quot;, &quot;祝&quot;, &quot;董&quot;, &quot;梁&quot;, &quot;杜&quot;, &quot;阮&quot;, &quot;蓝&quot;, &quot;闵&quot;, &quot;席&quot;, &quot;季&quot;, &quot;麻&quot;, &quot;强&quot;, &quot;贾&quot;, &quot;路&quot;, &quot;娄&quot;, &quot;危&quot;, &quot;江&quot;, &quot;童&quot;, &quot;颜&quot;, &quot;郭&quot;, &quot;梅&quot;, &quot;盛&quot;, &quot;林&quot;, &quot;刁&quot;, &quot;钟&quot;,                &quot;徐&quot;, &quot;邱&quot;, &quot;骆&quot;, &quot;高&quot;, &quot;夏&quot;, &quot;蔡&quot;, &quot;田&quot;, &quot;樊&quot;, &quot;胡&quot;, &quot;凌&quot;, &quot;霍&quot;, &quot;虞&quot;, &quot;万&quot;, &quot;支&quot;, &quot;柯&quot;, &quot;昝&quot;, &quot;管&quot;, &quot;卢&quot;, &quot;莫&quot;, &quot;经&quot;, &quot;房&quot;, &quot;裘&quot;, &quot;缪&quot;, &quot;干&quot;, &quot;解&quot;, &quot;应&quot;,                &quot;宗&quot;, &quot;丁&quot;, &quot;宣&quot;, &quot;贲&quot;, &quot;邓&quot;, &quot;郁&quot;, &quot;单&quot;, &quot;杭&quot;, &quot;洪&quot;, &quot;包&quot;, &quot;诸&quot;, &quot;左&quot;, &quot;石&quot;, &quot;崔&quot;, &quot;吉&quot;, &quot;钮&quot;, &quot;龚&quot;, &quot;程&quot;, &quot;嵇&quot;, &quot;邢&quot;, &quot;滑&quot;, &quot;裴&quot;, &quot;陆&quot;, &quot;荣&quot;, &quot;翁&quot;, &quot;荀&quot;,                &quot;羊&quot;, &quot;于&quot;, &quot;惠&quot;, &quot;甄&quot;, &quot;曲&quot;, &quot;家&quot;, &quot;封&quot;, &quot;芮&quot;, &quot;羿&quot;, &quot;储&quot;, &quot;靳&quot;, &quot;汲&quot;, &quot;邴&quot;, &quot;糜&quot;, &quot;松&quot;, &quot;井&quot;, &quot;段&quot;, &quot;富&quot;, &quot;巫&quot;, &quot;乌&quot;, &quot;焦&quot;, &quot;巴&quot;, &quot;弓&quot;, &quot;牧&quot;, &quot;隗&quot;, &quot;山&quot;,                &quot;谷&quot;, &quot;车&quot;, &quot;侯&quot;, &quot;宓&quot;, &quot;蓬&quot;, &quot;全&quot;, &quot;郗&quot;, &quot;班&quot;, &quot;仰&quot;, &quot;秋&quot;, &quot;仲&quot;, &quot;伊&quot;, &quot;宫&quot;, &quot;宁&quot;, &quot;仇&quot;, &quot;栾&quot;, &quot;暴&quot;, &quot;甘&quot;, &quot;钭&quot;, &quot;厉&quot;, &quot;戎&quot;, &quot;祖&quot;, &quot;武&quot;, &quot;符&quot;, &quot;刘&quot;, &quot;景&quot;,                &quot;詹&quot;, &quot;束&quot;, &quot;龙&quot;, &quot;叶&quot;, &quot;幸&quot;, &quot;司&quot;, &quot;韶&quot;, &quot;郜&quot;, &quot;黎&quot;, &quot;蓟&quot;, &quot;溥&quot;, &quot;印&quot;, &quot;宿&quot;, &quot;白&quot;, &quot;怀&quot;, &quot;蒲&quot;, &quot;邰&quot;, &quot;从&quot;, &quot;鄂&quot;, &quot;索&quot;, &quot;咸&quot;, &quot;籍&quot;, &quot;赖&quot;, &quot;卓&quot;, &quot;蔺&quot;, &quot;屠&quot;,                &quot;蒙&quot;, &quot;池&quot;, &quot;乔&quot;, &quot;阴&quot;, &quot;郁&quot;, &quot;胥&quot;, &quot;能&quot;, &quot;苍&quot;, &quot;双&quot;, &quot;闻&quot;, &quot;莘&quot;, &quot;党&quot;, &quot;翟&quot;, &quot;谭&quot;, &quot;贡&quot;, &quot;劳&quot;, &quot;逄&quot;, &quot;姬&quot;, &quot;申&quot;, &quot;扶&quot;, &quot;堵&quot;, &quot;冉&quot;, &quot;宰&quot;, &quot;郦&quot;, &quot;雍&quot;, &quot;却&quot;,                &quot;璩&quot;, &quot;桑&quot;, &quot;桂&quot;, &quot;濮&quot;, &quot;牛&quot;, &quot;寿&quot;, &quot;通&quot;, &quot;边&quot;, &quot;扈&quot;, &quot;燕&quot;, &quot;冀&quot;, &quot;浦&quot;, &quot;尚&quot;, &quot;农&quot;, &quot;温&quot;, &quot;别&quot;, &quot;庄&quot;, &quot;晏&quot;, &quot;柴&quot;, &quot;瞿&quot;, &quot;阎&quot;, &quot;充&quot;, &quot;慕&quot;, &quot;连&quot;, &quot;茹&quot;, &quot;习&quot;,                &quot;宦&quot;, &quot;艾&quot;, &quot;鱼&quot;, &quot;容&quot;, &quot;向&quot;, &quot;古&quot;, &quot;易&quot;, &quot;慎&quot;, &quot;戈&quot;, &quot;廖&quot;, &quot;庾&quot;, &quot;终&quot;, &quot;暨&quot;, &quot;居&quot;, &quot;衡&quot;, &quot;步&quot;, &quot;都&quot;, &quot;耿&quot;, &quot;满&quot;, &quot;弘&quot;, &quot;匡&quot;, &quot;国&quot;, &quot;文&quot;, &quot;寇&quot;, &quot;广&quot;, &quot;禄&quot;,                &quot;阙&quot;, &quot;东&quot;, &quot;欧&quot;, &quot;殳&quot;, &quot;沃&quot;, &quot;利&quot;, &quot;蔚&quot;, &quot;越&quot;, &quot;夔&quot;, &quot;隆&quot;, &quot;师&quot;, &quot;巩&quot;, &quot;厍&quot;, &quot;聂&quot;, &quot;晁&quot;, &quot;勾&quot;, &quot;敖&quot;, &quot;融&quot;, &quot;冷&quot;, &quot;訾&quot;, &quot;辛&quot;, &quot;阚&quot;, &quot;那&quot;, &quot;简&quot;, &quot;饶&quot;, &quot;空&quot;,                &quot;曾&quot;, &quot;毋&quot;, &quot;沙&quot;, &quot;乜&quot;, &quot;养&quot;, &quot;鞠&quot;, &quot;须&quot;, &quot;丰&quot;, &quot;巢&quot;, &quot;关&quot;, &quot;蒯&quot;, &quot;相&quot;, &quot;查&quot;, &quot;后&quot;, &quot;荆&quot;, &quot;红&quot;, &quot;游&quot;, &quot;郏&quot;, &quot;竺&quot;, &quot;权&quot;, &quot;逯&quot;, &quot;盖&quot;, &quot;益&quot;, &quot;桓&quot;, &quot;公&quot;, &quot;仉&quot;,                &quot;督&quot;, &quot;岳&quot;, &quot;帅&quot;, &quot;缑&quot;, &quot;亢&quot;, &quot;况&quot;, &quot;郈&quot;, &quot;有&quot;, &quot;琴&quot;, &quot;归&quot;, &quot;海&quot;, &quot;晋&quot;, &quot;楚&quot;, &quot;闫&quot;, &quot;法&quot;, &quot;汝&quot;, &quot;鄢&quot;, &quot;涂&quot;, &quot;钦&quot;, &quot;商&quot;, &quot;牟&quot;, &quot;佘&quot;, &quot;佴&quot;, &quot;伯&quot;, &quot;赏&quot;, &quot;墨&quot;,                &quot;哈&quot;, &quot;谯&quot;, &quot;篁&quot;, &quot;年&quot;, &quot;爱&quot;, &quot;阳&quot;, &quot;佟&quot;, &quot;言&quot;, &quot;福&quot;, &quot;南&quot;, &quot;火&quot;, &quot;铁&quot;, &quot;迟&quot;, &quot;漆&quot;, &quot;官&quot;, &quot;冼&quot;, &quot;真&quot;, &quot;展&quot;, &quot;繁&quot;, &quot;檀&quot;, &quot;祭&quot;, &quot;密&quot;, &quot;敬&quot;, &quot;揭&quot;, &quot;舜&quot;, &quot;楼&quot;,                &quot;疏&quot;, &quot;冒&quot;, &quot;浑&quot;, &quot;挚&quot;, &quot;胶&quot;, &quot;随&quot;, &quot;高&quot;, &quot;皋&quot;, &quot;原&quot;, &quot;种&quot;, &quot;练&quot;, &quot;弥&quot;, &quot;仓&quot;, &quot;眭&quot;, &quot;蹇&quot;, &quot;覃&quot;, &quot;阿&quot;, &quot;门&quot;, &quot;恽&quot;, &quot;来&quot;, &quot;綦&quot;, &quot;召&quot;, &quot;仪&quot;, &quot;风&quot;, &quot;介&quot;, &quot;巨&quot;,                &quot;木&quot;, &quot;京&quot;, &quot;狐&quot;, &quot;郇&quot;, &quot;虎&quot;, &quot;枚&quot;, &quot;抗&quot;, &quot;达&quot;, &quot;杞&quot;, &quot;苌&quot;, &quot;折&quot;, &quot;麦&quot;, &quot;庆&quot;, &quot;过&quot;, &quot;竹&quot;, &quot;端&quot;, &quot;鲜&quot;, &quot;皇&quot;, &quot;亓&quot;, &quot;老&quot;, &quot;是&quot;, &quot;秘&quot;, &quot;畅&quot;, &quot;邝&quot;, &quot;还&quot;, &quot;宾&quot;,                &quot;闾&quot;, &quot;辜&quot;, &quot;纵&quot;, &quot;侴&quot;, &quot;万俟&quot;, &quot;司马&quot;, &quot;上官&quot;, &quot;欧阳&quot;, &quot;夏侯&quot;, &quot;诸葛&quot;, &quot;闻人&quot;, &quot;东方&quot;, &quot;赫连&quot;, &quot;皇甫&quot;, &quot;羊舌&quot;, &quot;尉迟&quot;, &quot;公羊&quot;, &quot;澹台&quot;, &quot;公冶&quot;, &quot;宗正&quot;,                &quot;濮阳&quot;, &quot;淳于&quot;, &quot;单于&quot;, &quot;太叔&quot;, &quot;申屠&quot;, &quot;公孙&quot;, &quot;仲孙&quot;, &quot;轩辕&quot;, &quot;令狐&quot;, &quot;钟离&quot;, &quot;宇文&quot;, &quot;长孙&quot;, &quot;慕容&quot;, &quot;鲜于&quot;, &quot;闾丘&quot;, &quot;司徒&quot;, &quot;司空&quot;, &quot;兀官&quot;, &quot;司寇&quot;,                &quot;南门&quot;, &quot;呼延&quot;, &quot;子车&quot;, &quot;颛孙&quot;, &quot;端木&quot;, &quot;巫马&quot;, &quot;公西&quot;, &quot;漆雕&quot;, &quot;车正&quot;, &quot;壤驷&quot;, &quot;公良&quot;, &quot;拓跋&quot;, &quot;夹谷&quot;, &quot;宰父&quot;, &quot;谷梁&quot;, &quot;段干&quot;, &quot;百里&quot;, &quot;东郭&quot;, &quot;微生&quot;,                &quot;梁丘&quot;, &quot;左丘&quot;, &quot;东门&quot;, &quot;西门&quot;, &quot;南宫&quot;, &quot;第五&quot;, &quot;公仪&quot;, &quot;公乘&quot;, &quot;太史&quot;, &quot;仲长&quot;, &quot;叔孙&quot;, &quot;屈突&quot;, &quot;尔朱&quot;, &quot;东乡&quot;, &quot;相里&quot;, &quot;胡母&quot;, &quot;司城&quot;, &quot;张廖&quot;, &quot;雍门&quot;,                &quot;毋丘&quot;, &quot;贺兰&quot;, &quot;綦毋&quot;, &quot;屋庐&quot;, &quot;独孤&quot;, &quot;南郭&quot;, &quot;北宫&quot;, &quot;王孙&quot;};        String type[] = {&quot;计算机&quot;, &quot;艺术&quot;, &quot;社会&quot;, &quot;历史&quot;, &quot;体育&quot;, &quot;小说&quot;, &quot;数理化参考书&quot;, &quot;名人传记&quot;, &quot;画册&quot;, &quot;建筑&quot;};        int year_title[] = {18, 19, 20};        File your_info = new File(&quot;C:\\Users\\Administrator\\Desktop\\try.txt&quot;);        String[] s = new String[10001];        int index = 0;        for (int time = 0; time &lt; 10000; time++) {//        bno            String bno = getBno(5);//        categoty            int CategoryIndex = random.nextInt(type.length - 1);            String categoty = type[CategoryIndex];//        title            int TitleLength = 4 + random.nextInt(10);            String title = &quot;&quot;;            for (int i = 0; i &lt; TitleLength; i++) {                title += getAuthor();            }//        press            int PressLength = 2 + random.nextInt(4);            StringBuilder press = new StringBuilder();            for (int i = 0; i &lt; PressLength; i++) {                int FirstNameIndex1 = random.nextInt(usual.length - 1);                press.append(usual[FirstNameIndex1]);            }            press.append(&quot;出版社&quot;);//        year  会生成一些超前的书不过不太重要 懒得改了            int YearTitle = random.nextInt(2);            int year = 100 * year_title[YearTitle] + 10 * random.nextInt(9) + random.nextInt(9);//        author, copy from:https://blog.csdn.net/zzy2011266/article/details/42011047            int LastNameIndex = random.nextInt(Surname.length - 1);//            String author = &quot;苏&quot;; //获得一个随机的姓氏            String author = Surname[LastNameIndex]; //获得一个随机的姓氏            /* 从常用字中选取一个或两个字作为名 */            if (random.nextBoolean()) {                int FirstNameIndex1 = random.nextInt(usual.length - 1);                int FirstNameIndex2 = random.nextInt(usual.length - 1);                author += usual[FirstNameIndex1] + usual[FirstNameIndex2];//                author += getAuthor();//                author += getAuthor();            } else {                int FirstNameIndex1 = random.nextInt(usual.length - 1);                author += usual[FirstNameIndex1];//                author += getAuthor();            }            //    price            double price = Double.valueOf(getPrice());            //    stock            int stock = 1 + random.nextInt(100);//            s[index++] = author;            s[index++] = String.valueOf(bno + &quot;,&quot; + categoty + &quot;,&quot; + title + &quot;,&quot; + press + &quot;,&quot; + year + &quot;,&quot; + author + &quot;,&quot; + price + &quot;,&quot; + stock);//            System.out.println(s[index - 1]);        }        try {            BufferedWriter out = new BufferedWriter(new FileWriter(your_info));            for (int i = 0; i &lt; index; i++) {                out.write(&quot;(&quot; + s[i] + &quot;)\r\n&quot;); // \r\n即为换行            }//            out.flush(); // 把缓存区内容压入文件            out.close(); // 最后记得关闭文件        } catch (Exception e) {            e.printStackTrace();        }    }    public static String getAuthor() {////分区处理是比较科学的方法，不过生成出来实在奇怪。。。。直接用常用字表了// GB2312标准中对所收汉字进行了“分区”处理，每区含有 94 个汉字/符号。这种表示方式也称为区位码。////01 - 09 区为特殊符号。////16 - 55 区为一级汉字，按拼音排序。////56 - 87 区为二级汉字，按部首/笔画排序。        String str = null;        int highPos, lowPos;        Random random = new Random();        highPos = (176 + Math.abs(random.nextInt(55)));//区码,尽量全选一区        random = new Random();        lowPos = 161 + Math.abs(random.nextInt(94));//位码        byte[] bArr = new byte[2];        bArr[0] = (Integer.valueOf(highPos)).byteValue();        bArr[1] = (Integer.valueOf(lowPos)).byteValue();        try {            str = new String(bArr, &quot;GB2312&quot;);    //区位码组合成汉字        } catch (UnsupportedEncodingException e) {            e.printStackTrace();        }        return str;    }    public static String getBno(int length) {        String val = &quot;&quot;;        Random random = new Random();        //参数length，表示生成几位随机数        for (int i = 0; i &lt; length; i++) {            String charOrNum = random.nextInt(2) % 2 == 0 ? &quot;char&quot; : &quot;num&quot;;            //输出字母还是数字            if (&quot;char&quot;.equalsIgnoreCase(charOrNum)) {                //输出是大写字母还是小写字母                int temp = random.nextInt(2) % 2 == 0 ? 65 : 97;                val += (char) (random.nextInt(26) + temp);            } else if (&quot;num&quot;.equalsIgnoreCase(charOrNum)) {                val += String.valueOf(random.nextInt(10));            }        }        return val;    }    public static String getPrice() {        double a = Math.random() * 100;        DecimalFormat my_format = new DecimalFormat(&quot;#.00&quot;);//&quot;0.00&quot;        String str = my_format.format(a);        return str;    }}</code></pre>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让自己的page被google收录（hexo搭建）</title>
    <link href="/silmont2000.github.io/2020/04/17/%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84page%E8%A2%ABgoogle%E6%94%B6%E5%BD%95/"/>
    <url>/silmont2000.github.io/2020/04/17/%E8%AE%A9%E8%87%AA%E5%B7%B1%E7%9A%84page%E8%A2%ABgoogle%E6%94%B6%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="问题产生"><a href="#问题产生" class="headerlink" title="问题产生"></a>问题产生</h1><p>还是想给自己的网站留点可量化的数据，然后搜索了一下自己的blog：</p><p>？？？？？？？？？？？？？？？？？竟然没有？？？？？？？？？？？？？？？</p><p>吓得我连忙去看了看自己的Github page还在不在… …果然还是太菜了… …</p><p>我完全不知道被搜索到还是要自己提交材料的…</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>这里我选择让google收录，百度…emmmm…</p><p>好吧其实也是我比较懒（</p><h2 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h2><h3 id="检查是否收录"><a href="#检查是否收录" class="headerlink" title="检查是否收录"></a>检查是否收录</h3><p>先直接google一下自己的site，看一看有没有出现在第一条，如果有的话就已经收录了下面就不用做啦：</p><pre><code class="c">site:https://silmont2000.github.io/</code></pre><h3 id="检查站点地图"><a href="#检查站点地图" class="headerlink" title="检查站点地图"></a>检查站点地图</h3><p>其次检查根目录下的public文件夹有没有一个站点地图文件，后缀名是xml，打开可以看到自己网站的结构，一般情况下命名是sitemap或者local-research之类。</p><p>有: 看下一点</p><p>没有：在git bash中执行：</p><pre><code>npm install hexo-generator-sitemap --save</code></pre><p>然后在hexo配置目录中加入：</p><pre><code>sitemap:    path: silmont2000.xml</code></pre><p>然后回到bash：</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>不出意外这个时候再检查public文件夹下就应该有这个地图文件啦。</p><h3 id="检查站点地图格式"><a href="#检查站点地图格式" class="headerlink" title="检查站点地图格式"></a>检查站点地图格式</h3><p>现在打开这个xml，检查一些常见 XML 错误：</p><ul><li><p>站点地图必须使用正确的标头。例如，如果站点地图包含视频信息，则会具有以下标头：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;        xmlns:video=&quot;http://www.google.com/schemas/sitemap-video/1.1&quot;&gt;</code></pre></li><li><p>标头中的命名空间必须为 <strong>“<a href="http://www.sitemaps.org/schemas/sitemap/0.9&quot;" target="_blank" rel="noopener">http://www.sitemaps.org/schemas/sitemap/0.9&quot;</a></strong>（而非 <strong>.9</strong>）。</p></li><li><p>所有 XML 属性必须括在单引号 (‘) 或双引号 (“) 中，并且必须采用直引号，而不是弯引号。Microsoft Word 之类的文字处理程序可能会插入弯引号。</p></li><li><p><strong>结尾是否有结束标签/&lt;/urlset/&gt;</strong></p></li></ul><h3 id="补习：站点地图："><a href="#补习：站点地图：" class="headerlink" title="补习：站点地图："></a>补习：站点地图：</h3><p>XML代表<strong>可扩展标记语言</strong>（XML），这是一个标准的机器可读的文件格式。一个站点地图是XML的文档，可以帮助谷歌和其他主要搜索引擎更好地理解你的网站而进行抓取。它<strong>结构化地</strong>列出了一个网站。有点像你所有页面url的一个有逻辑的集合。</p><h2 id="向google提交材料"><a href="#向google提交材料" class="headerlink" title="向google提交材料"></a>向google提交材料</h2><h3 id="用HTML标记验证所有权"><a href="#用HTML标记验证所有权" class="headerlink" title="用HTML标记验证所有权"></a>用HTML标记验证所有权</h3><p>访问<a href="https://search.google.com/search-console?resource_id=https%3A%2F%2Fsilmont2000.github.io%2F" target="_blank" rel="noopener">Google Search Console</a>：</p><p>选择输入网址前缀（右边这个），可以自己选择方式验证。我选择了看上去最简单的html标记：其他验证方法–html标记；</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1587112355/image-20200417161608624_q5vdj0.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200417161608624"></p><p>然后复制它提供给你的代码，到hexo主题文件夹下的（我现在是fluid主题）\themes\fluid\layout_partial，找到head.ejs，有的可能是header.ejs，把它给你的代码粘在head里面；</p><p>这个时候！不要忘记再编译部署一下，否则google也是验证不到的。</p><h3 id="提交站点地图"><a href="#提交站点地图" class="headerlink" title="提交站点地图"></a>提交站点地图</h3><p>还记得我们前面提到的sitemap嘛！</p><p><a href="https://support.google.com/webmasters/answer/7451001#error-list" target="_blank" rel="noopener">https://support.google.com/webmasters/answer/7451001#error-list</a></p><p>这个时候选择左边资源里面你的网址，然后进入站点地图：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1587112358/image-20200417162631979_rxgmkh.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200417162515880"></p><p>填写你的xml文件（加后缀），然后提交，就可以啦！</p><p>(想到本零食屋即将有其他朋友来我就好激动啊哈哈哈哈哈哈哈</p><h2 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h2><p>请参考<a href="https://support.google.com/webmasters/answer/7451001#error-list" target="_blank" rel="noopener">官方文档</a></p><p>如果hexo插件生成的总是有问题，建议使用第三方插件：<a href="https://smallseotools.com/zh/xml-sitemap-generator/" target="_blank" rel="noopener">XML站点地图生成器</a> ,  <a href="https://www.xml-sitemaps.com/" target="_blank" rel="noopener">这个没有名字</a></p><p>前者能识别中文，后者有可能有点问题</p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Google</tag>
      
      <tag>Github Page</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: ER图的设计、范式</title>
    <link href="/silmont2000.github.io/2020/04/09/Database-System-ER%E5%9B%BE%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%81%E8%8C%83%E5%BC%8F/"/>
    <url>/silmont2000.github.io/2020/04/09/Database-System-ER%E5%9B%BE%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%81%E8%8C%83%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>这一章节主要是讲各种范式（设计要求），ER图如何表示。从这一章开始关于数据库使用就告一段落了，下面会研究一些数据库的设计。</p><h1 id="E-R图的设计"><a href="#E-R图的设计" class="headerlink" title="E-R图的设计"></a>E-R图的设计</h1><h2 id="数据库结构的设计（复习）"><a href="#数据库结构的设计（复习）" class="headerlink" title="数据库结构的设计（复习）"></a>数据库结构的设计（复习）</h2><p>主要分为六大步：</p><p>需求分析：都有哪些角色？需要完成什么工作？</p><p>概念层设计：对数据和实体进行概括，提取出<strong>ER模型</strong></p><p>逻辑层设计：把ER图变成schema</p><p>schema refinement：用各种各样的<strong>范式</strong>进行检查</p><p>物理层设计、创建和初始化、分配角色和权限</p><h2 id="画法"><a href="#画法" class="headerlink" title="画法"></a>画法</h2><h3 id="基本画法"><a href="#基本画法" class="headerlink" title="基本画法"></a>基本画法</h3><ol><li><p>实体集</p><p>矩形，分两块，上面是实体集名称，下面是属性。属性如果是复合属性，按级别缩进即可。如果是多值属性，就用大括号括起来表示是一个集合。如果是导出形的（可以算的），就在后面加个括号，表示是一个函数。</p></li><li><p>关联集：菱形，如果有属性就用虚线连出去一个矩形。</p></li><li><p>自环联系集 recursive relationship set</p><p>这种情况发生在从属于同一个table的不同实体之间。比如课程A是课程B的先修课；学生A是学生B的组长等等。只需要分配并标注不同的role即可，一条线标注角色A连向关系集C，一条线标注角色B连向关联集C，AB都从实体集D出发。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165346207_oerckz.png" srcset="/silmont2000.github.io/img/loading.gif" alt="18"></p></li><li><p>弱实体集</p><p>直接举例，假如我告诉你一门课id是10034，你马上就能查到这门课，一是因为id是这门课的码，另一方面也不会产生歧义；但假如我告诉你一门课的开课时间是春学期（id=1），这一个春学期的课你无法确定是那一门课的春学期。我必须要告诉你这个section对应的course（体会一下两个”课程“的区别）才能确定section。</p><p>换句话说，当A的码都不能直接确定A，必须要由B辅助时，A就是弱实体集，对应的B就是强实体集。B叫做A的属主实体集（identifying entity set or owner entity set）链接弱实体集的关联集要用双层框菱形标记；而且这个关联集一定是一对多的；弱实体集肯定是total participation的；这个关联集叫做标识性联系（identifying relationship）。</p><p>弱实体集的码不叫码，叫discriminator， 或者partial key。正常情况下是下划线区分，那对于弱实体集就需要虚线区分。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165402296_j7lxkh.png" srcset="/silmont2000.github.io/img/loading.gif" alt="17"></p></li></ol><h3 id="进阶画法"><a href="#进阶画法" class="headerlink" title="进阶画法"></a>进阶画法</h3><h4 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h4><h5 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h5><ol><li><p>基数约束 Cardinality Constraints  </p><p>1端画箭头，多端不画。如果是一对一，就是&lt;-◇-&gt;，一对多就是 &lt;-◇–，多对多就是-◇-</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165300335_chtcb6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="15"></p></li><li><p>线</p><p>一根实线表示可以不是total participation；否则用双线。total participation：要求每个人必须有一碗饭：人和饭是total participation；可以允许有人不吃饭，那就不是。</p></li></ol><h5 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h5><ol><li><p>使用标注对上面的12进行整合。形式是x..y</p><p>x表示实体集最少连接量，y表示实体集最多连接量（注意都是对实体集，不是对左右）比如：导师0..<em>教授（动词）1..1学生，就代表导师可以不教授学生（联系为0）也可以无穷的教学生（\</em>是最多), 那对于学生来说最少最多都是1个导师，也就是学生是必须有导师的。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165333144_xxbs0x.png" srcset="/silmont2000.github.io/img/loading.gif" alt="14"></p></li></ol><h4 id="层级-level"><a href="#层级-level" class="headerlink" title="层级 level"></a>层级 level</h4><p>这可以借鉴面向对象程序设计中<strong>继承</strong>的概念。如：学生都有id和班级、专业的属性，但学生往下还可以分成不同的年级，会多出来一些实习单位、srtp项目之类特定年级的属性。</p><p>又比如人这个概念，还可以分为学生、学校雇员，学校雇员可以分为导师、助理—约定人除了这两种还可以有其他的，但学校雇员只有这两种：这说明层级之间<strong>不一定是完全分配</strong>的关系。</p><p>画法是下一集空心指向上一级。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165515486_o2utpw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="13"></p><h5 id="用户定义和条件定义-condition-defined-amp-user-defined"><a href="#用户定义和条件定义-condition-defined-amp-user-defined" class="headerlink" title="用户定义和条件定义  condition_defined&amp;user_defined"></a>用户定义和条件定义  condition_defined&amp;user_defined</h5><p>比如：只有”通过高考“的”人“才能成为”学生“，那么可以人为添加条件为：是否高考过为true的人才可以被分为学生。这叫做<strong>条件定义</strong>。但有一些分类纯粹是人工，比如我指派小王去项目A，小李去项目B，但小王小李之间的属性没什么区别，这就是<strong>用户定义</strong>的。</p><h5 id="不相交和可重叠-disjoint-amp-overlapping"><a href="#不相交和可重叠-disjoint-amp-overlapping" class="headerlink" title="不相交和可重叠 disjoint&amp;overlapping"></a>不相交和可重叠 disjoint&amp;overlapping</h5><p>这非常好理解。一个人可以边工作边读研，雇员和研究生的身份可重叠；但是他不能既是本科生又是研究生，也就是不相交，可以在ISA下标注disj。</p><h5 id="完全性约束-completeness-constraint"><a href="#完全性约束-completeness-constraint" class="headerlink" title="完全性约束 completeness constraint"></a>完全性约束 completeness constraint</h5><p>这就是对应着上面的”不一定完全分配“，如果必须完全分配的话就用双线连接isa和实体集，否则就用单线。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165610922_gnli1b.png" srcset="/silmont2000.github.io/img/loading.gif" alt="12"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165715530_jtwbta.png" srcset="/silmont2000.github.io/img/loading.gif" alt="11"></p><h2 id="其他说明和注解"><a href="#其他说明和注解" class="headerlink" title="其他说明和注解"></a>其他说明和注解</h2><p>这里基本只对二元的联系做了讨论，因为很多时候看上去的三元都可以拆成二元，并且超过三元的关系极其少见，如果出现三元，以上基本原则不变。</p><p>另外有时候我们画出非常复杂的ER图，可以考虑合并，用一个大矩形框来表示这是一个复合实体，然后再和其他的实体集进行交互。</p><p>放一个复杂的ER图大家体会一下。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598052/ERNF/image-20200411165205266_t492zb.png" srcset="/silmont2000.github.io/img/loading.gif" alt="10"></p><p>总结：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200411165540863_hogh8y.png" srcset="/silmont2000.github.io/img/loading.gif" alt="9"></p><h1 id="第一范式-First-Normal-Form-1NF"><a href="#第一范式-First-Normal-Form-1NF" class="headerlink" title="第一范式 First Normal Form (1NF)"></a>第一范式 First Normal Form (1NF)</h1><p>要求：属性原子性，也就是不能再分解。标准的关系数据库基本都是原子性的，非原子性的复合属性会被“拍扁”。</p><p>多值属性的处理：最理想的是把它单独形成一张表。</p><h2 id="栗子："><a href="#栗子：" class="headerlink" title="栗子："></a>栗子：</h2><p>学生（学号，姓名，性别，出生年月日），如果认为最后一列还可以再分成（出生年，出生月，出生日），它就不是一范式了，否则就是；</p><h1 id="分解-decomposition"><a href="#分解-decomposition" class="headerlink" title="分解 decomposition"></a>分解 decomposition</h1><p>使得不符合xNF的拆成符合条件的。</p><p><strong>要求是</strong>：无损（lossless）、依赖保持。无损的含义是将一个关系模式分解成若干个关系模式后，通过<strong>自然连接</strong>或投影等运算仍能还原到原来的关系模式。依赖保持的含义是这若干个关系模式的闭包并集回去能得到原来关系模式的闭包（不能多也不能少）。</p><p>这个过程就建立在<strong>函数依赖</strong>和<strong>多值依赖</strong>上。</p><h3 id="functional-dependence（FD）"><a href="#functional-dependence（FD）" class="headerlink" title="functional dependence（FD）"></a>functional dependence（FD）</h3><p>a-&gt;b： a决定b，b被a决定。即对于元组t1t2,如果a部分相同，b部分一定相同。</p><p>举例：</p><table><thead><tr><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>3</td></tr><tr><td>1</td><td>4</td></tr><tr><td>2</td><td>5</td></tr></tbody></table><p>在这个例子里面，A不能决定B，因为第一二行元组A部分相同B部分不相同。但反过来，如果这是所有的R，那么B是可以决定A的。如果只是一个instance的话就不一定。</p><h2 id="和key的关系"><a href="#和key的关系" class="headerlink" title="和key的关系"></a>和key的关系</h2><pre><code class="C">复习：比如一个小范围的所有人，没有重名的，考虑以下属性身份证 姓名 性别 年龄身份证唯一，所以是一个超道键姓名唯一，所以是一个超键（姓名，性别）唯一，所以是一个超键（姓名，性别，年龄）唯一，所以是一个超键--这里可以看出，超键的组合是唯一的，但可能不是最小唯一的身份证唯一，而且专没有多余属性，所以是一个候选键姓名唯一，而且没有多余属性，所以是一个候选键--这里可以看出，候选键是没有多余属性的超键考虑输入查询方便性，可以选择 身份证 为主键也可以 考虑习惯 选择 姓名 为主键--主键是选中的一属个候选键</code></pre><p>即范围上super&gt;candidate&gt;primary，强度上相反。</p><p>当K是R的superkey时，K一定能决定R的所有属性，反之亦然，也就是如果K一样，R的其他部分也一定一样，毕竟是唯一标识；那没有K的子集还能满足上面条件，就变成了candidate。</p><p>但这不代表只有superkey才是FD。比如属性之间：R（id，name，salary，city，company）：其中company-&gt;city，company并不是superkey（无法决定其他），却成立一个fd关系。</p><h2 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包 closure"></a>闭包 closure</h2><p>一个R中会有很多的FD，这些FD中很可能有一些推导关系（就像传递律那样），把这些全部推导出来就是一个“闭包”啦。</p><h3 id="Armstrong-定律"><a href="#Armstrong-定律" class="headerlink" title="Armstrong 定律"></a>Armstrong 定律</h3><p>自反律、增补律、传递律=&gt;伪传递律、合并律、分解律。这些都很简单啦就枚举一下不展开说了，不会的回去翻老师PPT哦。通过这些定律能得到一个属性数量为n的R，它的闭包最多有2的n方乘2的n方个fd。</p><h3 id="属性的闭包"><a href="#属性的闭包" class="headerlink" title="属性的闭包"></a>属性的闭包</h3><p>上面说的是关于一个R,会有一些F存在（function），形成一些明显的fd，再加上推导出来的fd，就是一个F的闭包。同时也产生了属性的闭包的概念。比如属性a的闭包，就是所有a能（直接或者间接）决定的属性的集合。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598053/ERNF/image-20200409154548135_glahnw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="8"></p><p>（更好的方法是画图）</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>检测superkey、用属性的闭包（好求）算F的闭包、推算fd</p><h3 id="正则覆盖canonical-cover"><a href="#正则覆盖canonical-cover" class="headerlink" title="正则覆盖canonical cover"></a>正则覆盖canonical cover</h3><p>通过删除一些fd得到 一个 能推导出闭包的最小集合。如何得到呢？从左边和右边分开来计算，看有没有用其他的fd可以推出来的，就删掉。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409155508487_oofdur.png" srcset="/silmont2000.github.io/img/loading.gif" alt="7"></p><h2 id="验证无损和依赖保持的栗子"><a href="#验证无损和依赖保持的栗子" class="headerlink" title="验证无损和依赖保持的栗子"></a>验证无损和依赖保持的栗子</h2><p>讲完了基础知识就来说一下如何判断分解的好坏。回到最开始，我们如何判断两个条件是否都被满足呢？</p><p>无损分解：如果R1∩R2是R1或R2的超码，则R上的分解（R1，R2）是无损分解。</p><p>保持依赖：如果F上的每一个函数依赖都在其分解后的某一个关系上成立，则这个分解是保持依赖的（这是一个充分条件）。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409160218086_zchk11.png" srcset="/silmont2000.github.io/img/loading.gif" alt="6"></p><h1 id="BC范式-Boyce-Codd-NF"><a href="#BC范式-Boyce-Codd-NF" class="headerlink" title="BC范式 Boyce-Codd NF"></a>BC范式 Boyce-Codd NF</h1><p>要求：在fd闭包里面的每一条fd，要么是平凡的（a-&gt;b,b是a的子集），要么a是R的superkey。</p><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409165828817_feqelx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="5"></p><p>首先先判断给定的R、F是不是已经满足的BCNF（当然大部分不满足），然后以一个fd为依据（假设是A-&gt;BCD)，将R分解为R1(A,B,C,D以及其他直接或间接能被A决定的属性)，R2(A,E,F以及其他不能被决定的属性)，这时A是R1的key，相当于我们强行构造了满足superkey条件的R1，然后对R2进行相同的操作，直到全部满足。</p><p>这样解决了R的冗余，但<strong>不能保证</strong>分解的结果依赖保持。</p><h1 id="第三范式-3NF"><a href="#第三范式-3NF" class="headerlink" title="第三范式 3NF"></a>第三范式 3NF</h1><p>虽然BC范式使得冗余减少了，但因为过程中对依赖性的影响，很可能造成查询时的复杂。所以权衡一下我们可以允许一定程度上的冗余来使得检查的过程变得容易。这就引入了可以保持依赖保持的第三范式。第三范式的检验成本很高，但分解成本小，所以可以选择先对R进行分解，在过程中进行判断。</p><p>特点：同时满足：allow some redundancy来提供查找便利、dependency preserving、losseless join。</p><p>要求：要么满足BCNF（要么是平凡的（a-&gt;b,b是a的子集），要么a是R的superkey），要么在（a-&gt;b）中a是码或b是主属性。</p><h1 id="综合例题"><a href="#综合例题" class="headerlink" title="综合例题"></a>综合例题</h1><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598054/ERNF/image-20200409172455199_p5x0qg.png" srcset="/silmont2000.github.io/img/loading.gif" alt="4"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409172516650_g5webq.png" srcset="/silmont2000.github.io/img/loading.gif" alt="3"></p><p>注意：候选码可能有多个，要找全候选码。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409172613537_v0izw6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="2"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409172632880_udslmd.png" srcset="/silmont2000.github.io/img/loading.gif" alt="1"></p><h1 id="第四范式"><a href="#第四范式" class="headerlink" title="第四范式"></a>第四范式</h1><p>要求：在a-&gt;-&gt;b中，要么是平凡的，要么a就是R的码。（和BC一毛一样）</p><p>所以凡是满足4NF，一定满足BCNF</p><h2 id="多值独立性-Multivalued-Dependencies-MVD"><a href="#多值独立性-Multivalued-Dependencies-MVD" class="headerlink" title="多值独立性 Multivalued Dependencies  ( MVD )"></a>多值独立性 Multivalued Dependencies  ( MVD )</h2><p>一个课程对应多本课本、多本书，但书和老师之间是独立的，书不会因为不同的老师而改变的。但假如三者成为一个R，显然会有大量的冗余，但因为课程是一个superkey，又满足了BCNF。所以在实际生活中还是会出现一些使用以上NF不够的情况。类似的还如：员工-&gt;部门；员工-&gt;员工子女，但子女和部门之间独立。</p><h2 id="多值决定"><a href="#多值决定" class="headerlink" title="多值决定"></a>多值决定</h2><p>MVD意义上的平凡（trivial）：b属于a，且a并b是R全集。记为：a-&gt;-&gt;b is trivial。其中：-&gt;-&gt;是多值决定的意思。</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1586598055/ERNF/image-20200409175237965_adaul6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="duozhhi"></p><p>实际上，a-&gt;b 是a-&gt;-&gt;b的一种特殊情况。即：每一个FD都符合MVD。MVD当然也有闭包的概念，不过有些工作比FD会复杂得多。</p><h2 id="栗子-1"><a href="#栗子-1" class="headerlink" title="栗子"></a>栗子</h2><p>和BC范式是一摸一样的，另外需要注意第四范式分解也不保证依赖保持。方法就是从主键出发，逐渐剥离，得到次级主键（我的理解）等等。</p><p><img src="/silmont2000.github.io/2020/04/09/Database-System-ER%E5%9B%BE%E7%9A%84%E8%AE%BE%E8%AE%A1%E3%80%81%E8%8C%83%E5%BC%8F/image-20200423090137909.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200423090137909"></p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
      <tag>E-R</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Java写一个Excel读取处理器</title>
    <link href="/silmont2000.github.io/2020/03/31/%E7%94%A8Java%E5%86%99%E4%B8%80%E4%B8%AAExcel%E8%AF%BB%E5%8F%96%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/silmont2000.github.io/2020/03/31/%E7%94%A8Java%E5%86%99%E4%B8%80%E4%B8%AAExcel%E8%AF%BB%E5%8F%96%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="问题的开始"><a href="#问题的开始" class="headerlink" title="问题的开始"></a>问题的开始</h1><p>最近课程小组在做一个疫情模拟器，里面涉及到一些政策。最开始我只写了政策和对应的国家属性的变化，后来有需求加一些说明，在Excel上操作不太舒服，我想把第一列（也就是政策的名字）copy到一个文档里面然后修改。</p><p>后来想想文档+excel两边对比有点麻烦，干脆把里面的属性值也copy下来好了。最近正好在学java，所以打算用java来写。过程中的确遇到了一些问题，特此记录。</p><h1 id="问题与解决"><a href="#问题与解决" class="headerlink" title="问题与解决"></a>问题与解决</h1><h2 id="操作表格的API"><a href="#操作表格的API" class="headerlink" title="操作表格的API"></a>操作表格的API</h2><p>使用java的原因也有用C或C++读取表格比较麻烦，还需要计算字节数，容易出错。在java里可以使用Apache POI这个很受欢迎的API，不过我选的是jxl啦。</p><p>jxl.jar包里面包含很多表格读写函数。在IDEA中的添加顺序：</p><ol><li>直接拖到左侧项目目录；</li><li>File-&gt;Project Structure-&gt;Modules-&gt;+-&gt;选择jar-&gt;export，apply，ok</li></ol><p>好处是这套API是纯Java的，并不依赖Windows系统，即使运行在Linux下，它同样能够正确的处理Excel文件（ 复 制 黏 贴 哈 哈 哈 哈 哈 ），不好的是不支持xlsx，只支持低版本xls。</p><p><strong>用到的</strong>函数详解：</p><p><a href="http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Sheet.html" target="_blank" rel="noopener">http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Sheet.html</a></p><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><h4 id="新建表格"><a href="#新建表格" class="headerlink" title="新建表格"></a>新建表格</h4><p>File里面写路径，也可以接收一个字符串值，如函数接收路径参数为String path，可以写成：</p><pre><code class="java">WritableWorkbook workbook=Workbook.createWorkbook(new File(path));</code></pre><p>当然也可以提取出来参数写成：</p><pre><code class="java">File tempFile=new File(path);WritableWorkbook workbook=Workbook.createWorkbook(tempFile);</code></pre><h4 id="新建sheet"><a href="#新建sheet" class="headerlink" title="新建sheet"></a>新建sheet</h4><p>一个是sheet名称参数，一个是在表中的位置，第一个sheet记为0。</p><pre><code class="java">WritableSheet sheet=workbook.createSheet(&quot;sheet1&quot;, 0);</code></pre><h4 id="新建单元格内容"><a href="#新建单元格内容" class="headerlink" title="新建单元格内容"></a>新建单元格内容</h4><p>jxl更新单元格通过sheet变量调用addCell函数实现，它的参数是一个Label类的变量。label可以认为是一个桥梁，因为它本身有很多种类型（比如数字、日期等等）。看一个例子：</p><pre><code class="java">Label label = new Lable(1, 0, &quot;hello&quot;,getDataCellFormat(CellType.STRING_FORMULA))sheet1.addCell(label);//示例：添加表头String title[] = new String[column + cho];        title[0] = &quot;id&quot;;        title[1] = &quot;name&quot;;        title[2] = &quot;explain&quot;;        // value        for (int k = 1; k &lt; column + 1; k++) {            title[k + cho - 1] = &quot;value&quot; + k;        }        Label label = null;        for (int i = 0; i &lt; title.length; i++) {            label = new Label(i, 0, title[i]);            sheet.addCell(label);        }// 结果：第一行是id name explain value1 value2 value3...</code></pre><p>注意，label中先写列（column）的序号再写行（row）的序号，然后是表格内容，接着是类型（可以不写）。类型的表达方式：数字：getDataCellFormat(CellType.NUMBER)；字符串：getDataCellFormat(CellType.STRING_FORMULA)；日期：getDataCellFormat(CellType.DATE)；日期可能需要配合new date()使用。</p><p>最后需要加上：</p><pre><code class="java">workbook.write();workbook.close();</code></pre><p>来完成对表格的更新和关闭。</p><h3 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h3><pre><code class="java">Workbook wb=Workbook.getWorkbook(new File(&quot;e:\\test2.xls&quot;));Sheet sheet=wb.getSheet(0);</code></pre><p>这样就获取了对应表格和对应的sheet编号。</p><p>以string形式获取单元格内容：</p><pre><code class="java">String cell_info = sheet.getCell(0, i).getContents();</code></pre><p>仍然遵循先写column再写row的方式（有一说一我真的好不习惯），getcell本身返回的是一个Cell类型的值，这个cell对象再进行getContents。（关于cell：<a href="http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Cell.html）而且getContents这个函数返回的就是String类型。" target="_blank" rel="noopener">http://jexcelapi.sourceforge.net/resources/javadocs/current/docs/jxl/Cell.html）而且getContents这个函数返回的就是String类型。</a></p><p>好啦这些基本够用啦！</p><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>已经碰到无数次中文乱码了……..现在的解决思路就是：检查整个流程有没有忘记某一步改成UTF-8。问题出现是我从txt文档读取一行字,储存到arraylist:</p><pre><code class="java">try {            File file;            file = new File(name);            InputStreamReader input = new InputStreamReader(new FileInputStream(file));            BufferedReader bf = new BufferedReader(input);            // 按行读取字符串            String str;            while ((str = bf.readLine()) != null) {                arrayList.add(str);//todo  此处似乎无法过滤win下的BOM标志            }            bf.close();            input.close();//            System.out.println(&quot;hello&quot;);// self check        } catch (IOException e) {            e.printStackTrace();        }</code></pre><p>在输出、debug都是没有问题的，都是正常的中文（因为IDE也是UTF-8问题不大），但在我下面用list的内容时出现了报错（实际上报错内容是下面的步骤写错了），我发现报错信息“传入了&amp;%%@#@&amp;*#……%”（总之是一堆不认识的东西），检查了一遍发现我的txt忘记改成utf8了。</p><p>第二次发现是在做equal比较的时候，两个都是“卫生”，怎么都不相等，发现.equal()括号里面传入的“卫生”在后台是乱码</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585712472/image-20200401111038444_jonrxl.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401111038444"></p><p>用以下形式强制转换一下：</p><pre><code class="java">s.equals((new String(&quot;卫生&quot;.getBytes(&quot;原来的编码&quot;), &quot;UTF-8&quot;)))</code></pre><h2 id="java的相等"><a href="#java的相等" class="headerlink" title="java的相等"></a>java的相等</h2><p>因为C++写顺手了嘛，理所当然的认为判断相等用==。殊不知在java中String A == String B判断的是二者的地址是否想等（说着打开了eclipse，小东西还是eclipse测试一下）。</p><pre><code class="java">public class Test40013 {    public static void main(String args[]) {        // 第一组        String A = &quot;hello&quot;;        String B = &quot;hello&quot;;        String C = A;        System.out.println(A == B);        System.out.println(A == C);        System.out.println((A == &quot;hello&quot;)+&quot;\n第二组：&quot;);        //第二组        String D = new String(&quot;hello&quot;);        System.out.println(D == B);        System.out.println(D == C);        System.out.println(D == &quot;hello&quot;);    }}</code></pre><p>结果第一组输出均为true，第二组均为false。解释：</p><p>String str1=”hello” ：</p><p>如果”ABC”这个字符串在常量池（Java String 池）里不存在，会在池里面先创建这个一个String对象，然后确定str1（编译期已经创建好）.如果已经存在，str1直接指向这个String池里的对象。所以在第一组里面，C和B、A的地址是一样的。</p><p>String str2 = new String(“hello”) ：</p><p>在堆里面创建一个 str2 的String 对象，它的value 是 “hello”，然后把指针赋给栈，将新构造出来的String对象的引用赋给str。 因此 只要是new String()，则，栈中的地址都是指向最新的new出来的堆中的地址。同时也会检测常量池里面有没有string，没有的话就新建一个。</p><p>这里<a href="https://www.cnblogs.com/aspirant/p/9193112.html讲的非常详细，搬运一下：" target="_blank" rel="noopener">https://www.cnblogs.com/aspirant/p/9193112.html讲的非常详细，搬运一下：</a></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585710276/image-20200401110315053_lwr7lx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401110315053"></p><ol><li>首先，通过main（）方法进栈。</li><li>然后再栈中定义一个对象s1,去堆中开辟一个内存空间，将内存空间的引用赋值给s1，“hello”是常量，然后去字符串常量池 查看是否有hello字符串对象，没有的话分配一个空间存放hello，并且将其空间地址存入堆中new出来的空间中。</li><li>在栈中定义一个对象s2，然后去字符串常量池中查看是否有”hello”字符串对象，有，直接把”hello”的地址赋值给s2.</li><li>即s1中存的是堆中分配的空间，堆中分配的空间中存的是字符串常量池中分配空间存放”hello”的空间的地址值。而s2中之间存的是字符串常量池中分配空间存放”hello”的空间的地址值。</li><li>由于s1与s2中存放的地址不同，所以输出false。因为，类String重写了equals()方法，它比较的是引用类型的 的值是否相等，所以输出true。即结果为false、true。</li></ol><p>特别是：</p><pre><code class="java">String a = &quot;ABC&quot;;String b=&quot;AB&quot;;String c=b+&quot;C&quot;;// 因为b是个引用System.out.println(a==c); false</code></pre><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>位元組順序記號（英語：byte-order mark，<em>BOM</em>）是位於碼點 U+FEFF 的統一碼字符的名称。</p><p>—维基百科</p><p>上面两个问题都解决完了，但我在得到“卫生”和“卫生”的路上又遇到了新的障碍。那就是即使更改了编码方式、用了equal之后还是不能得到true，于是我去求助男朋友，他发现了这个：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585712488/image-20200401111110229_v7fpxx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401111110229"></p><p>在0的位置上出现了奇怪的字符，查了一下发现是BOM字符。因为时间紧迫急着出程序，暴力手动删除了一下, 效果不错，有时间在改（我将 永远没有时间/狗头）：</p><pre><code class="java">if (s.startsWith(&quot;\uFEFF&quot;)) {//todo 手动处理改为BOMInputStream处理                s = s.replace(&quot;\uFEFF&quot;, &quot;&quot;);            }</code></pre><h2 id="正则表达式和replace-all"><a href="#正则表达式和replace-all" class="headerlink" title="正则表达式和replace all"></a>正则表达式和replace all</h2><p>读txt时有一部分的格式是：</p><pre><code class="java">经济：-20 舆论：20 国防： 指数：0.85 教育： 信念：-5 生活：-5 精神：</code></pre><p>但读入表格的时候不需要文字，只需要[-20,20,0,0.85,0,-5,-5,0]的格式。最开始我想到先把他们分割，Java的String支持正则表达式，<code>\s</code>表示匹配任何空白字符，<code>+</code>表示匹配一次或多次。空格字符就比如回车、制表、好几个空格什么的。那正好我这里每一项之间都有一个空格，于是读取txt的时候这样分割，储存到a里面；</p><pre><code class="java">String a[] = s.split(&quot; &quot;);</code></pre><p>然后写入表格时忽略中文及冒号：</p><pre><code class="java">label = new Label(j + cho, i, array[i - 1][j + cho - 1].replaceAll(&quot;[\u4e00-\u9fa5\\uFF1A]&quot;, &quot;&quot;));</code></pre><p>从表格输出时，把空项变成0：</p><pre><code class="java">for (int j = 3; j &lt; sheet.getColumns(); j++) {    cell_info = sheet.getCell(j, i).getContents().replace(&quot;&quot;, &quot;0&quot;);             System.out.print(cell_info + &quot;,&quot;);}</code></pre><p>是不是看着一点毛病没有！！！！！！！！</p><p>但是输出却是：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585712476/image-20200401113416767_krd9qd.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200401113416767"></p><p>换句话说-200变成了0<strong>-</strong>0<strong>2</strong>0<strong>0</strong>0，隔位插零，说起来也有点奇妙，我以为是只有空项才会被变成0.没想到啊没想到。所以修改成了下面这样：</p><pre><code class="java">if (cell_info.equals(&quot;&quot;)) cell_info = &quot;0&quot;;</code></pre><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>记录一下下：</p><p>要求是：记事本里面的政策输出成表格，并且编号。编号形式：type+order，如卫生的type记为1，在卫生大类下第99条记为10099。</p><p>先写入表格，再导出如下格式：</p><pre><code class="python">//        格式参考[{    id: 200001,    name:&quot;央行减息&quot;,    description:&quot;经历一段时间的经济低迷，银行存款利率下调，对经济略有负面影响。&quot;,    result: [-5, -5, 0, 0, 0, -5, 0, 0]},]</code></pre><p>readtxt.java: 读取txt文件并写入中间表</p><pre><code class="java">import java.io.*;import java.util.ArrayList;import java.util.Scanner;import jxl.*;import jxl.write.Label;import jxl.write.WritableSheet;import jxl.write.WritableWorkbook;import javax.swing.*;public class read_txt {    public static final int column = 7;// 属性总数    public static final int cho = 3;// 选项名、详情、id    public static int[] order = new int[column + 1];// 每项政策的下标 为了方便从order[1]开始用    public static int line = 3;// 每条政策在txt中占据的行数    public static int index_on_array = 0;// 储存在array中，为避免空行或type判断导致的浪费    public static String[][] toArrayByInputStreamReader2(String name) throws UnsupportedEncodingException {        for (int i = 1; i &lt; column + 1; i++) {// 初始化order均为1            order[i] = 1;        }        // 使用ArrayList来存储每行读取到的字符串        ArrayList&lt;String&gt; arrayList = new ArrayList&lt;&gt;();        try {            File file;            file = new File(name);            InputStreamReader input = new InputStreamReader(new FileInputStream(file));            BufferedReader bf = new BufferedReader(input);            // 按行读取字符串            String str;            while ((str = bf.readLine()) != null) {                arrayList.add(str);//todo  此处似乎无法过滤win下的BOM标志            }            bf.close();            input.close();//            System.out.println(&quot;hello&quot;);// self check        } catch (IOException e) {            e.printStackTrace();        }        // 对ArrayList中存储的字符串进行处理        int length = arrayList.size();//todo 有大量空余,可以优化        int width = column + cho;// 表格的宽度        String array[][] = new String[length][width];        int type = 0;        // 读取并判断        for (int i = 0; i &lt; length; i++) {            String s = arrayList.get(i);            if (s.startsWith(&quot;\uFEFF&quot;)) {//todo 手动处理改为BOMInputStream处理                s = s.replace(&quot;\uFEFF&quot;, &quot;&quot;);            } else if (s.equals(&quot;&quot;)) { // 跳过空行 否则下面的处理报错                continue;            }            // 调整type值            // todo 需要手动改，不要改动编码            if (s.equals((new String(&quot;卫生&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 1;            } else if (s.equals((new String(&quot;经济&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 2;            } else if (s.equals((new String(&quot;公共&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 3;            } else if (s.equals((new String(&quot;文化&quot;.getBytes(&quot;UTF-8&quot;), &quot;UTF-8&quot;)))) {                type = 4;            }            // 内容写入            else {                // type                int tmp_order = type * 10000 + (order[type]++);                array[index_on_array][0] = String.valueOf(tmp_order);                // name                array[index_on_array][1] = s;                // value                s = arrayList.get(++i);// 读下一行                String a[] = s.split(&quot; &quot;);// 以空格分割                for (int j = 2; j &lt; column + 2; j++) {                    array[index_on_array][j] = a[j - 2];// 注意j-2                }                // explain                s = arrayList.get(++i);// 读下一行//                if (s.startsWith(&quot;\uFEFF&quot;)) {//                    s = s.replace(&quot;\uFEFF&quot;, &quot;&quot;);//                }                array[index_on_array][width - 1] = s;                // output                // 对表输出//                for (int m = 0; m &lt; length; m++) {//                    for (int k = 0; k &lt; width; k++) {//                        if (array[m][k] != null)//                            System.out.print(array[m][k] + &quot; &quot;);//                    }//                    System.out.println();//todo 严重问题 换行需要判断//                }                // 如果一条一条输出则请注释此处，完整输出则无需注释,但要生成表格不能注释                index_on_array++;            }        }        return array;    }    public static void write_to_xls(String array[][]) throws Exception {        //创建Excel文件        File file = new File(&quot;C:\\Users\\Administrator\\desktop\\中间表.xls&quot;);        //创建文件        file.createNewFile();        //创建工作薄        WritableWorkbook workbook = Workbook.createWorkbook(file);        //创建sheet        WritableSheet sheet = workbook.createSheet(&quot;国家政策&quot;, 0);        //添加数据//        String title[] = {&quot;id&quot;, &quot;name&quot;,  &quot;value1&quot;, &quot;value2&quot;, &quot;value3&quot;, &quot;value4&quot;, &quot;value5&quot;, &quot;value6&quot;, &quot;value7&quot;, &quot;value8&quot;,&quot;explain&quot;};        String title[] = new String[column + cho];        title[0] = &quot;id&quot;;        title[1] = &quot;name&quot;;        title[2] = &quot;explain&quot;;        // value        for (int k = 1; k &lt; column + 1; k++) {            title[k + cho - 1] = &quot;value&quot; + k;        }        Label label = null;        for (int i = 0; i &lt; title.length; i++) {            label = new Label(i, 0, title[i]);            sheet.addCell(label);        }        // 追加数据        for (int i = 1; i &lt; array.length + 1; i++) {            //id            label = new Label(0, i, array[i - 1][0]);            sheet.addCell(label);            //name            label = new Label(1, i, array[i - 1][1]);            sheet.addCell(label);            //explain            label = new Label(2, i, array[i - 1][cho + column - 1]);            sheet.addCell(label);            //vaue            for (int j = 0; j &lt; column; j++) {                if (array[i - 1][j + cho] != null) {                    label = new Label(j + cho, i, array[i - 1][j + cho - 1].replaceAll(&quot;[\u4e00-\u9fa5\\uFF1A]&quot;, &quot;&quot;));                    String s_label = &quot;&quot; + label;                    sheet.addCell(label);                }            }        }        workbook.write();        workbook.close();    }    public static void main(String[] args) throws Exception {//        System.out.println(&quot;path：&quot;);//        Scanner in = new Scanner(System.in);//        String path = in.nextLine();//        String policy[][] = toArrayByInputStreamReader2(path);//        write_to_xls(policy);        for_xls.main();    }}</code></pre><p>read_output_xls,java 读表+输出python结构体</p><pre><code class="java">import jxl.Cell;import jxl.CellType;import jxl.Sheet;import jxl.Workbook;import jxl.read.biff.BiffException;import java.io.*;public class read_output_xls {    public static void readColumn(File file, int index) throws Exception {        Sheet sheet;        Workbook book;//        格式参考//        [//        {//                id: 200001,//                name:&quot;央行减息&quot;,//                description:&quot;经历一段时间的经济低迷，银行存款利率下调，对经济略有负面影响。&quot;,//                result: [-5, -5, 0, 0, 0, -5, 0, 0]//        },//        ]        try {            book = Workbook.getWorkbook(new File(String.valueOf(file)));            //工作表对象            sheet = book.getSheet(0);            System.out.println(&quot;[&quot;);            for (int i = 1; i &lt; sheet.getRows(); i++) {                String cell_info = sheet.getCell(0, i).getContents();                if (cell_info.equals(&quot;&quot;)) break;                System.out.print(&quot;{&quot; + &quot;\n&quot; + &quot;id:&quot;);                System.out.print(cell_info + &quot;,\nname:\&quot;&quot;);                cell_info = sheet.getCell(1, i).getContents();                System.out.print(cell_info + &quot;\&quot;,\ndescription:\&quot;&quot;);                cell_info = sheet.getCell(2, i).getContents();                System.out.print(cell_info + &quot;\&quot;,\nresult:[&quot;);                for (int j = 3; j &lt; sheet.getColumns(); j++) {                    cell_info = sheet.getCell(j, i).getContents();// blog                    if (cell_info.equals(&quot;&quot;)) cell_info = &quot;0&quot;;//                    cell_info = sheet.getCell(j, i).getContents().replace(&quot;&quot;, &quot;0&quot;);                    System.out.print(cell_info);                    if (j != sheet.getColumns() - 1)                        System.out.print(&quot;,&quot;);                }                System.out.println(&quot;]\n}&quot;);            }            System.out.println(&quot;]&quot;);        } catch (FileNotFoundException e) {            e.printStackTrace();        }    }}</code></pre><p>for_xls.java</p><pre><code class="java">import java.io.File;//import static readExcel.readColumn;public class for_xls {    public static void main() {        File file = new File(&quot;C:\\Users\\Administrator\\desktop\\中间表.xls&quot;);        try {            System.out.println(&quot;正在读取...&quot;);            read_output_xls.readColumn(file, 1);            System.out.println(&quot;读取完毕&quot;);        } catch (Exception e) {            e.printStackTrace();        }    }}</code></pre>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>Excel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql和DataGrip配置过程中的两个小问题</title>
    <link href="/silmont2000.github.io/2020/03/28/mysql%E5%92%8CDataGrip%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>/silmont2000.github.io/2020/03/28/mysql%E5%92%8CDataGrip%E9%85%8D%E7%BD%AE%E8%BF%87%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql下载与配置"><a href="#mysql下载与配置" class="headerlink" title="mysql下载与配置"></a>mysql下载与配置</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><p>下载社区版，进入推荐下载，会有两个版本：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585657445/image-20200328195329462_hc7gtw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200328195329462"></p><p>这里面看msi的命名可以看出下面这个有个web，意思是在线安装包。二者区别不大，在线安装是用官方的下载器，运行下载器后下载安装包并自动安装，网络通畅的情况下ok；离线的话手动安装。</p><p>一路next下面，到Choosing a Setup Type的时候选择custom，然后进入Select Products and Features，选择MySQL Servers下面的第三级目录，选择一个32位或64位的server即可。输入密码的时候要记好自己的密码。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>后来发生了神奇的事情，我的mysql仅在下载当天第一次通过密码登陆成功，之后mysql的窗口输入密码后回车闪退。于是开始尝试网上的方法：</p><h3 id="mysql服务未开启"><a href="#mysql服务未开启" class="headerlink" title="mysql服务未开启"></a>mysql服务未开启</h3><p>打开“服务”窗口，找到mysq80，双击打开看是否开启，的确没开启然后手动开启的时候出现如下提示：（因为是我已经修复啦只是一个截图，所以不是mysql80）</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585657445/image-20200328202123309_h5lmxe.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200328202123309"></p><p>我心想：嗯？难道我应该打开mysql窗口？重复了一下又失败了。这时我发现：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1585657445/image-20200328202303552_zmedop.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200328202303552"></p><p>？</p><p>为什么我有三个</p><p>于是我试着把正在运行的这个给关掉，再打开正经的mysql80：</p><p>成功了</p><p>。</p><p>然后这时候再启动其他的服务，也没什么问题了qwq</p><h1 id="DataGrip"><a href="#DataGrip" class="headerlink" title="DataGrip"></a>DataGrip</h1><p>JetBrains， nb！</p><p>然后配置的时候出了很多问题。。。。总结下来比较方便的是：</p><p>新建项目，然后按第一个快捷键，点左上角小加号添加数据库；注意severtimezone改成“Asia/Shanghai”，这样测试的时候就可以通过啦qwq</p>]]></content>
    
    
    <categories>
      
      <category>问题总结</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>DataGrip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: nested subqueries, complex queries and examples</title>
    <link href="/silmont2000.github.io/2020/03/18/Database-System-nested-subqueries-and-examples/"/>
    <url>/silmont2000.github.io/2020/03/18/Database-System-nested-subqueries-and-examples/</url>
    
    <content type="html"><![CDATA[<h1 id="views"><a href="#views" class="headerlink" title="views"></a>views</h1><p>好处：因为展示的属性比较少，所以更安全/容易使用</p><pre><code class="mysql">create view &lt;name&gt; as    select c1,c2....from...;create view &lt;name&gt; as(d1,d2...) -- 列重命名    select c1...from...</code></pre><p>还是拿之前的照秋学期春学期开课的题目做例子：</p><pre><code class="mysql">create view physics_fall_2009 as -- 建立一个09年秋季物理系开课情况表select course.course_id,sec_id,building,room_numberfrom course, sectionwhere course.course_id = section.course_id        and course.dept_name = &#39;Physics&#39;        and section.semester = &#39;fall&#39;        and section.year = &#39;2009&#39;;select course_id                -- 按照正常的表格使用from physics_fall_2009where building = &#39;waston&#39;;</code></pre><h1 id="complex-queries"><a href="#complex-queries" class="headerlink" title="complex queries"></a>complex queries</h1><h2 id="derived-relations-导出关系创建局部视图"><a href="#derived-relations-导出关系创建局部视图" class="headerlink" title="derived relations 导出关系创建局部视图"></a>derived relations 导出关系创建局部视图</h2><p>e.g. 找出那些平均工资高于42000美元的学院。</p><pre><code class="mysql">select dept_name, avg_salary            -- 3所求（结合内部）from(select dept_name, avg(salary)        -- 1先按学院计算平均工资    from instructor    group by dept_name)    as dept_avg(dept_name, avg_salary)    -- 2导出为表格dept_avg    -- 把子查询导出为一个relation，因为from后面应该加一个relation namewhere avg_salary &gt; 4200;</code></pre><p>from … as …  将内部 select 语句导出为一个<strong>局部视图</strong>，仅在执行时产生，执行结束就没有了，而 create view 是全局视图</p><h2 id><a href="#" class="headerlink" title></a></h2><h2 id="with-clause-创建局部视图"><a href="#with-clause-创建局部视图" class="headerlink" title="with clause 创建局部视图"></a>with clause 创建局部视图</h2><pre><code class="mysql">with max_budget(value) as             -- 局部视图m_b，只有一个属性viewselect max(budget)from departmentselect budget                        -- 匹配最有钱的部门from department, max_budgetwhere department.budegt = max_budget.value;</code></pre><p>在这里 with 也产生一个临时视图，语句结束就消失。也可以同时创建多个：</p><p>e.g. 找出支出工资平均大于总体平均值的系</p><pre><code class="mysql">with     dept_total(dept_name, value) as        -- 建立分类表格    (select dept_name, avg(salary)    from instructor    group by dept_name)    dept_total_avg(value) as            -- 求总体平均值    (select avg(value)    from dept_total)select dept_name                        -- 比较，from要同时加入两个relationfrom dept_total A, dept_total_avg Bwhere A.value &gt; B.value;</code></pre><h1 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h1><h2 id="嵌套例题"><a href="#嵌套例题" class="headerlink" title="嵌套例题"></a>嵌套例题</h2><p>概念：select语句中套着另一个select语句。</p><ol><li><h3 id="同时在09年秋季和10年春季开课的课程"><a href="#同时在09年秋季和10年春季开课的课程" class="headerlink" title="同时在09年秋季和10年春季开课的课程"></a>同时在09年秋季和10年春季开课的课程</h3></li></ol><pre><code class="mysql">select distinct course_idfrom sectionwhere semester=&#39;fall&#39; and year = 2009 and    course_id in (    select course_id    from section    where semester=&#39;spring&#39; and year = 2010);</code></pre><p>这里有一个 <strong>in</strong> 关键词，用来做一个check。相对的就是not in， 没有出现。</p><ol start="2"><li><h3 id="上过10101老师上过的课-注意必须去重"><a href="#上过10101老师上过的课-注意必须去重" class="headerlink" title="上过10101老师上过的课: 注意必须去重"></a>上过10101老师上过的课: 注意必须去重</h3></li></ol><pre><code class="mysql">select count(distinct id)from takeswhere (course_id, sec_id, semester, year)    in(    select course_id, sec_id, semester, year    from teaches    where instructor_id = 10101);</code></pre><ol start="3"><li><h3 id="找出每个银行中最大存款的账户"><a href="#找出每个银行中最大存款的账户" class="headerlink" title="找出每个银行中最大存款的账户"></a>找出每个银行中最大存款的账户</h3></li></ol><pre><code class="mysql">select account_num AN, balance from account Awhere balance &gt;=(select max(balance) from account B where A.branch_name = B.branch_name)order by balance;</code></pre><p>解释：内层的语句和外层不独立，先从内层账户中提取一个max值，条件就是和我当前检查的账户在同一个支行，然后再次比较当前账户的balance和max值进行比较，计算量相当可观。</p><ol start="4"><li><h3 id="输出比至少一个生物系老师工资高的老师"><a href="#输出比至少一个生物系老师工资高的老师" class="headerlink" title="输出比至少一个生物系老师工资高的老师"></a>输出比至少一个生物系老师工资高的老师</h3></li></ol><pre><code class="mysql">select distince T.namefrom instructor T,instructor Swhere T.salary&gt;S.salary and S.dept_name = &quot;BIO&quot;;</code></pre><pre><code class="mysql">select name from instructorwhere salary &gt; some     (select salary     from instructor     where dept_name = &quot;BIO&quot;);</code></pre><p>这里引入some和all，可以用于where中的比较。<strong>= some 即 in， 但 ≠some 不意味着 not in。</strong>返回T/F。</p><ol start="4"><li><h3 id="找出上了生物系所有课程的学生"><a href="#找出上了生物系所有课程的学生" class="headerlink" title="找出上了生物系所有课程的学生"></a>找出上了生物系所有课程的学生</h3></li></ol><pre><code class="mysql">select distinct S.id, S.namefrom student as S                 -- 检索所有学生where not exists((                -- 检查生物系所有课-S选的所有课是否是空集                               -- 是的话就输出    select course_id            -- 列出生物系所有课程id    from course    where dept_name = &quot;BIO&quot;)    except(    select T.student_id            -- 列出S选出的所有课    from takes as T    where S.id = T.id));</code></pre><p>exist： 不是空集， not exists 是空集，返回T/F。</p><p>类似的有unique，not unique，判断是否有重复，返回T,F。</p><h2 id="运用例题"><a href="#运用例题" class="headerlink" title="运用例题"></a>运用例题</h2><ol><li>找出上了十门课以上的学生； <em>enroll: 选课表</em></li></ol><pre><code class="mysql">select sno from enrollgroup by snohaving count(distinct cno) &gt; 10;</code></pre><ol start="2"><li><p>找出这些学生的名字：涉及两个表</p><p>不管是否被引用，导出表 (或称<strong>嵌套表</strong>) 必须给出别名</p><p>Student(sno, sname, ssex, sage, sdept)</p><p>Enroll(sno, cno, score)</p><p>Course(cno, cname, credits, pcourse)</p></li></ol><pre><code class="mysql">select TT.sno, sname, c_numfrom    (select sno, count(cno) as c_num    -- 分组求选课总数    from enroll    group by sno)as TT, student S                        -- 笛卡尔积 连接两个表where TT.sno = S.sno and c_num &gt; 10;        -- 筛选</code></pre>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: basic statements</title>
    <link href="/silmont2000.github.io/2020/03/13/Database-System-basic-statements/"/>
    <url>/silmont2000.github.io/2020/03/13/Database-System-basic-statements/</url>
    
    <content type="html"><![CDATA[<h1 id="What‘s-SQL"><a href="#What‘s-SQL" class="headerlink" title="What‘s  SQL"></a>What‘s  SQL</h1><p>结构化查询语言，structured query language，called ”SEQUEL“. It can define the structure of the data, modify data in the database, and specify security constraints. </p><p>There are four SQL conformance levels: entry level, transitional,  intermediate and full. But currently no DBMS products achieve Full SQL level.</p><p>including:</p><h2 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h2><p>data_definition language. DDL is used to operate the <strong>table</strong>.</p><ul><li>create table; alter(修改) table; drop table——integrity</li><li>create index; drop index</li><li>create view; drop view</li><li>create trigger; drop trigger</li></ul><h2 id="DML"><a href="#DML" class="headerlink" title="*DML"></a>*DML</h2><p>data_manipulation language. The SQL DML provides the ability to <strong>query</strong> information from the database and to <strong>insert</strong> tuples into, <strong>delete</strong> tuples from, and <strong>modify</strong> tuples in the database.</p><h2 id="DCL"><a href="#DCL" class="headerlink" title="DCL"></a>DCL</h2><p>data_control language.</p><h1 id="data-definition"><a href="#data-definition" class="headerlink" title="data definition"></a>data definition</h1><h2 id="basic-types"><a href="#basic-types" class="headerlink" title="basic types"></a>basic types</h2><ul><li>char(<em>n</em>): A fixed-length character string with user-specified length n. if store “hello” in char(7), <strong>two more spaces</strong> will be appended. when comparing two values of type char,if they are of different lengths, <strong>extra spaces</strong> are automatically added to the shorter one to make them the same size, before comparison. </li><li>varchar(<em>n</em>):  (<strong>recommended</strong>) A variable-length character string with user-specified maximum length n. so if “hello” is stored in varchar(7), <strong>no more spaces</strong> will be appended.</li><li>int</li><li>smallint: Kind of like a short int. Its size depends on the machine.</li><li>numeric(<em>p,d</em>): the allowed format is (p<strong>-d</strong> digits. d digits). e.g. numeric(4,2) allows 22.22, but neither 222.2 or 2.222.</li><li>real, double: real is kind of like float. and double is double.</li><li>float(<em>n</em>): A floating_point number, with precision of <strong>at least</strong> n digits.</li><li>date: containing a 4-digit-year, month and date. e.g. date ‘2000-2-17’</li><li>time: ‘08:15:30’ or ‘08:15:30.75’</li><li>timestamp: date + time. timestamp ‘2000-2-17 08:15:30.75’</li></ul><h2 id="basic-schema-definition-amp-basic-structure-of-select"><a href="#basic-schema-definition-amp-basic-structure-of-select" class="headerlink" title="basic schema definition &amp; basic structure of select"></a>basic schema definition &amp; basic structure of select</h2><h3 id="create-a-table"><a href="#create-a-table" class="headerlink" title="create a table"></a>create a table</h3><pre><code class="mysql">create table department            -- name of the table    (dept_name varchar(20) NOT NULL,     -- name of the attribute; domain of the attribute    building varchar(15),    budget numeric(12,2),    primary key(dept_name)        -- &lt;integrity_constraint&gt;     -- more than one primary keys are allowed    foreign key(dept_name) references department);    </code></pre><p>SQL supports a number of different integrity constraints. For example: <strong>primary key, foreign key references</strong> <em>s</em>, <strong>not null</strong>. Without a ban, every attribute can be null. As for primary key, the following writing is also equivalent:</p><pre><code class="sql">create table department                (primary key,     dept_name varchar(20) NOT NULL,   ...);    </code></pre><p>And if a check is necessary, we write:</p><pre><code class="mysql">create table instructor(ID char(5),primary key,            -- mark the folowing line is the primary keyname varchar(20),dept_name varchar(20),salary numeric(8,2),check(salary&gt;=0));        -- add some conditions</code></pre><h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h3><p>And the relation is empty initially. We write as below to insert a tuple; The values are specified in the order in which the corresponding attributes are listed i<strong>n the relation schema</strong>. </p><pre><code class="sql">insert into instructor    values (null, &quot;Silmont&quot;, &quot;digital media&quot;, 66000);</code></pre><p>But what if I forgot the order?</p><pre><code class="mysql">insert into instructor(name, dept_name, salary, ID)-- specify the order    values(&quot;Silmont&quot;, &quot;digital media&quot;, 66000, null);    -- or：    -- select e1, e2, ... from ...;</code></pre><h3 id="select"><a href="#select" class="headerlink" title="*select"></a>*select</h3><h4 id="queries-on-single-relation"><a href="#queries-on-single-relation" class="headerlink" title="queries on single relation"></a>queries on single relation</h4><p>The <strong>select</strong> clause is used to list the attributes desired in the result of a query. The <strong>from</strong> clause is a list of the relations to be accessed in the evaluation of the query.  The simplest statement is:</p><pre><code class="sql">select namefrom instructor;</code></pre><p>Ending with a semicolon, the statement means take out all the <em>names</em> of the relation <em>instructor</em>, the result will have a heading “<strong><em>name</em></strong>“. But if we do the same thing to find dept_name, lots of duplication will happen because <strong>more than one</strong> employee works in this department. The solution is:</p><pre><code class="sql">select distinct dept_namefrom instructor;</code></pre><p>With <strong>distinct</strong>, we force the elimination(淘汰) of duplicates ( <strong>exactly</strong> the same results) . On the contrary, select all is used to emphasize that duplicates should not be removed. And <strong>all is the default.</strong></p><p>The select clause may also contain arithmetic expressions involving the operators +, − , ∗,a n d / operating on constants or attributes of tuples, while not result in any change to relation. For example:</p><pre><code class="mysql">select ID, name, salary * 1.1from instructor;</code></pre><p>While in life, sometimes only those who contribute more can get a rise. So we need to specifies the condition, like:</p><pre><code class="mysql">select ID, name, salary * 1.1from instructorwhere salary &gt;=10 000 and dept_name = &#39;Comp.Sci&#39;;</code></pre><p>The <strong>where</strong> clause is a predicate involving attributes of the relation in the <strong>from</strong> clause, if omitted, the predicate is <strong>true</strong>. Some other symbols has the same status as ‘&gt;’: <strong>&lt;, =,</strong> <strong>between</strong> num1 <strong>and</strong> num2, <strong>not</strong> <strong>between</strong>; <strong>NOT</strong> and <strong>OR</strong> are used widely, too.</p><pre><code class="mysql">where (instructor.ID, dept_name) = (teaches.ID, &#39;bio&#39;)；</code></pre><p>The statement above is also legal.</p><h4 id="queries-on-multiple-relations"><a href="#queries-on-multiple-relations" class="headerlink" title="queries on multiple relations"></a>queries on multiple relations</h4><p>To solve the problem that more than one relation are involved to get a result, we need to <strong>select</strong> from a unioned-relation. For example, “Retrieve the names of all instructors, along with their department names and department building name”,  the operations are related to the relation <em>instructor</em>, <em>department</em>.</p><pre><code class="mysql">select name, instructor.dept_name, buildingfrom instructor, departmentwhere instructor.dept_name = department.dept_name;orfrom instructor natural join teaches;</code></pre><p>First, the relation name are used <strong>necessarily</strong> as a prefix to make <em>dept_name</em> clear. Second, list the relations that need to be accessed in the <strong>from</strong> clause(Cartesian Product), and specify the matching condition in the <strong>where</strong> clause. The example above is a natural union.</p><p>In the previous article, I mentioned that when finding the <em>most</em>, making a Cartesian product with the relation itself is feasible. But they will have the same prefix, so renaming is put forward:</p><pre><code class="mysql">select name as instructor_name, course_IDfrom instructor as I, teaches as Twhere I.ID = T.ID;select distinct namefrom instructor as I, instructor as Twhere I.salary &lt; T.salary and T.dept_name = &quot;Comp.Sci&quot;;</code></pre><p>‘AS’ is optional. It rename the result of column A as B, so you can also write count(name) as name_num. </p><h3 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h3><pre><code class="mysql">drop table instructor; -- delete all information</code></pre><p>delete everything about instructor, including the relation itself.</p><h3 id="delete"><a href="#delete" class="headerlink" title="delete"></a>delete</h3><p><strong>delete</strong> retains relation <em>instructor</em>, but deletes all tuples in <em>instructor</em>. </p><p>e.g. 删除金融系的所有教师信息</p><pre><code class="mysql">delete from instructorwhere dept_name = &#39;Finace&#39;;</code></pre><p>删除 Needham 市所有支行的所有存款信息，并删除存款人中的相关信息</p><pre><code class="mysql">delete from accountwhere branch_name in    (select branch_name                 -- 先找到要删哪些支行    from branch    where branch_city = &#39;Needham&#39;);delete from depositerwhere account_number in    (select account_number    from branch B, branch A    where branch_city = &#39;Needham&#39; and B.branch_name = A.branch_name)</code></pre><p>删除所有工资水平低于平均水平的老师</p><pre><code class="mysql">delete from instructorwhere salary &lt;    (select avg(salary)    from instructor);                -- 虽然是数和avg返回集合的比较  但因为集合是单元素集合 所以ok    -- 另外 这里不必考虑删除元组造成的avg更新 因为在同一SQL语句内  除非外层查询的元组变量引入内层查询  否则内层查询只进行一次</code></pre><h3 id="update"><a href="#update" class="headerlink" title="update"></a>update</h3><p>对relation的更新：</p><p>Example: all instructors with salary over $100,000 receive a 3 percent raise, whereas (而) all others receive a 5 percent raise. 这里如果更新两次，那么顺序很重要，要避免两类人群发生交叠。</p><pre><code class="mysql">update instructor    set salary =salary * 1.05    where salary &gt; 10000;update instructor     set salary = salary * 1.03    where salary &lt;= 10000;update instructor             -- 可以用 case 语句解决顺序问题set salary = case            when salary &lt;=10000            then salary * 1.05            else salary * 1.03            end;</code></pre><p>对view的更新：</p><pre><code class="mysql">create view faculty asselect ID, name, dept_namefrom instructorinsert into facultyvalues(&#39;30765&#39;,&#39;Green&#39;,&#39;music&#39;);-- 这实际上是：insert into instructor value(&#39;3..&#39;,&#39;G..&#39;,&#39;m..&#39;, null);-- 正因此，太过复杂的view的更新难以翻译，所以不被允许-- 换句话说，view 只是一个续表，宽松查询，严格更新</code></pre><h3 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h3><p><strong>Alter</strong> is used to add or drop or modify attributes to an existing relation. A is the new attribute, D is its domain.</p><pre><code class="mysql">alter table r add (A1 D1, A2 D2...,An Dn);alter table r drop A;-- may be not supportedalter table r modify (ID char(10), salary not null);</code></pre><h3 id="create-index"><a href="#create-index" class="headerlink" title="create index"></a>create index</h3><p>It is used to create indexes on tables. Indexes enable database applications to look up data faster without reading the entire table. </p><pre><code class="mysql">CREATE INDEX index_nameON table_name (column_name a, b,...,n);-- Creates a unique index on a table. Duplicate values are not allowed:CREATE UNIQUE INDEX index_nameON table_name (column_name)</code></pre><h2 id="string-operations"><a href="#string-operations" class="headerlink" title="string operations"></a>string operations</h2><h3 id="string-matching-operator-通配符"><a href="#string-matching-operator-通配符" class="headerlink" title="string-matching operator 通配符"></a>string-matching operator 通配符</h3><h4 id="all"><a href="#all" class="headerlink" title="*: all"></a>*: all</h4><pre><code class="mysql">select * from student where dept_name = &quot;Sci&quot;;</code></pre><h4 id="matches-any-substring"><a href="#matches-any-substring" class="headerlink" title="%:  matches any substring."></a>%:  matches any substring.</h4><h4 id="matches-any-char"><a href="#matches-any-char" class="headerlink" title="_:  matches  any char."></a>_:  matches  any char.</h4><p>Must be used with <strong>LIKE</strong> in <strong>WHERE</strong>.</p><pre><code class="mysql">SELECT * FROM WebsitesWHERE url LIKE &#39;https%&#39;</code></pre><p>Caution that patterns are case sensitive, uppercase characters do not match lowercase characters. </p><p>• ’Intro%’ matches any string beginning with “Intro”. </p><p>• ’%Comp%’ matches any string containing “Comp” as a substring, for example, ’Intro. to Computer Science’, and ’Computational Biology’. </p><p>• ’ _ _ _ ’matches any string of exactly three characters . </p><p>• ’ _ _ _%’ matches any string of at least three characters. </p><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>The <strong>escape character</strong> is used immediately before a special pattern character to indicate that the special pattern character is to be treated like a normal character. We define the escape character for a <strong>like</strong> comparison using the <strong>escape</strong> keyword. To illustrate, consider the following patterns, which use a backslash (\) as the escape character.</p><p>• <strong>like</strong> ’ab%cd%’ <strong>escape</strong> ’\’   matches all strings beginning with “ab%cd”. </p><p>• <strong>like</strong> ’ab\cd%’ <strong>escape</strong> ’\’    matches all strings beginning with “ab\cd”. </p><p> the string “It’s right” can be specified by “It<strong>”</strong>s right”. And sometimes we use <strong>not</strong> <strong>like</strong> to find mismatches.</p><h3 id="concatenating-串联"><a href="#concatenating-串联" class="headerlink" title="concatenating 串联"></a>concatenating 串联</h3><pre><code class="mysql">select 教师名 =  || name from instructorwhere ...</code></pre><p>the output is: 教师名 = SU…</p><h3 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h3><p>and by using function <strong>lower(s), upper(s)</strong> we can convert from upper to lower case and vice versa; <strong>trim(s)</strong> helps to remove the space at the end of the sentence.</p><h2 id="display-the-tuples"><a href="#display-the-tuples" class="headerlink" title="display the tuples"></a>display the tuples</h2><h3 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a>ordering</h3><pre><code class="mysql">select name from instructor where dept_name = &#39;CS&#39;order by salary desc, name asc;</code></pre><p>We specify desc for descending order, and asc for ascending order. <strong>Asc is the default.</strong></p><h2 id="set-operations"><a href="#set-operations" class="headerlink" title="set operations"></a>set operations</h2><p>Unlike <strong>SELECT</strong> clause, all these operations automatically eliminates duplicates. Use <strong>union all, intersect all</strong> and <strong>except all</strong> to retain duplicates.</p><p>union</p><pre><code class="mysql">-- select courses in this long term (select course id from section where semester = ’Fall’ and year= 2009) union (select course id from section where semester = ’Spring’ and year= 2010); -- get a complete result(select course id from section where semester = ’Fall’ and year= 2009) union all(select course id from section where semester = ’Spring’ and year= 2010); </code></pre><p>intersect and except are similar to union.</p><h2 id="aggregate-functions"><a href="#aggregate-functions" class="headerlink" title="aggregate functions"></a>aggregate functions</h2><p>These functions operate on the multi-set of values of a column of a relation, and return  <strong>a value.</strong></p><p>avg (col ):  average value</p><p>min (col ):   minimum value</p><p>max (col ):   maximum value</p><p>sum (col ):   sum of values</p><p>count (col ):   number of values</p><ul><li>Attributes in <strong>select</strong> clause outside of <strong>aggregate</strong> functions must appear in <strong>group</strong> <strong>by</strong> list</li></ul><p>要么在聚合函数里  要么在group by里</p><h2 id="examples"><a href="#examples" class="headerlink" title="examples"></a>examples</h2><ol><li>输出计院的老师工资平均数: 得到结果</li></ol><pre><code class="mysql">select avg(salary) as avg_salaryfrom instructorwhere dept_name = &#39;CS&#39;;</code></pre><ol start="2"><li>输出各个学院的平均工资： 得到分组结果</li></ol><pre><code class="mysql">select dept_name, avg(salary) as avg_salaryfrom instructorgroup by dept_name;</code></pre><ol start="3"><li>找出每个支行的用户数：得到需要自然连接的分组结果</li></ol><pre><code class="mysql">select bra_name, count(distinct id) as numfrom account, depositorwhere account.bra_name=depositor.bra_namegroup by bra_name;</code></pre><ol start="4"><li>找出平均工资大于…的学院：对分组结果进行选择（having，出现的也是要么在聚合函数，要么在group by）</li></ol><pre><code class="mysql">select dept_name, avg(salary) as avgfrom instructorgroup by deot_namehaving avg(salary)&gt;42000;</code></pre><h2 id="notes"><a href="#notes" class="headerlink" title="notes"></a>notes</h2><p><strong>execution order:</strong></p><p>from-&gt; where-&gt; group-&gt; having-&gt; select-&gt;order by</p><p><strong>notes</strong>: </p><p>having/select语句，出现的也是要么在聚合函数，要么在group by</p><p>where里面不能直接加聚合函数要放到having</p><h2 id="null-value"><a href="#null-value" class="headerlink" title="null value"></a>null value</h2><p>对null值做加减乘除结果都是null</p><p>和null的一切比较（包括=）结果都是unknown（防止逻辑矛盾），所以如果要统计null值要写 A is null， 而不能是 A = null；或者写 A = null is unknown，聚合函数会忽略空值。但count（*）来计算总记录数目，不会忽略空值。</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Database System: concepts, relational algebra, null value</title>
    <link href="/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/"/>
    <url>/silmont2000.github.io/2020/03/09/Database-System-concepts-relational-algebra-null-value/</url>
    
    <content type="html"><![CDATA[<h2 id="CONCEPTS"><a href="#CONCEPTS" class="headerlink" title="CONCEPTS"></a>CONCEPTS</h2><h3 id="1-relation-relationship"><a href="#1-relation-relationship" class="headerlink" title="1. relation/relationship"></a><strong>1. relation/relationship</strong></h3><p>a relationship is a specific association among several entities.</p><p>a relation is an abstract concept，mostly equals to a table.</p><h3 id="2-principals"><a href="#2-principals" class="headerlink" title="2. principals"></a><strong>2. principals</strong></h3><p><em>key words： domain；atomic；null/true/false；relation schema/relation instance or database schema/database instance；unordered and no duplicate；</em></p><h4 id="custom-writing-formats："><a href="#custom-writing-formats：" class="headerlink" title="custom writing formats："></a>custom writing formats：</h4><p>a relation schema： R = {A1, A2…,An}<br>                  INSTRUCTOR-SCHEMA = {ID, NAME, DEPT_NAME}<br>a relation： r(R) = {A1, A2…,An}<br>                  instructor_one(INSTRUCTOR-SCHEMA) = {ID, NAME, DEPT_NAME}<br>a tuple( a row in the table)：t || r<br>an attribute： t[name]</p><h3 id="3-about-KEY"><a href="#3-about-KEY" class="headerlink" title="3. about KEY"></a><strong>3. about KEY</strong></h3><p><img src="https://cdn-images-1.medium.com/max/1000/1*GNDD3CpbMQOSfBkqKALn-Q.png" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><p>student(people) = {<u>st-ID</u>, st-name，sex, address，major-ID}</p><p>major(subject) = {<u>major-ID</u>, major-name}</p><p>major-ID is not a primary key of relation student, but a primary key of major, then it’s called a foreign key （referencing major，and major-ID must exist while can be marked with NULL），student is called a referencing relation；and major is a referenced relation.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851554/1_wdgu4h.png" srcset="/silmont2000.github.io/img/loading.gif" alt="img"></p><center>Schema Diagram (模式图)</center><h2 id="TALK-ABOUT-RELATIONAL-ALGEBRA"><a href="#TALK-ABOUT-RELATIONAL-ALGEBRA" class="headerlink" title="TALK ABOUT RELATIONAL ALGEBRA"></a>TALK ABOUT RELATIONAL ALGEBRA</h2><p>What plays a vital role in learning DBS is four basic operations： to add，to delete，to update the data and to select what you need. </p><p>Pure languages form underlying basis of query languages that people use，including：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583852096/2_orcqst.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200310231102353"></p><h3 id="1-relational-algebra"><a href="#1-relational-algebra" class="headerlink" title="1. relational algebra"></a><strong>1. relational algebra</strong></h3><h4 id="select：-sigma-rho-R"><a href="#select：-sigma-rho-R" class="headerlink" title="select： $\sigma$_ $\rho$(R)"></a>select： $\sigma$_ $\rho$(R)</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170550040_adbark.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170550040"></p><p>incident: $\sigma$_(A=B ^ c&gt;20) (R)    result:</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170640349_trjdbw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170640349"></p><hr><h4 id="project-prod-A-C-r"><a href="#project-prod-A-C-r" class="headerlink" title="project :  $\prod$_A,C(r)"></a>project :  $\prod$_A,C(r)</h4><h4 id><a href="#" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170659603_dnoiiw.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170659603"></h4><p>result：</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170722947_cb5kcy.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170722947"></p><hr><h4 id="union"><a href="#union" class="headerlink" title="union"></a>union</h4><h4 id="-1"><a href="#-1" class="headerlink" title></a><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170830612_klxjsz.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170830612"></h4><p>result： merger of similar items. </p><p>for R union S to be, they must have the same arity (same number of attributes) and the domains must be compatible.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170848539_mvp8cl.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170848539"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308164500042_hioijk.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308164500042"></p><h4 id="set-difference-a-b"><a href="#set-difference-a-b" class="headerlink" title="set difference: a-b"></a>set difference: a-b</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170907433_jfynpx.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170907433"></p><h4 id="set-intersection"><a href="#set-intersection" class="headerlink" title="set intersection"></a>set intersection</h4><p>example is showed in union; and also the same requirements.  while after setting difference, the result should be : </p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308173354362_tb2c8k.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308173354362"></p><hr><h4 id="Cartesian-product"><a href="#Cartesian-product" class="headerlink" title="Cartesian product"></a>Cartesian product</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170933374_budd0t.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170933374"></p><p>result: list out all the possible permutation results</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851120/image-20200308170950775_aiim6b.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308170950775"></p><hr><h4 id="rename"><a href="#rename" class="headerlink" title="rename"></a>rename</h4><p>$\rho$_x(E): rename E as x;</p><p>x can be x(a1, a2 …, an) to rename attributes at the same time.</p><hr><h4 id="natural-join-a-special-case-of-theta-join"><a href="#natural-join-a-special-case-of-theta-join" class="headerlink" title="natural join (a special case of theta join)"></a>natural join (a special case of theta join)</h4><p>first find out the same attributes(1,a; 2,b).</p><p>second make Cartesian product.</p><p>at last merge similar items.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308173613414_gadtj6.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308173613414"></p><hr><h4 id="division"><a href="#division" class="headerlink" title="division"></a>division</h4><p>Inverse calculation of Cartesian product</p><p>example: Q = R/S</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308174447859_ilinqp.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308174447859"></p><hr><h4 id="assignment"><a href="#assignment" class="headerlink" title="assignment"></a>assignment</h4><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309162625959_qismip.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309162625959"></p><p>in fact, this thought is similiar to that in <em>example: banking; 7</em> ,  to <strong>take away what we don’t need</strong> (tmp2).</p><hr><h4 id="extended-relational-algebra-operations"><a href="#extended-relational-algebra-operations" class="headerlink" title="extended relational-algebra-operations"></a>extended relational-algebra-operations</h4><p><strong>generalized projection</strong>: use arithmetic expressions as the projection order.</p><p><strong>aggregate functions &amp; operations</strong>: returns a single value as a result. requirements can be avg，min，max，sum，count；rename the result with ‘as’.</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165427164_lvksfv.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309165427164"></p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309165755602_livi38.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309165755602"></p><p><strong>Left Out Join &amp; Right Out Join &amp; Full Outer Join</strong>: define the basis for retaining results.</p><hr><hr><h3 id="EXAMPLE-banking"><a href="#EXAMPLE-banking" class="headerlink" title="EXAMPLE: banking"></a>EXAMPLE: banking</h3><hr><p><strong>branch (<u>branch-name</u>, branch-city, assets)</strong></p><p><strong>customer (<u>customer-name</u>, customer-street, customer-city)</strong></p><p><strong>account (<u>account-number</u>, branch-name, balance)</strong></p><p><strong>loan (<u>loan-number</u>, branch-name, amount)</strong></p><p><strong>depositor (<u>customer-name, account-number</u>)</strong></p><p><strong>borrower (<u>customer-name, loan-number</u>)</strong></p><p>Q:</p><p>1: Find all loans of over $1200</p><p>2: Find the <strong>loan number</strong> for each loan of an amount greater than $1200</p><p>3: Find the names of all customers who have a loan, <strong>or</strong> an account, or both, from the bank.</p><p>4: WHAT ABOUT <strong>AND</strong>?</p><p>5: Find the names of all customers who have a loan at the Perryridge branch.(<strong>USE AXB</strong>)</p><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200308172122007_qs6btb.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200308172122007"></p><p>6: Find the names of all customers who have a loan at the Perryridge branch but do not have</p><p> an account at any branch of the bank.(<strong>USE A-B</strong>)</p><p><strong>7: Find the largest account balance.</strong></p><p>ans = all - not the largest</p><p>​       = all - $\prod$<em>_account_balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2)     //a1 == a2 ==account</p><p>​       = $\prod$<em>balance (account) - $\prod$a1.balance   $\rho$</em> _(a1.account&lt;a2.account) (a1 x a2) </p><h3 id="2-tuple-relational-calculus"><a href="#2-tuple-relational-calculus" class="headerlink" title="2. tuple relational calculus"></a><strong>2. tuple relational calculus</strong></h3><p>//To be added</p><h3 id="3-domain-relational-calculus"><a href="#3-domain-relational-calculus" class="headerlink" title="3. domain relational calculus"></a><strong>3. domain relational calculus</strong></h3><p>//To be added</p><h2 id="about-NULL-value"><a href="#about-NULL-value" class="headerlink" title="about NULL value"></a>about NULL value</h2><p><img src="https://res.cloudinary.com/de5pgx71x/image/upload/v1583851121/image-20200309171926902_o7qkus.png" srcset="/silmont2000.github.io/img/loading.gif" alt="image-20200309171926902"></p><p>ALL in all，null is known, unknown is unknown.</p>]]></content>
    
    
    <categories>
      
      <category>新知整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Database System</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/silmont2000.github.io/2020/03/07/hello-world/"/>
    <url>/silmont2000.github.io/2020/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
